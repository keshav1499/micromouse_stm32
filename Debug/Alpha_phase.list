
Alpha_phase.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9f4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  0800ab98  0800ab98  0001ab98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af4c  0800af4c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800af4c  0800af4c  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800af4c  0800af4c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af4c  0800af4c  0001af4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af50  0800af50  0001af50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800af54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          00000410  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005e4  200005e4  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   00015996  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002ce1  00000000  00000000  00035bdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001268  00000000  00000000  000388c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e79  00000000  00000000  00039b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000235ad  00000000  00000000  0003a9a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019b00  00000000  00000000  0005df4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d6e42  00000000  00000000  00077a4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005dc0  00000000  00000000  0014e890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  00154650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ab7c 	.word	0x0800ab7c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	0800ab7c 	.word	0x0800ab7c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <HAL_TIM_IC_CaptureCallback>:
}



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	7f1b      	ldrb	r3, [r3, #28]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	f040 8083 	bne.w	8000d10 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8000c0a:	4b45      	ldr	r3, [pc, #276]	; (8000d20 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d11a      	bne.n	8000c48 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read the first value
 8000c12:	2104      	movs	r1, #4
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f005 fef1 	bl	80069fc <HAL_TIM_ReadCapturedValue>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	4a41      	ldr	r2, [pc, #260]	; (8000d24 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000c1e:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000c20:	4b3f      	ldr	r3, [pc, #252]	; (8000d20 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	6a1a      	ldr	r2, [r3, #32]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f022 020a 	bic.w	r2, r2, #10
 8000c34:	621a      	str	r2, [r3, #32]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	6a1a      	ldr	r2, [r3, #32]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f042 0202 	orr.w	r2, r2, #2
 8000c44:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC2);
		}
	}
}
 8000c46:	e063      	b.n	8000d10 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 8000c48:	4b35      	ldr	r3, [pc, #212]	; (8000d20 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d15f      	bne.n	8000d10 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);  // read second value
 8000c50:	2104      	movs	r1, #4
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f005 fed2 	bl	80069fc <HAL_TIM_ReadCapturedValue>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	4a33      	ldr	r2, [pc, #204]	; (8000d28 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000c5c:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2200      	movs	r2, #0
 8000c64:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8000c66:	4b30      	ldr	r3, [pc, #192]	; (8000d28 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	4b2e      	ldr	r3, [pc, #184]	; (8000d24 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d907      	bls.n	8000c82 <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8000c72:	4b2d      	ldr	r3, [pc, #180]	; (8000d28 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	4b2b      	ldr	r3, [pc, #172]	; (8000d24 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	1ad3      	subs	r3, r2, r3
 8000c7c:	4a2b      	ldr	r2, [pc, #172]	; (8000d2c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000c7e:	6013      	str	r3, [r2, #0]
 8000c80:	e00f      	b.n	8000ca2 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 8000c82:	4b28      	ldr	r3, [pc, #160]	; (8000d24 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	4b28      	ldr	r3, [pc, #160]	; (8000d28 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	d909      	bls.n	8000ca2 <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000c8e:	4b26      	ldr	r3, [pc, #152]	; (8000d28 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	4b24      	ldr	r3, [pc, #144]	; (8000d24 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	1ad3      	subs	r3, r2, r3
 8000c98:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000c9c:	33ff      	adds	r3, #255	; 0xff
 8000c9e:	4a23      	ldr	r2, [pc, #140]	; (8000d2c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000ca0:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 8000ca2:	4b22      	ldr	r3, [pc, #136]	; (8000d2c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff fc34 	bl	8000514 <__aeabi_ui2d>
 8000cac:	a31a      	add	r3, pc, #104	; (adr r3, 8000d18 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cb2:	f7ff fca9 	bl	8000608 <__aeabi_dmul>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	460b      	mov	r3, r1
 8000cba:	4610      	mov	r0, r2
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	f04f 0200 	mov.w	r2, #0
 8000cc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cc6:	f7ff fdc9 	bl	800085c <__aeabi_ddiv>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	460b      	mov	r3, r1
 8000cce:	4610      	mov	r0, r2
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	f7ff ff71 	bl	8000bb8 <__aeabi_d2uiz>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000cdc:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8000cde:	4b10      	ldr	r3, [pc, #64]	; (8000d20 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	6a1a      	ldr	r2, [r3, #32]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8000cf2:	621a      	str	r2, [r3, #32]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	6a12      	ldr	r2, [r2, #32]
 8000cfe:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC2);
 8000d00:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	68da      	ldr	r2, [r3, #12]
 8000d06:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f022 0204 	bic.w	r2, r2, #4
 8000d0e:	60da      	str	r2, [r3, #12]
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	b020c49c 	.word	0xb020c49c
 8000d1c:	3fa16872 	.word	0x3fa16872
 8000d20:	200001fc 	.word	0x200001fc
 8000d24:	200001f0 	.word	0x200001f0
 8000d28:	200001f4 	.word	0x200001f4
 8000d2c:	200001f8 	.word	0x200001f8
 8000d30:	200001fd 	.word	0x200001fd
 8000d34:	20000354 	.word	0x20000354

08000d38 <updateEncoderRight>:
*/
int encoderR(){return encoderValueR;}

int encoderL(){return encoderValueL;}

void updateEncoderRight(){
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
  int MSBR = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1); //MSB = most significant bit
 8000d3e:	2102      	movs	r1, #2
 8000d40:	481f      	ldr	r0, [pc, #124]	; (8000dc0 <updateEncoderRight+0x88>)
 8000d42:	f002 fc37 	bl	80035b4 <HAL_GPIO_ReadPin>
 8000d46:	4603      	mov	r3, r0
 8000d48:	60fb      	str	r3, [r7, #12]
  int LSBR = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15); //LSB = least significant bit
 8000d4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d4e:	481c      	ldr	r0, [pc, #112]	; (8000dc0 <updateEncoderRight+0x88>)
 8000d50:	f002 fc30 	bl	80035b4 <HAL_GPIO_ReadPin>
 8000d54:	4603      	mov	r3, r0
 8000d56:	60bb      	str	r3, [r7, #8]

  int encodedR = (MSBR << 1) |LSBR; //converting the 2 pin value to single number
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	68ba      	ldr	r2, [r7, #8]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	607b      	str	r3, [r7, #4]
  int sumR  = (lastEncodedR << 2) | encodedR; //adding it to the previous encoded value
 8000d62:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <updateEncoderRight+0x8c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	603b      	str	r3, [r7, #0]

  if(sumR == 0b1101 || sumR == 0b0100 || sumR == 0b0010 || sumR == 0b1011) encoderValueR --;
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	2b0d      	cmp	r3, #13
 8000d72:	d008      	beq.n	8000d86 <updateEncoderRight+0x4e>
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	2b04      	cmp	r3, #4
 8000d78:	d005      	beq.n	8000d86 <updateEncoderRight+0x4e>
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	d002      	beq.n	8000d86 <updateEncoderRight+0x4e>
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	2b0b      	cmp	r3, #11
 8000d84:	d104      	bne.n	8000d90 <updateEncoderRight+0x58>
 8000d86:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <updateEncoderRight+0x90>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	4a0e      	ldr	r2, [pc, #56]	; (8000dc8 <updateEncoderRight+0x90>)
 8000d8e:	6013      	str	r3, [r2, #0]
  if(sumR == 0b1110 || sumR == 0b0111 || sumR == 0b0001 || sumR == 0b1000) encoderValueR ++;
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	2b0e      	cmp	r3, #14
 8000d94:	d008      	beq.n	8000da8 <updateEncoderRight+0x70>
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	2b07      	cmp	r3, #7
 8000d9a:	d005      	beq.n	8000da8 <updateEncoderRight+0x70>
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d002      	beq.n	8000da8 <updateEncoderRight+0x70>
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	2b08      	cmp	r3, #8
 8000da6:	d104      	bne.n	8000db2 <updateEncoderRight+0x7a>
 8000da8:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <updateEncoderRight+0x90>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	3301      	adds	r3, #1
 8000dae:	4a06      	ldr	r2, [pc, #24]	; (8000dc8 <updateEncoderRight+0x90>)
 8000db0:	6013      	str	r3, [r2, #0]

  lastEncodedR = encodedR; //store this value for next time
 8000db2:	4a04      	ldr	r2, [pc, #16]	; (8000dc4 <updateEncoderRight+0x8c>)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6013      	str	r3, [r2, #0]

}
 8000db8:	bf00      	nop
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	48000400 	.word	0x48000400
 8000dc4:	20000200 	.word	0x20000200
 8000dc8:	20000208 	.word	0x20000208

08000dcc <updateEncoderLeft>:

void updateEncoderLeft(){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
  int MSBL = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14); //MSB = most significant bit
 8000dd2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dd6:	4820      	ldr	r0, [pc, #128]	; (8000e58 <updateEncoderLeft+0x8c>)
 8000dd8:	f002 fbec 	bl	80035b4 <HAL_GPIO_ReadPin>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	60fb      	str	r3, [r7, #12]
  int LSBL = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13); //LSB = least significant bit
 8000de0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000de4:	481c      	ldr	r0, [pc, #112]	; (8000e58 <updateEncoderLeft+0x8c>)
 8000de6:	f002 fbe5 	bl	80035b4 <HAL_GPIO_ReadPin>
 8000dea:	4603      	mov	r3, r0
 8000dec:	60bb      	str	r3, [r7, #8]

  int encodedL = (MSBL << 1) |LSBL; //converting the 2 pin value to single number
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	68ba      	ldr	r2, [r7, #8]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	607b      	str	r3, [r7, #4]
  int sumL  = (lastEncodedL << 2) | encodedL; //adding it to the previous encoded value
 8000df8:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <updateEncoderLeft+0x90>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	603b      	str	r3, [r7, #0]

  if(sumL == 0b1101 || sumL == 0b0100 || sumL == 0b0010 || sumL == 0b1011) encoderValueL --;
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	2b0d      	cmp	r3, #13
 8000e08:	d008      	beq.n	8000e1c <updateEncoderLeft+0x50>
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	2b04      	cmp	r3, #4
 8000e0e:	d005      	beq.n	8000e1c <updateEncoderLeft+0x50>
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d002      	beq.n	8000e1c <updateEncoderLeft+0x50>
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	2b0b      	cmp	r3, #11
 8000e1a:	d104      	bne.n	8000e26 <updateEncoderLeft+0x5a>
 8000e1c:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <updateEncoderLeft+0x94>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	3b01      	subs	r3, #1
 8000e22:	4a0f      	ldr	r2, [pc, #60]	; (8000e60 <updateEncoderLeft+0x94>)
 8000e24:	6013      	str	r3, [r2, #0]
  if(sumL == 0b1110 || sumL == 0b0111 || sumL == 0b0001 || sumL == 0b1000) encoderValueL ++;
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	2b0e      	cmp	r3, #14
 8000e2a:	d008      	beq.n	8000e3e <updateEncoderLeft+0x72>
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	2b07      	cmp	r3, #7
 8000e30:	d005      	beq.n	8000e3e <updateEncoderLeft+0x72>
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d002      	beq.n	8000e3e <updateEncoderLeft+0x72>
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	2b08      	cmp	r3, #8
 8000e3c:	d104      	bne.n	8000e48 <updateEncoderLeft+0x7c>
 8000e3e:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <updateEncoderLeft+0x94>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	3301      	adds	r3, #1
 8000e44:	4a06      	ldr	r2, [pc, #24]	; (8000e60 <updateEncoderLeft+0x94>)
 8000e46:	6013      	str	r3, [r2, #0]

  lastEncodedL = encodedL; //store this value for next time
 8000e48:	4a04      	ldr	r2, [pc, #16]	; (8000e5c <updateEncoderLeft+0x90>)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6013      	str	r3, [r2, #0]
}
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	48000400 	.word	0x48000400
 8000e5c:	20000204 	.word	0x20000204
 8000e60:	2000020c 	.word	0x2000020c

08000e64 <__io_putchar>:
static void MX_TIM3_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

PUTCHAR_PROTOTYPE
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000e6c:	1d39      	adds	r1, r7, #4
 8000e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e72:	2201      	movs	r2, #1
 8000e74:	4803      	ldr	r0, [pc, #12]	; (8000e84 <__io_putchar+0x20>)
 8000e76:	f006 fd33 	bl	80078e0 <HAL_UART_Transmit>
  return ch;
 8000e7a:	687b      	ldr	r3, [r7, #4]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	200003ec 	.word	0x200003ec

08000e88 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
	updateEncoderRight();
 8000e92:	f7ff ff51 	bl	8000d38 <updateEncoderRight>
	updateEncoderLeft();
 8000e96:	f7ff ff99 	bl	8000dcc <updateEncoderLeft>

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eaa:	f001 f889 	bl	8001fc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eae:	f000 f851 	bl	8000f54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb2:	f000 fb61 	bl	8001578 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000eb6:	f000 fb2f 	bl	8001518 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000eba:	f000 f919 	bl	80010f0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000ebe:	f000 f957 	bl	8001170 <MX_I2C2_Init>
  MX_ADC2_Init();
 8000ec2:	f000 f8b7 	bl	8001034 <MX_ADC2_Init>
  MX_TIM1_Init();
 8000ec6:	f000 f993 	bl	80011f0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000eca:	f000 faad 	bl	8001428 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000ece:	f000 fa3b 	bl	8001348 <MX_TIM2_Init>


  //while (MPU6050_Init(&hi2c1) == 1);


  while (Init_MPU6050());
 8000ed2:	bf00      	nop
 8000ed4:	f000 fc44 	bl	8001760 <Init_MPU6050>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d1fa      	bne.n	8000ed4 <main+0x30>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,1);//Green LED switched on
 8000ede:	2201      	movs	r2, #1
 8000ee0:	2120      	movs	r1, #32
 8000ee2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee6:	f002 fb7d 	bl	80035e4 <HAL_GPIO_WritePin>

  Get_Gyro_Cal_Values();
 8000eea:	f000 fc93 	bl	8001814 <Get_Gyro_Cal_Values>



  HAL_TIM_Base_Start(&htim1);
 8000eee:	4814      	ldr	r0, [pc, #80]	; (8000f40 <main+0x9c>)
 8000ef0:	f004 feb6 	bl	8005c60 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim1);
 8000ef4:	4812      	ldr	r0, [pc, #72]	; (8000f40 <main+0x9c>)
 8000ef6:	f004 feb3 	bl	8005c60 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000efa:	2100      	movs	r1, #0
 8000efc:	4810      	ldr	r0, [pc, #64]	; (8000f40 <main+0x9c>)
 8000efe:	f004 ff79 	bl	8005df4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000f02:	2108      	movs	r1, #8
 8000f04:	480f      	ldr	r0, [pc, #60]	; (8000f44 <main+0xa0>)
 8000f06:	f004 ff75 	bl	8005df4 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	480e      	ldr	r0, [pc, #56]	; (8000f48 <main+0xa4>)
 8000f0e:	f005 f8df 	bl	80060d0 <HAL_TIM_IC_Start>
	   */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_ADC_Start(&hadc2);
 8000f12:	480e      	ldr	r0, [pc, #56]	; (8000f4c <main+0xa8>)
 8000f14:	f001 fad8 	bl	80024c8 <HAL_ADC_Start>


	                          HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8000f18:	f04f 31ff 	mov.w	r1, #4294967295
 8000f1c:	480b      	ldr	r0, [pc, #44]	; (8000f4c <main+0xa8>)
 8000f1e:	f001 fbe9 	bl	80026f4 <HAL_ADC_PollForConversion>
	  	  	 	 	  	  	  IR1_RAW = HAL_ADC_GetValue(&hadc2);
 8000f22:	480a      	ldr	r0, [pc, #40]	; (8000f4c <main+0xa8>)
 8000f24:	f001 fce8 	bl	80028f8 <HAL_ADC_GetValue>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	80fb      	strh	r3, [r7, #6]
	  	  	 	 	  	printf("IR1=%d\r\n",IR1_RAW);
 8000f2c:	88fb      	ldrh	r3, [r7, #6]
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4807      	ldr	r0, [pc, #28]	; (8000f50 <main+0xac>)
 8000f32:	f007 fe71 	bl	8008c18 <iprintf>
	  	  	 	 	  //	printf("%d\r\n",encoderR());
	  	  	 	 	  //  printf("%d\r\n",encoderL());
	  	  	 	 	  	follow_left_wall(IR1_RAW);
 8000f36:	88fb      	ldrh	r3, [r7, #6]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f000 fbeb 	bl	8001714 <follow_left_wall>
	  HAL_ADC_Start(&hadc2);
 8000f3e:	e7e8      	b.n	8000f12 <main+0x6e>
 8000f40:	20000308 	.word	0x20000308
 8000f44:	200003a0 	.word	0x200003a0
 8000f48:	20000354 	.word	0x20000354
 8000f4c:	20000210 	.word	0x20000210
 8000f50:	0800ab98 	.word	0x0800ab98

08000f54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b0a6      	sub	sp, #152	; 0x98
 8000f58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000f5e:	2228      	movs	r2, #40	; 0x28
 8000f60:	2100      	movs	r1, #0
 8000f62:	4618      	mov	r0, r3
 8000f64:	f007 fead 	bl	8008cc2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f68:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	2258      	movs	r2, #88	; 0x58
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f007 fe9f 	bl	8008cc2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000f84:	2303      	movs	r3, #3
 8000f86:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f88:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f8c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f92:	2310      	movs	r3, #16
 8000f94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fa2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fa6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000faa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f003 f951 	bl	8004260 <HAL_RCC_OscConfig>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000fc4:	f000 fb80 	bl	80016c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc8:	230f      	movs	r3, #15
 8000fca:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fd8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fde:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000fe2:	2102      	movs	r1, #2
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f004 f98f 	bl	8005308 <HAL_RCC_ClockConfig>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000ff0:	f000 fb6a 	bl	80016c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <SystemClock_Config+0xdc>)
 8000ff6:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_TIM1
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_TIM2
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000ffc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001000:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001002:	2300      	movs	r3, #0
 8001004:	623b      	str	r3, [r7, #32]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8001006:	2300      	movs	r3, #0
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800100a:	2300      	movs	r3, #0
 800100c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 800100e:	2300      	movs	r3, #0
 8001010:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8001012:	2300      	movs	r3, #0
 8001014:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	4618      	mov	r0, r3
 800101a:	f004 fbab 	bl	8005774 <HAL_RCCEx_PeriphCLKConfig>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001024:	f000 fb50 	bl	80016c8 <Error_Handler>
  }
}
 8001028:	bf00      	nop
 800102a:	3798      	adds	r7, #152	; 0x98
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	003010e2 	.word	0x003010e2

08001034 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800103a:	463b      	mov	r3, r7
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
 8001048:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800104a:	4b27      	ldr	r3, [pc, #156]	; (80010e8 <MX_ADC2_Init+0xb4>)
 800104c:	4a27      	ldr	r2, [pc, #156]	; (80010ec <MX_ADC2_Init+0xb8>)
 800104e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001050:	4b25      	ldr	r3, [pc, #148]	; (80010e8 <MX_ADC2_Init+0xb4>)
 8001052:	2200      	movs	r2, #0
 8001054:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001056:	4b24      	ldr	r3, [pc, #144]	; (80010e8 <MX_ADC2_Init+0xb4>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800105c:	4b22      	ldr	r3, [pc, #136]	; (80010e8 <MX_ADC2_Init+0xb4>)
 800105e:	2200      	movs	r2, #0
 8001060:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001062:	4b21      	ldr	r3, [pc, #132]	; (80010e8 <MX_ADC2_Init+0xb4>)
 8001064:	2200      	movs	r2, #0
 8001066:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001068:	4b1f      	ldr	r3, [pc, #124]	; (80010e8 <MX_ADC2_Init+0xb4>)
 800106a:	2200      	movs	r2, #0
 800106c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001070:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <MX_ADC2_Init+0xb4>)
 8001072:	2200      	movs	r2, #0
 8001074:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001076:	4b1c      	ldr	r3, [pc, #112]	; (80010e8 <MX_ADC2_Init+0xb4>)
 8001078:	2201      	movs	r2, #1
 800107a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800107c:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <MX_ADC2_Init+0xb4>)
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001082:	4b19      	ldr	r3, [pc, #100]	; (80010e8 <MX_ADC2_Init+0xb4>)
 8001084:	2201      	movs	r2, #1
 8001086:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001088:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <MX_ADC2_Init+0xb4>)
 800108a:	2200      	movs	r2, #0
 800108c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001090:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <MX_ADC2_Init+0xb4>)
 8001092:	2204      	movs	r2, #4
 8001094:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001096:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <MX_ADC2_Init+0xb4>)
 8001098:	2200      	movs	r2, #0
 800109a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <MX_ADC2_Init+0xb4>)
 800109e:	2200      	movs	r2, #0
 80010a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80010a2:	4811      	ldr	r0, [pc, #68]	; (80010e8 <MX_ADC2_Init+0xb4>)
 80010a4:	f001 f816 	bl	80020d4 <HAL_ADC_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 80010ae:	f000 fb0b 	bl	80016c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80010b2:	230b      	movs	r3, #11
 80010b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010b6:	2301      	movs	r3, #1
 80010b8:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80010be:	2300      	movs	r3, #0
 80010c0:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010ca:	463b      	mov	r3, r7
 80010cc:	4619      	mov	r1, r3
 80010ce:	4806      	ldr	r0, [pc, #24]	; (80010e8 <MX_ADC2_Init+0xb4>)
 80010d0:	f001 fc20 	bl	8002914 <HAL_ADC_ConfigChannel>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 80010da:	f000 faf5 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80010de:	bf00      	nop
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000210 	.word	0x20000210
 80010ec:	50000100 	.word	0x50000100

080010f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010f4:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <MX_I2C1_Init+0x74>)
 80010f6:	4a1c      	ldr	r2, [pc, #112]	; (8001168 <MX_I2C1_Init+0x78>)
 80010f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80010fa:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <MX_I2C1_Init+0x74>)
 80010fc:	4a1b      	ldr	r2, [pc, #108]	; (800116c <MX_I2C1_Init+0x7c>)
 80010fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001100:	4b18      	ldr	r3, [pc, #96]	; (8001164 <MX_I2C1_Init+0x74>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001106:	4b17      	ldr	r3, [pc, #92]	; (8001164 <MX_I2C1_Init+0x74>)
 8001108:	2201      	movs	r2, #1
 800110a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800110c:	4b15      	ldr	r3, [pc, #84]	; (8001164 <MX_I2C1_Init+0x74>)
 800110e:	2200      	movs	r2, #0
 8001110:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001112:	4b14      	ldr	r3, [pc, #80]	; (8001164 <MX_I2C1_Init+0x74>)
 8001114:	2200      	movs	r2, #0
 8001116:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <MX_I2C1_Init+0x74>)
 800111a:	2200      	movs	r2, #0
 800111c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800111e:	4b11      	ldr	r3, [pc, #68]	; (8001164 <MX_I2C1_Init+0x74>)
 8001120:	2200      	movs	r2, #0
 8001122:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001124:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <MX_I2C1_Init+0x74>)
 8001126:	2200      	movs	r2, #0
 8001128:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800112a:	480e      	ldr	r0, [pc, #56]	; (8001164 <MX_I2C1_Init+0x74>)
 800112c:	f002 fa8a 	bl	8003644 <HAL_I2C_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001136:	f000 fac7 	bl	80016c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800113a:	2100      	movs	r1, #0
 800113c:	4809      	ldr	r0, [pc, #36]	; (8001164 <MX_I2C1_Init+0x74>)
 800113e:	f002 fff7 	bl	8004130 <HAL_I2CEx_ConfigAnalogFilter>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001148:	f000 fabe 	bl	80016c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800114c:	2100      	movs	r1, #0
 800114e:	4805      	ldr	r0, [pc, #20]	; (8001164 <MX_I2C1_Init+0x74>)
 8001150:	f003 f839 	bl	80041c6 <HAL_I2CEx_ConfigDigitalFilter>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800115a:	f000 fab5 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000260 	.word	0x20000260
 8001168:	40005400 	.word	0x40005400
 800116c:	2000090e 	.word	0x2000090e

08001170 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001174:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <MX_I2C2_Init+0x74>)
 8001176:	4a1c      	ldr	r2, [pc, #112]	; (80011e8 <MX_I2C2_Init+0x78>)
 8001178:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 800117a:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <MX_I2C2_Init+0x74>)
 800117c:	4a1b      	ldr	r2, [pc, #108]	; (80011ec <MX_I2C2_Init+0x7c>)
 800117e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001180:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <MX_I2C2_Init+0x74>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001186:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <MX_I2C2_Init+0x74>)
 8001188:	2201      	movs	r2, #1
 800118a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800118c:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <MX_I2C2_Init+0x74>)
 800118e:	2200      	movs	r2, #0
 8001190:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001192:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <MX_I2C2_Init+0x74>)
 8001194:	2200      	movs	r2, #0
 8001196:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001198:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <MX_I2C2_Init+0x74>)
 800119a:	2200      	movs	r2, #0
 800119c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800119e:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <MX_I2C2_Init+0x74>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011a4:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <MX_I2C2_Init+0x74>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011aa:	480e      	ldr	r0, [pc, #56]	; (80011e4 <MX_I2C2_Init+0x74>)
 80011ac:	f002 fa4a 	bl	8003644 <HAL_I2C_Init>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80011b6:	f000 fa87 	bl	80016c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011ba:	2100      	movs	r1, #0
 80011bc:	4809      	ldr	r0, [pc, #36]	; (80011e4 <MX_I2C2_Init+0x74>)
 80011be:	f002 ffb7 	bl	8004130 <HAL_I2CEx_ConfigAnalogFilter>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80011c8:	f000 fa7e 	bl	80016c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80011cc:	2100      	movs	r1, #0
 80011ce:	4805      	ldr	r0, [pc, #20]	; (80011e4 <MX_I2C2_Init+0x74>)
 80011d0:	f002 fff9 	bl	80041c6 <HAL_I2CEx_ConfigDigitalFilter>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80011da:	f000 fa75 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200002b4 	.word	0x200002b4
 80011e8:	40005800 	.word	0x40005800
 80011ec:	2000090e 	.word	0x2000090e

080011f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b09a      	sub	sp, #104	; 0x68
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001204:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001210:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
 8001220:	615a      	str	r2, [r3, #20]
 8001222:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	222c      	movs	r2, #44	; 0x2c
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f007 fd49 	bl	8008cc2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001230:	4b43      	ldr	r3, [pc, #268]	; (8001340 <MX_TIM1_Init+0x150>)
 8001232:	4a44      	ldr	r2, [pc, #272]	; (8001344 <MX_TIM1_Init+0x154>)
 8001234:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2;
 8001236:	4b42      	ldr	r3, [pc, #264]	; (8001340 <MX_TIM1_Init+0x150>)
 8001238:	2202      	movs	r2, #2
 800123a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123c:	4b40      	ldr	r3, [pc, #256]	; (8001340 <MX_TIM1_Init+0x150>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4096;
 8001242:	4b3f      	ldr	r3, [pc, #252]	; (8001340 <MX_TIM1_Init+0x150>)
 8001244:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001248:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800124a:	4b3d      	ldr	r3, [pc, #244]	; (8001340 <MX_TIM1_Init+0x150>)
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001250:	4b3b      	ldr	r3, [pc, #236]	; (8001340 <MX_TIM1_Init+0x150>)
 8001252:	2200      	movs	r2, #0
 8001254:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001256:	4b3a      	ldr	r3, [pc, #232]	; (8001340 <MX_TIM1_Init+0x150>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800125c:	4838      	ldr	r0, [pc, #224]	; (8001340 <MX_TIM1_Init+0x150>)
 800125e:	f004 fca7 	bl	8005bb0 <HAL_TIM_Base_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001268:	f000 fa2e 	bl	80016c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800126c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001270:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001272:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001276:	4619      	mov	r1, r3
 8001278:	4831      	ldr	r0, [pc, #196]	; (8001340 <MX_TIM1_Init+0x150>)
 800127a:	f005 faf5 	bl	8006868 <HAL_TIM_ConfigClockSource>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001284:	f000 fa20 	bl	80016c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001288:	482d      	ldr	r0, [pc, #180]	; (8001340 <MX_TIM1_Init+0x150>)
 800128a:	f004 fd51 	bl	8005d30 <HAL_TIM_PWM_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001294:	f000 fa18 	bl	80016c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001298:	2300      	movs	r3, #0
 800129a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800129c:	2300      	movs	r3, #0
 800129e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012a8:	4619      	mov	r1, r3
 80012aa:	4825      	ldr	r0, [pc, #148]	; (8001340 <MX_TIM1_Init+0x150>)
 80012ac:	f006 f99a 	bl	80075e4 <HAL_TIMEx_MasterConfigSynchronization>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80012b6:	f000 fa07 	bl	80016c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012ba:	2360      	movs	r3, #96	; 0x60
 80012bc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012c2:	2300      	movs	r3, #0
 80012c4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012c6:	2300      	movs	r3, #0
 80012c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ca:	2300      	movs	r3, #0
 80012cc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012ce:	2300      	movs	r3, #0
 80012d0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012d2:	2300      	movs	r3, #0
 80012d4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012da:	2200      	movs	r2, #0
 80012dc:	4619      	mov	r1, r3
 80012de:	4818      	ldr	r0, [pc, #96]	; (8001340 <MX_TIM1_Init+0x150>)
 80012e0:	f005 f9ae 	bl	8006640 <HAL_TIM_PWM_ConfigChannel>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80012ea:	f000 f9ed 	bl	80016c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012f2:	2300      	movs	r3, #0
 80012f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001302:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001306:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800130c:	2300      	movs	r3, #0
 800130e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001310:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800131a:	2300      	movs	r3, #0
 800131c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	4619      	mov	r1, r3
 8001322:	4807      	ldr	r0, [pc, #28]	; (8001340 <MX_TIM1_Init+0x150>)
 8001324:	f006 f9ea 	bl	80076fc <HAL_TIMEx_ConfigBreakDeadTime>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800132e:	f000 f9cb 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001332:	4803      	ldr	r0, [pc, #12]	; (8001340 <MX_TIM1_Init+0x150>)
 8001334:	f000 fc62 	bl	8001bfc <HAL_TIM_MspPostInit>

}
 8001338:	bf00      	nop
 800133a:	3768      	adds	r7, #104	; 0x68
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000308 	.word	0x20000308
 8001344:	40012c00 	.word	0x40012c00

08001348 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08c      	sub	sp, #48	; 0x30
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800134e:	f107 0320 	add.w	r3, r7, #32
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001374:	4b2b      	ldr	r3, [pc, #172]	; (8001424 <MX_TIM2_Init+0xdc>)
 8001376:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800137a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800137c:	4b29      	ldr	r3, [pc, #164]	; (8001424 <MX_TIM2_Init+0xdc>)
 800137e:	2247      	movs	r2, #71	; 0x47
 8001380:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001382:	4b28      	ldr	r3, [pc, #160]	; (8001424 <MX_TIM2_Init+0xdc>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001388:	4b26      	ldr	r3, [pc, #152]	; (8001424 <MX_TIM2_Init+0xdc>)
 800138a:	f04f 32ff 	mov.w	r2, #4294967295
 800138e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001390:	4b24      	ldr	r3, [pc, #144]	; (8001424 <MX_TIM2_Init+0xdc>)
 8001392:	2200      	movs	r2, #0
 8001394:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001396:	4b23      	ldr	r3, [pc, #140]	; (8001424 <MX_TIM2_Init+0xdc>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800139c:	4821      	ldr	r0, [pc, #132]	; (8001424 <MX_TIM2_Init+0xdc>)
 800139e:	f004 fc07 	bl	8005bb0 <HAL_TIM_Base_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 80013a8:	f000 f98e 	bl	80016c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013b2:	f107 0320 	add.w	r3, r7, #32
 80013b6:	4619      	mov	r1, r3
 80013b8:	481a      	ldr	r0, [pc, #104]	; (8001424 <MX_TIM2_Init+0xdc>)
 80013ba:	f005 fa55 	bl	8006868 <HAL_TIM_ConfigClockSource>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80013c4:	f000 f980 	bl	80016c8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80013c8:	4816      	ldr	r0, [pc, #88]	; (8001424 <MX_TIM2_Init+0xdc>)
 80013ca:	f004 fe1f 	bl	800600c <HAL_TIM_IC_Init>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80013d4:	f000 f978 	bl	80016c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013dc:	2300      	movs	r3, #0
 80013de:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	4619      	mov	r1, r3
 80013e6:	480f      	ldr	r0, [pc, #60]	; (8001424 <MX_TIM2_Init+0xdc>)
 80013e8:	f006 f8fc 	bl	80075e4 <HAL_TIMEx_MasterConfigSynchronization>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 80013f2:	f000 f969 	bl	80016c8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013f6:	2300      	movs	r3, #0
 80013f8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013fa:	2301      	movs	r3, #1
 80013fc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	2204      	movs	r2, #4
 800140a:	4619      	mov	r1, r3
 800140c:	4805      	ldr	r0, [pc, #20]	; (8001424 <MX_TIM2_Init+0xdc>)
 800140e:	f005 f87a 	bl	8006506 <HAL_TIM_IC_ConfigChannel>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8001418:	f000 f956 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800141c:	bf00      	nop
 800141e:	3730      	adds	r7, #48	; 0x30
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000354 	.word	0x20000354

08001428 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08e      	sub	sp, #56	; 0x38
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800142e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800143c:	f107 031c 	add.w	r3, r7, #28
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001448:	463b      	mov	r3, r7
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
 8001454:	611a      	str	r2, [r3, #16]
 8001456:	615a      	str	r2, [r3, #20]
 8001458:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800145a:	4b2d      	ldr	r3, [pc, #180]	; (8001510 <MX_TIM3_Init+0xe8>)
 800145c:	4a2d      	ldr	r2, [pc, #180]	; (8001514 <MX_TIM3_Init+0xec>)
 800145e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2;
 8001460:	4b2b      	ldr	r3, [pc, #172]	; (8001510 <MX_TIM3_Init+0xe8>)
 8001462:	2202      	movs	r2, #2
 8001464:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001466:	4b2a      	ldr	r3, [pc, #168]	; (8001510 <MX_TIM3_Init+0xe8>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4096;
 800146c:	4b28      	ldr	r3, [pc, #160]	; (8001510 <MX_TIM3_Init+0xe8>)
 800146e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001472:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001474:	4b26      	ldr	r3, [pc, #152]	; (8001510 <MX_TIM3_Init+0xe8>)
 8001476:	2200      	movs	r2, #0
 8001478:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800147a:	4b25      	ldr	r3, [pc, #148]	; (8001510 <MX_TIM3_Init+0xe8>)
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001480:	4823      	ldr	r0, [pc, #140]	; (8001510 <MX_TIM3_Init+0xe8>)
 8001482:	f004 fb95 	bl	8005bb0 <HAL_TIM_Base_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800148c:	f000 f91c 	bl	80016c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001490:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001494:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001496:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800149a:	4619      	mov	r1, r3
 800149c:	481c      	ldr	r0, [pc, #112]	; (8001510 <MX_TIM3_Init+0xe8>)
 800149e:	f005 f9e3 	bl	8006868 <HAL_TIM_ConfigClockSource>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80014a8:	f000 f90e 	bl	80016c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80014ac:	4818      	ldr	r0, [pc, #96]	; (8001510 <MX_TIM3_Init+0xe8>)
 80014ae:	f004 fc3f 	bl	8005d30 <HAL_TIM_PWM_Init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80014b8:	f000 f906 	bl	80016c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014bc:	2300      	movs	r3, #0
 80014be:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014c4:	f107 031c 	add.w	r3, r7, #28
 80014c8:	4619      	mov	r1, r3
 80014ca:	4811      	ldr	r0, [pc, #68]	; (8001510 <MX_TIM3_Init+0xe8>)
 80014cc:	f006 f88a 	bl	80075e4 <HAL_TIMEx_MasterConfigSynchronization>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80014d6:	f000 f8f7 	bl	80016c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014da:	2360      	movs	r3, #96	; 0x60
 80014dc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014ea:	463b      	mov	r3, r7
 80014ec:	2208      	movs	r2, #8
 80014ee:	4619      	mov	r1, r3
 80014f0:	4807      	ldr	r0, [pc, #28]	; (8001510 <MX_TIM3_Init+0xe8>)
 80014f2:	f005 f8a5 	bl	8006640 <HAL_TIM_PWM_ConfigChannel>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80014fc:	f000 f8e4 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001500:	4803      	ldr	r0, [pc, #12]	; (8001510 <MX_TIM3_Init+0xe8>)
 8001502:	f000 fb7b 	bl	8001bfc <HAL_TIM_MspPostInit>

}
 8001506:	bf00      	nop
 8001508:	3738      	adds	r7, #56	; 0x38
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200003a0 	.word	0x200003a0
 8001514:	40000400 	.word	0x40000400

08001518 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800151c:	4b14      	ldr	r3, [pc, #80]	; (8001570 <MX_USART2_UART_Init+0x58>)
 800151e:	4a15      	ldr	r2, [pc, #84]	; (8001574 <MX_USART2_UART_Init+0x5c>)
 8001520:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001522:	4b13      	ldr	r3, [pc, #76]	; (8001570 <MX_USART2_UART_Init+0x58>)
 8001524:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001528:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800152a:	4b11      	ldr	r3, [pc, #68]	; (8001570 <MX_USART2_UART_Init+0x58>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001530:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <MX_USART2_UART_Init+0x58>)
 8001532:	2200      	movs	r2, #0
 8001534:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <MX_USART2_UART_Init+0x58>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <MX_USART2_UART_Init+0x58>)
 800153e:	220c      	movs	r2, #12
 8001540:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <MX_USART2_UART_Init+0x58>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001548:	4b09      	ldr	r3, [pc, #36]	; (8001570 <MX_USART2_UART_Init+0x58>)
 800154a:	2200      	movs	r2, #0
 800154c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <MX_USART2_UART_Init+0x58>)
 8001550:	2200      	movs	r2, #0
 8001552:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <MX_USART2_UART_Init+0x58>)
 8001556:	2200      	movs	r2, #0
 8001558:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800155a:	4805      	ldr	r0, [pc, #20]	; (8001570 <MX_USART2_UART_Init+0x58>)
 800155c:	f006 f972 	bl	8007844 <HAL_UART_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001566:	f000 f8af 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	200003ec 	.word	0x200003ec
 8001574:	40004400 	.word	0x40004400

08001578 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08a      	sub	sp, #40	; 0x28
 800157c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
 800158c:	611a      	str	r2, [r3, #16]


/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800158e:	4b4b      	ldr	r3, [pc, #300]	; (80016bc <MX_GPIO_Init+0x144>)
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	4a4a      	ldr	r2, [pc, #296]	; (80016bc <MX_GPIO_Init+0x144>)
 8001594:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001598:	6153      	str	r3, [r2, #20]
 800159a:	4b48      	ldr	r3, [pc, #288]	; (80016bc <MX_GPIO_Init+0x144>)
 800159c:	695b      	ldr	r3, [r3, #20]
 800159e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015a2:	613b      	str	r3, [r7, #16]
 80015a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015a6:	4b45      	ldr	r3, [pc, #276]	; (80016bc <MX_GPIO_Init+0x144>)
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	4a44      	ldr	r2, [pc, #272]	; (80016bc <MX_GPIO_Init+0x144>)
 80015ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015b0:	6153      	str	r3, [r2, #20]
 80015b2:	4b42      	ldr	r3, [pc, #264]	; (80016bc <MX_GPIO_Init+0x144>)
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015be:	4b3f      	ldr	r3, [pc, #252]	; (80016bc <MX_GPIO_Init+0x144>)
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	4a3e      	ldr	r2, [pc, #248]	; (80016bc <MX_GPIO_Init+0x144>)
 80015c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c8:	6153      	str	r3, [r2, #20]
 80015ca:	4b3c      	ldr	r3, [pc, #240]	; (80016bc <MX_GPIO_Init+0x144>)
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d6:	4b39      	ldr	r3, [pc, #228]	; (80016bc <MX_GPIO_Init+0x144>)
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	4a38      	ldr	r2, [pc, #224]	; (80016bc <MX_GPIO_Init+0x144>)
 80015dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015e0:	6153      	str	r3, [r2, #20]
 80015e2:	4b36      	ldr	r3, [pc, #216]	; (80016bc <MX_GPIO_Init+0x144>)
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_9, GPIO_PIN_RESET);
 80015ee:	2200      	movs	r2, #0
 80015f0:	f240 2102 	movw	r1, #514	; 0x202
 80015f4:	4832      	ldr	r0, [pc, #200]	; (80016c0 <MX_GPIO_Init+0x148>)
 80015f6:	f001 fff5 	bl	80035e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2130      	movs	r1, #48	; 0x30
 80015fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001602:	f001 ffef 	bl	80035e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_9;
 8001606:	f240 2302 	movw	r3, #514	; 0x202
 800160a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160c:	2301      	movs	r3, #1
 800160e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001614:	2300      	movs	r3, #0
 8001616:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	4619      	mov	r1, r3
 800161e:	4828      	ldr	r0, [pc, #160]	; (80016c0 <MX_GPIO_Init+0x148>)
 8001620:	f001 fe3e 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8001624:	2330      	movs	r3, #48	; 0x30
 8001626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001628:	2301      	movs	r3, #1
 800162a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	2300      	movs	r3, #0
 8001632:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	4619      	mov	r1, r3
 800163a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800163e:	f001 fe2f 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Enc_Right_Forward_Pin Enc_Left_Backward_Pin Enc_Left_Forward_Pin Enc_Right_Backward_Pin */
  GPIO_InitStruct.Pin = Enc_Right_Forward_Pin|Enc_Left_Backward_Pin|Enc_Left_Forward_Pin|Enc_Right_Backward_Pin;
 8001642:	f24e 0302 	movw	r3, #57346	; 0xe002
 8001646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001648:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800164c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800164e:	2301      	movs	r3, #1
 8001650:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	4619      	mov	r1, r3
 8001658:	481a      	ldr	r0, [pc, #104]	; (80016c4 <MX_GPIO_Init+0x14c>)
 800165a:	f001 fe21 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800165e:	2304      	movs	r3, #4
 8001660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001662:	2300      	movs	r3, #0
 8001664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	4619      	mov	r1, r3
 8001670:	4814      	ldr	r0, [pc, #80]	; (80016c4 <MX_GPIO_Init+0x14c>)
 8001672:	f001 fe15 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001676:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800167a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800167c:	2300      	movs	r3, #0
 800167e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	4619      	mov	r1, r3
 800168a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800168e:	f001 fe07 	bl	80032a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001692:	2200      	movs	r2, #0
 8001694:	2100      	movs	r1, #0
 8001696:	2007      	movs	r0, #7
 8001698:	f001 fdcb 	bl	8003232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800169c:	2007      	movs	r0, #7
 800169e:	f001 fde4 	bl	800326a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2100      	movs	r1, #0
 80016a6:	2028      	movs	r0, #40	; 0x28
 80016a8:	f001 fdc3 	bl	8003232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016ac:	2028      	movs	r0, #40	; 0x28
 80016ae:	f001 fddc 	bl	800326a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016b2:	bf00      	nop
 80016b4:	3728      	adds	r7, #40	; 0x28
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40021000 	.word	0x40021000
 80016c0:	48000800 	.word	0x48000800
 80016c4:	48000400 	.word	0x48000400

080016c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016cc:	b672      	cpsid	i
}
 80016ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016d0:	e7fe      	b.n	80016d0 <Error_Handler+0x8>
	...

080016d4 <forward>:
#include "encoders.h"
#include "stm32f3xx_hal_tim.h"
#include "mpu6050.h"
//#include <stdio.h>

void forward(void){
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);//Right backward
 80016d8:	2200      	movs	r2, #0
 80016da:	2110      	movs	r1, #16
 80016dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e0:	f001 ff80 	bl	80035e4 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);//Left Backward
 80016e4:	2200      	movs	r2, #0
 80016e6:	2102      	movs	r1, #2
 80016e8:	4807      	ldr	r0, [pc, #28]	; (8001708 <forward+0x34>)
 80016ea:	f001 ff7b 	bl	80035e4 <HAL_GPIO_WritePin>

   //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);//Left Forward
   //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);//Right Forward

   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,4095);//Right Forward
 80016ee:	4b07      	ldr	r3, [pc, #28]	; (800170c <forward+0x38>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f640 72ff 	movw	r2, #4095	; 0xfff
 80016f6:	63da      	str	r2, [r3, #60]	; 0x3c
   __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,4095);//Left Forward
 80016f8:	4b05      	ldr	r3, [pc, #20]	; (8001710 <forward+0x3c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001700:	635a      	str	r2, [r3, #52]	; 0x34

}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	48000800 	.word	0x48000800
 800170c:	200003a0 	.word	0x200003a0
 8001710:	20000308 	.word	0x20000308

08001714 <follow_left_wall>:
	   __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);//Left Forward


}

void follow_left_wall(uint16_t IR1_RAW){
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	80fb      	strh	r3, [r7, #6]
	forward();
 800171e:	f7ff ffd9 	bl	80016d4 <forward>
	   if(IR1_RAW<2500){
 8001722:	88fb      	ldrh	r3, [r7, #6]
 8001724:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001728:	4293      	cmp	r3, r2
 800172a:	d805      	bhi.n	8001738 <follow_left_wall+0x24>

		   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3, 2000);//Right Forward //1.2*IR1_RAW
 800172c:	4b0a      	ldr	r3, [pc, #40]	; (8001758 <follow_left_wall+0x44>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001734:	63da      	str	r2, [r3, #60]	; 0x3c

         goto JUMP;
 8001736:	e00b      	b.n	8001750 <follow_left_wall+0x3c>
	   }

    if(IR1_RAW>2600){
 8001738:	88fb      	ldrh	r3, [r7, #6]
 800173a:	f640 2228 	movw	r2, #2600	; 0xa28
 800173e:	4293      	cmp	r3, r2
 8001740:	d905      	bls.n	800174e <follow_left_wall+0x3a>

    	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 3700);//Left Forward//1.2*(4095-IR1_RAW)
 8001742:	4b06      	ldr	r3, [pc, #24]	; (800175c <follow_left_wall+0x48>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f640 6274 	movw	r2, #3700	; 0xe74
 800174a:	635a      	str	r2, [r3, #52]	; 0x34

    	   }
    JUMP:;
}
 800174c:	e000      	b.n	8001750 <follow_left_wall+0x3c>
    JUMP:;
 800174e:	bf00      	nop
}
 8001750:	bf00      	nop
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	200003a0 	.word	0x200003a0
 800175c:	20000308 	.word	0x20000308

08001760 <Init_MPU6050>:
uint32_t Time=0;

float yaw_corrector=1.18421;


uint8_t Init_MPU6050(void) {
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af04      	add	r7, sp, #16
	uint8_t check;
	// Power Conifg

	// check device ID WHO_AM_I
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADRR, WHO_AM_I_REG, 1, &check, 1, 100);
 8001766:	2364      	movs	r3, #100	; 0x64
 8001768:	9302      	str	r3, [sp, #8]
 800176a:	2301      	movs	r3, #1
 800176c:	9301      	str	r3, [sp, #4]
 800176e:	1dfb      	adds	r3, r7, #7
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	2301      	movs	r3, #1
 8001774:	2275      	movs	r2, #117	; 0x75
 8001776:	21d0      	movs	r1, #208	; 0xd0
 8001778:	4824      	ldr	r0, [pc, #144]	; (800180c <Init_MPU6050+0xac>)
 800177a:	f002 f907 	bl	800398c <HAL_I2C_Mem_Read>

	if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	2b68      	cmp	r3, #104	; 0x68
 8001782:	d13d      	bne.n	8001800 <Init_MPU6050+0xa0>
	{
	data[0] = 0x00;
 8001784:	4b22      	ldr	r3, [pc, #136]	; (8001810 <Init_MPU6050+0xb0>)
 8001786:	2200      	movs	r2, #0
 8001788:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADRR, MPU6050_POWER_1, 1, data, 1, 100);
 800178a:	2364      	movs	r3, #100	; 0x64
 800178c:	9302      	str	r3, [sp, #8]
 800178e:	2301      	movs	r3, #1
 8001790:	9301      	str	r3, [sp, #4]
 8001792:	4b1f      	ldr	r3, [pc, #124]	; (8001810 <Init_MPU6050+0xb0>)
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	2301      	movs	r3, #1
 8001798:	226b      	movs	r2, #107	; 0x6b
 800179a:	21d0      	movs	r1, #208	; 0xd0
 800179c:	481b      	ldr	r0, [pc, #108]	; (800180c <Init_MPU6050+0xac>)
 800179e:	f001 ffe1 	bl	8003764 <HAL_I2C_Mem_Write>
	// Internal Low Pass Filter Config
	data[0] = 0x04;
 80017a2:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <Init_MPU6050+0xb0>)
 80017a4:	2204      	movs	r2, #4
 80017a6:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADRR, MPU6050_CONFIG, 1, data, 1, 100);
 80017a8:	2364      	movs	r3, #100	; 0x64
 80017aa:	9302      	str	r3, [sp, #8]
 80017ac:	2301      	movs	r3, #1
 80017ae:	9301      	str	r3, [sp, #4]
 80017b0:	4b17      	ldr	r3, [pc, #92]	; (8001810 <Init_MPU6050+0xb0>)
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	2301      	movs	r3, #1
 80017b6:	221a      	movs	r2, #26
 80017b8:	21d0      	movs	r1, #208	; 0xd0
 80017ba:	4814      	ldr	r0, [pc, #80]	; (800180c <Init_MPU6050+0xac>)
 80017bc:	f001 ffd2 	bl	8003764 <HAL_I2C_Mem_Write>
	//Acceloremter Config +-8g
	data[0] = 0x10;
 80017c0:	4b13      	ldr	r3, [pc, #76]	; (8001810 <Init_MPU6050+0xb0>)
 80017c2:	2210      	movs	r2, #16
 80017c4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADRR, MPU6050_ACCE_CONFIG, 1, data, 1, 100);
 80017c6:	2364      	movs	r3, #100	; 0x64
 80017c8:	9302      	str	r3, [sp, #8]
 80017ca:	2301      	movs	r3, #1
 80017cc:	9301      	str	r3, [sp, #4]
 80017ce:	4b10      	ldr	r3, [pc, #64]	; (8001810 <Init_MPU6050+0xb0>)
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	2301      	movs	r3, #1
 80017d4:	221c      	movs	r2, #28
 80017d6:	21d0      	movs	r1, #208	; 0xd0
 80017d8:	480c      	ldr	r0, [pc, #48]	; (800180c <Init_MPU6050+0xac>)
 80017da:	f001 ffc3 	bl	8003764 <HAL_I2C_Mem_Write>
	// Gyro Config ± 500 °/s
	data[0] = 0x08;
 80017de:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <Init_MPU6050+0xb0>)
 80017e0:	2208      	movs	r2, #8
 80017e2:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADRR, MPU6050_GYRO_CONFIG, 1, data, 1, 100);
 80017e4:	2364      	movs	r3, #100	; 0x64
 80017e6:	9302      	str	r3, [sp, #8]
 80017e8:	2301      	movs	r3, #1
 80017ea:	9301      	str	r3, [sp, #4]
 80017ec:	4b08      	ldr	r3, [pc, #32]	; (8001810 <Init_MPU6050+0xb0>)
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	2301      	movs	r3, #1
 80017f2:	221b      	movs	r2, #27
 80017f4:	21d0      	movs	r1, #208	; 0xd0
 80017f6:	4805      	ldr	r0, [pc, #20]	; (800180c <Init_MPU6050+0xac>)
 80017f8:	f001 ffb4 	bl	8003764 <HAL_I2C_Mem_Write>

	// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
	// data[0] = 0x00;
	// HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADRR, SMPLRT_DIV_REG, 1, data, 1, 100);

	return 0;
 80017fc:	2300      	movs	r3, #0
 80017fe:	e000      	b.n	8001802 <Init_MPU6050+0xa2>

	}
	return 1;
 8001800:	2301      	movs	r3, #1
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000260 	.word	0x20000260
 8001810:	20000474 	.word	0x20000474

08001814 <Get_Gyro_Cal_Values>:

void Get_Gyro_Cal_Values(void) {
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af04      	add	r7, sp, #16
	int i;
	for (i = 0; i < 2000; i++) {
 800181a:	2300      	movs	r3, #0
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	e060      	b.n	80018e2 <Get_Gyro_Cal_Values+0xce>

		HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADRR, MPU6050_GYRO_MESURE, 1,
 8001820:	f04f 33ff 	mov.w	r3, #4294967295
 8001824:	9302      	str	r3, [sp, #8]
 8001826:	2306      	movs	r3, #6
 8001828:	9301      	str	r3, [sp, #4]
 800182a:	4b46      	ldr	r3, [pc, #280]	; (8001944 <Get_Gyro_Cal_Values+0x130>)
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	2301      	movs	r3, #1
 8001830:	2243      	movs	r2, #67	; 0x43
 8001832:	21d0      	movs	r1, #208	; 0xd0
 8001834:	4844      	ldr	r0, [pc, #272]	; (8001948 <Get_Gyro_Cal_Values+0x134>)
 8001836:	f002 f8a9 	bl	800398c <HAL_I2C_Mem_Read>
				Gyro_Cal_Buffer, 6, HAL_MAX_DELAY);

		Gyro_Cal_Raw_X = (Gyro_Cal_Buffer[0] << 8 | Gyro_Cal_Buffer[1]);
 800183a:	4b42      	ldr	r3, [pc, #264]	; (8001944 <Get_Gyro_Cal_Values+0x130>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	021b      	lsls	r3, r3, #8
 8001840:	b21a      	sxth	r2, r3
 8001842:	4b40      	ldr	r3, [pc, #256]	; (8001944 <Get_Gyro_Cal_Values+0x130>)
 8001844:	785b      	ldrb	r3, [r3, #1]
 8001846:	b21b      	sxth	r3, r3
 8001848:	4313      	orrs	r3, r2
 800184a:	b21a      	sxth	r2, r3
 800184c:	4b3f      	ldr	r3, [pc, #252]	; (800194c <Get_Gyro_Cal_Values+0x138>)
 800184e:	801a      	strh	r2, [r3, #0]
		Gyro_Cal_Raw_Y = (Gyro_Cal_Buffer[2] << 8 | Gyro_Cal_Buffer[3]);
 8001850:	4b3c      	ldr	r3, [pc, #240]	; (8001944 <Get_Gyro_Cal_Values+0x130>)
 8001852:	789b      	ldrb	r3, [r3, #2]
 8001854:	021b      	lsls	r3, r3, #8
 8001856:	b21a      	sxth	r2, r3
 8001858:	4b3a      	ldr	r3, [pc, #232]	; (8001944 <Get_Gyro_Cal_Values+0x130>)
 800185a:	78db      	ldrb	r3, [r3, #3]
 800185c:	b21b      	sxth	r3, r3
 800185e:	4313      	orrs	r3, r2
 8001860:	b21a      	sxth	r2, r3
 8001862:	4b3b      	ldr	r3, [pc, #236]	; (8001950 <Get_Gyro_Cal_Values+0x13c>)
 8001864:	801a      	strh	r2, [r3, #0]
		Gyro_Cal_Raw_Z = (Gyro_Cal_Buffer[4] << 8 | Gyro_Cal_Buffer[5]);
 8001866:	4b37      	ldr	r3, [pc, #220]	; (8001944 <Get_Gyro_Cal_Values+0x130>)
 8001868:	791b      	ldrb	r3, [r3, #4]
 800186a:	021b      	lsls	r3, r3, #8
 800186c:	b21a      	sxth	r2, r3
 800186e:	4b35      	ldr	r3, [pc, #212]	; (8001944 <Get_Gyro_Cal_Values+0x130>)
 8001870:	795b      	ldrb	r3, [r3, #5]
 8001872:	b21b      	sxth	r3, r3
 8001874:	4313      	orrs	r3, r2
 8001876:	b21a      	sxth	r2, r3
 8001878:	4b36      	ldr	r3, [pc, #216]	; (8001954 <Get_Gyro_Cal_Values+0x140>)
 800187a:	801a      	strh	r2, [r3, #0]

		Gyro_Cal_X += (float) Gyro_Cal_Raw_X;
 800187c:	4b33      	ldr	r3, [pc, #204]	; (800194c <Get_Gyro_Cal_Values+0x138>)
 800187e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001882:	ee07 3a90 	vmov	s15, r3
 8001886:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800188a:	4b33      	ldr	r3, [pc, #204]	; (8001958 <Get_Gyro_Cal_Values+0x144>)
 800188c:	edd3 7a00 	vldr	s15, [r3]
 8001890:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001894:	4b30      	ldr	r3, [pc, #192]	; (8001958 <Get_Gyro_Cal_Values+0x144>)
 8001896:	edc3 7a00 	vstr	s15, [r3]
		Gyro_Cal_Y += (float) Gyro_Cal_Raw_Y;
 800189a:	4b2d      	ldr	r3, [pc, #180]	; (8001950 <Get_Gyro_Cal_Values+0x13c>)
 800189c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018a0:	ee07 3a90 	vmov	s15, r3
 80018a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018a8:	4b2c      	ldr	r3, [pc, #176]	; (800195c <Get_Gyro_Cal_Values+0x148>)
 80018aa:	edd3 7a00 	vldr	s15, [r3]
 80018ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018b2:	4b2a      	ldr	r3, [pc, #168]	; (800195c <Get_Gyro_Cal_Values+0x148>)
 80018b4:	edc3 7a00 	vstr	s15, [r3]
		Gyro_Cal_Z += (float) Gyro_Cal_Raw_Z;
 80018b8:	4b26      	ldr	r3, [pc, #152]	; (8001954 <Get_Gyro_Cal_Values+0x140>)
 80018ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018be:	ee07 3a90 	vmov	s15, r3
 80018c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018c6:	4b26      	ldr	r3, [pc, #152]	; (8001960 <Get_Gyro_Cal_Values+0x14c>)
 80018c8:	edd3 7a00 	vldr	s15, [r3]
 80018cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018d0:	4b23      	ldr	r3, [pc, #140]	; (8001960 <Get_Gyro_Cal_Values+0x14c>)
 80018d2:	edc3 7a00 	vstr	s15, [r3]

		HAL_Delay(1);
 80018d6:	2001      	movs	r0, #1
 80018d8:	f000 fbd8 	bl	800208c <HAL_Delay>
	for (i = 0; i < 2000; i++) {
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3301      	adds	r3, #1
 80018e0:	607b      	str	r3, [r7, #4]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80018e8:	db9a      	blt.n	8001820 <Get_Gyro_Cal_Values+0xc>

	}

	Gyro_Cal_X /= 2000;
 80018ea:	4b1b      	ldr	r3, [pc, #108]	; (8001958 <Get_Gyro_Cal_Values+0x144>)
 80018ec:	ed93 7a00 	vldr	s14, [r3]
 80018f0:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001964 <Get_Gyro_Cal_Values+0x150>
 80018f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018f8:	4b17      	ldr	r3, [pc, #92]	; (8001958 <Get_Gyro_Cal_Values+0x144>)
 80018fa:	edc3 7a00 	vstr	s15, [r3]
	Gyro_Cal_Y /= 2000;
 80018fe:	4b17      	ldr	r3, [pc, #92]	; (800195c <Get_Gyro_Cal_Values+0x148>)
 8001900:	ed93 7a00 	vldr	s14, [r3]
 8001904:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001964 <Get_Gyro_Cal_Values+0x150>
 8001908:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800190c:	4b13      	ldr	r3, [pc, #76]	; (800195c <Get_Gyro_Cal_Values+0x148>)
 800190e:	edc3 7a00 	vstr	s15, [r3]
	Gyro_Cal_Z /= 2000;
 8001912:	4b13      	ldr	r3, [pc, #76]	; (8001960 <Get_Gyro_Cal_Values+0x14c>)
 8001914:	ed93 7a00 	vldr	s14, [r3]
 8001918:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001964 <Get_Gyro_Cal_Values+0x150>
 800191c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001920:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <Get_Gyro_Cal_Values+0x14c>)
 8001922:	edc3 7a00 	vstr	s15, [r3]
	HAL_Delay(1000);
 8001926:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800192a:	f000 fbaf 	bl	800208c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 800192e:	2201      	movs	r2, #1
 8001930:	2120      	movs	r1, #32
 8001932:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001936:	f001 fe55 	bl	80035e4 <HAL_GPIO_WritePin>

}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000478 	.word	0x20000478
 8001948:	20000260 	.word	0x20000260
 800194c:	2000047e 	.word	0x2000047e
 8001950:	20000480 	.word	0x20000480
 8001954:	20000482 	.word	0x20000482
 8001958:	20000484 	.word	0x20000484
 800195c:	20000488 	.word	0x20000488
 8001960:	2000048c 	.word	0x2000048c
 8001964:	44fa0000 	.word	0x44fa0000

08001968 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196e:	4b0f      	ldr	r3, [pc, #60]	; (80019ac <HAL_MspInit+0x44>)
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	4a0e      	ldr	r2, [pc, #56]	; (80019ac <HAL_MspInit+0x44>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	6193      	str	r3, [r2, #24]
 800197a:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <HAL_MspInit+0x44>)
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	607b      	str	r3, [r7, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001986:	4b09      	ldr	r3, [pc, #36]	; (80019ac <HAL_MspInit+0x44>)
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	4a08      	ldr	r2, [pc, #32]	; (80019ac <HAL_MspInit+0x44>)
 800198c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001990:	61d3      	str	r3, [r2, #28]
 8001992:	4b06      	ldr	r3, [pc, #24]	; (80019ac <HAL_MspInit+0x44>)
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199a:	603b      	str	r3, [r7, #0]
 800199c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800199e:	2007      	movs	r0, #7
 80019a0:	f001 fc3c 	bl	800321c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019a4:	bf00      	nop
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40021000 	.word	0x40021000

080019b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08a      	sub	sp, #40	; 0x28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a15      	ldr	r2, [pc, #84]	; (8001a24 <HAL_ADC_MspInit+0x74>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d123      	bne.n	8001a1a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80019d2:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <HAL_ADC_MspInit+0x78>)
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	4a14      	ldr	r2, [pc, #80]	; (8001a28 <HAL_ADC_MspInit+0x78>)
 80019d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019dc:	6153      	str	r3, [r2, #20]
 80019de:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <HAL_ADC_MspInit+0x78>)
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ea:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <HAL_ADC_MspInit+0x78>)
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	4a0e      	ldr	r2, [pc, #56]	; (8001a28 <HAL_ADC_MspInit+0x78>)
 80019f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80019f4:	6153      	str	r3, [r2, #20]
 80019f6:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <HAL_ADC_MspInit+0x78>)
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PC5     ------> ADC2_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a02:	2320      	movs	r3, #32
 8001a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a06:	2303      	movs	r3, #3
 8001a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a0e:	f107 0314 	add.w	r3, r7, #20
 8001a12:	4619      	mov	r1, r3
 8001a14:	4805      	ldr	r0, [pc, #20]	; (8001a2c <HAL_ADC_MspInit+0x7c>)
 8001a16:	f001 fc43 	bl	80032a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001a1a:	bf00      	nop
 8001a1c:	3728      	adds	r7, #40	; 0x28
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	50000100 	.word	0x50000100
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	48000800 	.word	0x48000800

08001a30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08c      	sub	sp, #48	; 0x30
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 031c 	add.w	r3, r7, #28
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a2f      	ldr	r2, [pc, #188]	; (8001b0c <HAL_I2C_MspInit+0xdc>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d129      	bne.n	8001aa6 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a52:	4b2f      	ldr	r3, [pc, #188]	; (8001b10 <HAL_I2C_MspInit+0xe0>)
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	4a2e      	ldr	r2, [pc, #184]	; (8001b10 <HAL_I2C_MspInit+0xe0>)
 8001a58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a5c:	6153      	str	r3, [r2, #20]
 8001a5e:	4b2c      	ldr	r3, [pc, #176]	; (8001b10 <HAL_I2C_MspInit+0xe0>)
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a66:	61bb      	str	r3, [r7, #24]
 8001a68:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a6a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a70:	2312      	movs	r3, #18
 8001a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a7c:	2304      	movs	r3, #4
 8001a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a80:	f107 031c 	add.w	r3, r7, #28
 8001a84:	4619      	mov	r1, r3
 8001a86:	4823      	ldr	r0, [pc, #140]	; (8001b14 <HAL_I2C_MspInit+0xe4>)
 8001a88:	f001 fc0a 	bl	80032a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a8c:	4b20      	ldr	r3, [pc, #128]	; (8001b10 <HAL_I2C_MspInit+0xe0>)
 8001a8e:	69db      	ldr	r3, [r3, #28]
 8001a90:	4a1f      	ldr	r2, [pc, #124]	; (8001b10 <HAL_I2C_MspInit+0xe0>)
 8001a92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a96:	61d3      	str	r3, [r2, #28]
 8001a98:	4b1d      	ldr	r3, [pc, #116]	; (8001b10 <HAL_I2C_MspInit+0xe0>)
 8001a9a:	69db      	ldr	r3, [r3, #28]
 8001a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001aa4:	e02e      	b.n	8001b04 <HAL_I2C_MspInit+0xd4>
  else if(hi2c->Instance==I2C2)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a1b      	ldr	r2, [pc, #108]	; (8001b18 <HAL_I2C_MspInit+0xe8>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d129      	bne.n	8001b04 <HAL_I2C_MspInit+0xd4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab0:	4b17      	ldr	r3, [pc, #92]	; (8001b10 <HAL_I2C_MspInit+0xe0>)
 8001ab2:	695b      	ldr	r3, [r3, #20]
 8001ab4:	4a16      	ldr	r2, [pc, #88]	; (8001b10 <HAL_I2C_MspInit+0xe0>)
 8001ab6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aba:	6153      	str	r3, [r2, #20]
 8001abc:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <HAL_I2C_MspInit+0xe0>)
 8001abe:	695b      	ldr	r3, [r3, #20]
 8001ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac4:	613b      	str	r3, [r7, #16]
 8001ac6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ac8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ace:	2312      	movs	r3, #18
 8001ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ada:	2304      	movs	r3, #4
 8001adc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ade:	f107 031c 	add.w	r3, r7, #28
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ae8:	f001 fbda 	bl	80032a0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001aec:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <HAL_I2C_MspInit+0xe0>)
 8001aee:	69db      	ldr	r3, [r3, #28]
 8001af0:	4a07      	ldr	r2, [pc, #28]	; (8001b10 <HAL_I2C_MspInit+0xe0>)
 8001af2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001af6:	61d3      	str	r3, [r2, #28]
 8001af8:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <HAL_I2C_MspInit+0xe0>)
 8001afa:	69db      	ldr	r3, [r3, #28]
 8001afc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	68fb      	ldr	r3, [r7, #12]
}
 8001b04:	bf00      	nop
 8001b06:	3730      	adds	r7, #48	; 0x30
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40005400 	.word	0x40005400
 8001b10:	40021000 	.word	0x40021000
 8001b14:	48000400 	.word	0x48000400
 8001b18:	40005800 	.word	0x40005800

08001b1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08c      	sub	sp, #48	; 0x30
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b24:	f107 031c 	add.w	r3, r7, #28
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a2d      	ldr	r2, [pc, #180]	; (8001bf0 <HAL_TIM_Base_MspInit+0xd4>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d10c      	bne.n	8001b58 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b3e:	4b2d      	ldr	r3, [pc, #180]	; (8001bf4 <HAL_TIM_Base_MspInit+0xd8>)
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	4a2c      	ldr	r2, [pc, #176]	; (8001bf4 <HAL_TIM_Base_MspInit+0xd8>)
 8001b44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b48:	6193      	str	r3, [r2, #24]
 8001b4a:	4b2a      	ldr	r3, [pc, #168]	; (8001bf4 <HAL_TIM_Base_MspInit+0xd8>)
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b52:	61bb      	str	r3, [r7, #24]
 8001b54:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b56:	e047      	b.n	8001be8 <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM2)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b60:	d131      	bne.n	8001bc6 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b62:	4b24      	ldr	r3, [pc, #144]	; (8001bf4 <HAL_TIM_Base_MspInit+0xd8>)
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	4a23      	ldr	r2, [pc, #140]	; (8001bf4 <HAL_TIM_Base_MspInit+0xd8>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	61d3      	str	r3, [r2, #28]
 8001b6e:	4b21      	ldr	r3, [pc, #132]	; (8001bf4 <HAL_TIM_Base_MspInit+0xd8>)
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	617b      	str	r3, [r7, #20]
 8001b78:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7a:	4b1e      	ldr	r3, [pc, #120]	; (8001bf4 <HAL_TIM_Base_MspInit+0xd8>)
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	4a1d      	ldr	r2, [pc, #116]	; (8001bf4 <HAL_TIM_Base_MspInit+0xd8>)
 8001b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b84:	6153      	str	r3, [r2, #20]
 8001b86:	4b1b      	ldr	r3, [pc, #108]	; (8001bf4 <HAL_TIM_Base_MspInit+0xd8>)
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b92:	2302      	movs	r3, #2
 8001b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b96:	2302      	movs	r3, #2
 8001b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba6:	f107 031c 	add.w	r3, r7, #28
 8001baa:	4619      	mov	r1, r3
 8001bac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bb0:	f001 fb76 	bl	80032a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	201c      	movs	r0, #28
 8001bba:	f001 fb3a 	bl	8003232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bbe:	201c      	movs	r0, #28
 8001bc0:	f001 fb53 	bl	800326a <HAL_NVIC_EnableIRQ>
}
 8001bc4:	e010      	b.n	8001be8 <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM3)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a0b      	ldr	r2, [pc, #44]	; (8001bf8 <HAL_TIM_Base_MspInit+0xdc>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d10b      	bne.n	8001be8 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bd0:	4b08      	ldr	r3, [pc, #32]	; (8001bf4 <HAL_TIM_Base_MspInit+0xd8>)
 8001bd2:	69db      	ldr	r3, [r3, #28]
 8001bd4:	4a07      	ldr	r2, [pc, #28]	; (8001bf4 <HAL_TIM_Base_MspInit+0xd8>)
 8001bd6:	f043 0302 	orr.w	r3, r3, #2
 8001bda:	61d3      	str	r3, [r2, #28]
 8001bdc:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <HAL_TIM_Base_MspInit+0xd8>)
 8001bde:	69db      	ldr	r3, [r3, #28]
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	68fb      	ldr	r3, [r7, #12]
}
 8001be8:	bf00      	nop
 8001bea:	3730      	adds	r7, #48	; 0x30
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40012c00 	.word	0x40012c00
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	40000400 	.word	0x40000400

08001bfc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08a      	sub	sp, #40	; 0x28
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c04:	f107 0314 	add.w	r3, r7, #20
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a22      	ldr	r2, [pc, #136]	; (8001ca4 <HAL_TIM_MspPostInit+0xa8>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d11c      	bne.n	8001c58 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c1e:	4b22      	ldr	r3, [pc, #136]	; (8001ca8 <HAL_TIM_MspPostInit+0xac>)
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	4a21      	ldr	r2, [pc, #132]	; (8001ca8 <HAL_TIM_MspPostInit+0xac>)
 8001c24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c28:	6153      	str	r3, [r2, #20]
 8001c2a:	4b1f      	ldr	r3, [pc, #124]	; (8001ca8 <HAL_TIM_MspPostInit+0xac>)
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c32:	613b      	str	r3, [r7, #16]
 8001c34:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c36:	2301      	movs	r3, #1
 8001c38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c42:	2300      	movs	r3, #0
 8001c44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001c46:	2302      	movs	r3, #2
 8001c48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c4a:	f107 0314 	add.w	r3, r7, #20
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4816      	ldr	r0, [pc, #88]	; (8001cac <HAL_TIM_MspPostInit+0xb0>)
 8001c52:	f001 fb25 	bl	80032a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c56:	e020      	b.n	8001c9a <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM3)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a14      	ldr	r2, [pc, #80]	; (8001cb0 <HAL_TIM_MspPostInit+0xb4>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d11b      	bne.n	8001c9a <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c62:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <HAL_TIM_MspPostInit+0xac>)
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	4a10      	ldr	r2, [pc, #64]	; (8001ca8 <HAL_TIM_MspPostInit+0xac>)
 8001c68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c6c:	6153      	str	r3, [r2, #20]
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <HAL_TIM_MspPostInit+0xac>)
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c86:	2300      	movs	r3, #0
 8001c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c8e:	f107 0314 	add.w	r3, r7, #20
 8001c92:	4619      	mov	r1, r3
 8001c94:	4807      	ldr	r0, [pc, #28]	; (8001cb4 <HAL_TIM_MspPostInit+0xb8>)
 8001c96:	f001 fb03 	bl	80032a0 <HAL_GPIO_Init>
}
 8001c9a:	bf00      	nop
 8001c9c:	3728      	adds	r7, #40	; 0x28
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40012c00 	.word	0x40012c00
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	48000800 	.word	0x48000800
 8001cb0:	40000400 	.word	0x40000400
 8001cb4:	48000400 	.word	0x48000400

08001cb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08a      	sub	sp, #40	; 0x28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc0:	f107 0314 	add.w	r3, r7, #20
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	60da      	str	r2, [r3, #12]
 8001cce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a17      	ldr	r2, [pc, #92]	; (8001d34 <HAL_UART_MspInit+0x7c>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d128      	bne.n	8001d2c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cda:	4b17      	ldr	r3, [pc, #92]	; (8001d38 <HAL_UART_MspInit+0x80>)
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	4a16      	ldr	r2, [pc, #88]	; (8001d38 <HAL_UART_MspInit+0x80>)
 8001ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ce4:	61d3      	str	r3, [r2, #28]
 8001ce6:	4b14      	ldr	r3, [pc, #80]	; (8001d38 <HAL_UART_MspInit+0x80>)
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cee:	613b      	str	r3, [r7, #16]
 8001cf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf2:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <HAL_UART_MspInit+0x80>)
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	4a10      	ldr	r2, [pc, #64]	; (8001d38 <HAL_UART_MspInit+0x80>)
 8001cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cfc:	6153      	str	r3, [r2, #20]
 8001cfe:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <HAL_UART_MspInit+0x80>)
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d0a:	230c      	movs	r3, #12
 8001d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d16:	2300      	movs	r3, #0
 8001d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d1a:	2307      	movs	r3, #7
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1e:	f107 0314 	add.w	r3, r7, #20
 8001d22:	4619      	mov	r1, r3
 8001d24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d28:	f001 faba 	bl	80032a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d2c:	bf00      	nop
 8001d2e:	3728      	adds	r7, #40	; 0x28
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40004400 	.word	0x40004400
 8001d38:	40021000 	.word	0x40021000

08001d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d40:	e7fe      	b.n	8001d40 <NMI_Handler+0x4>

08001d42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d42:	b480      	push	{r7}
 8001d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d46:	e7fe      	b.n	8001d46 <HardFault_Handler+0x4>

08001d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d4c:	e7fe      	b.n	8001d4c <MemManage_Handler+0x4>

08001d4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d52:	e7fe      	b.n	8001d52 <BusFault_Handler+0x4>

08001d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d58:	e7fe      	b.n	8001d58 <UsageFault_Handler+0x4>

08001d5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d88:	f000 f960 	bl	800204c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d8c:	bf00      	nop
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Enc_Right_Forward_Pin);
 8001d94:	2002      	movs	r0, #2
 8001d96:	f001 fc3d 	bl	8003614 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
	...

08001da0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001da4:	4802      	ldr	r0, [pc, #8]	; (8001db0 <TIM2_IRQHandler+0x10>)
 8001da6:	f004 fa8f 	bl	80062c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000354 	.word	0x20000354

08001db4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Enc_Left_Backward_Pin);
 8001db8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001dbc:	f001 fc2a 	bl	8003614 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Enc_Left_Forward_Pin);
 8001dc0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001dc4:	f001 fc26 	bl	8003614 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Enc_Right_Backward_Pin);
 8001dc8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001dcc:	f001 fc22 	bl	8003614 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001dd0:	bf00      	nop
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  return 1;
 8001dd8:	2301      	movs	r3, #1
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <_kill>:

int _kill(int pid, int sig)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001dee:	f006 ffbb 	bl	8008d68 <__errno>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2216      	movs	r2, #22
 8001df6:	601a      	str	r2, [r3, #0]
  return -1;
 8001df8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <_exit>:

void _exit (int status)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f7ff ffe7 	bl	8001de4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e16:	e7fe      	b.n	8001e16 <_exit+0x12>

08001e18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	e00a      	b.n	8001e40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e2a:	f3af 8000 	nop.w
 8001e2e:	4601      	mov	r1, r0
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	1c5a      	adds	r2, r3, #1
 8001e34:	60ba      	str	r2, [r7, #8]
 8001e36:	b2ca      	uxtb	r2, r1
 8001e38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	617b      	str	r3, [r7, #20]
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	dbf0      	blt.n	8001e2a <_read+0x12>
  }

  return len;
 8001e48:	687b      	ldr	r3, [r7, #4]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b086      	sub	sp, #24
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	60f8      	str	r0, [r7, #12]
 8001e5a:	60b9      	str	r1, [r7, #8]
 8001e5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]
 8001e62:	e009      	b.n	8001e78 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	1c5a      	adds	r2, r3, #1
 8001e68:	60ba      	str	r2, [r7, #8]
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7fe fff9 	bl	8000e64 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	3301      	adds	r3, #1
 8001e76:	617b      	str	r3, [r7, #20]
 8001e78:	697a      	ldr	r2, [r7, #20]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	dbf1      	blt.n	8001e64 <_write+0x12>
  }
  return len;
 8001e80:	687b      	ldr	r3, [r7, #4]
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
 8001e92:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e9a:	605a      	str	r2, [r3, #4]
  return 0;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <_isatty>:

int _isatty(int file)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b083      	sub	sp, #12
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001eb2:	2301      	movs	r3, #1
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3714      	adds	r7, #20
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
	...

08001edc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ee4:	4a14      	ldr	r2, [pc, #80]	; (8001f38 <_sbrk+0x5c>)
 8001ee6:	4b15      	ldr	r3, [pc, #84]	; (8001f3c <_sbrk+0x60>)
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ef0:	4b13      	ldr	r3, [pc, #76]	; (8001f40 <_sbrk+0x64>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d102      	bne.n	8001efe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ef8:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <_sbrk+0x64>)
 8001efa:	4a12      	ldr	r2, [pc, #72]	; (8001f44 <_sbrk+0x68>)
 8001efc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001efe:	4b10      	ldr	r3, [pc, #64]	; (8001f40 <_sbrk+0x64>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4413      	add	r3, r2
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d207      	bcs.n	8001f1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f0c:	f006 ff2c 	bl	8008d68 <__errno>
 8001f10:	4603      	mov	r3, r0
 8001f12:	220c      	movs	r2, #12
 8001f14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f16:	f04f 33ff 	mov.w	r3, #4294967295
 8001f1a:	e009      	b.n	8001f30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f1c:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <_sbrk+0x64>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f22:	4b07      	ldr	r3, [pc, #28]	; (8001f40 <_sbrk+0x64>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4413      	add	r3, r2
 8001f2a:	4a05      	ldr	r2, [pc, #20]	; (8001f40 <_sbrk+0x64>)
 8001f2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	20010000 	.word	0x20010000
 8001f3c:	00000400 	.word	0x00000400
 8001f40:	20000490 	.word	0x20000490
 8001f44:	200005e8 	.word	0x200005e8

08001f48 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f4c:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <SystemInit+0x20>)
 8001f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f52:	4a05      	ldr	r2, [pc, #20]	; (8001f68 <SystemInit+0x20>)
 8001f54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fa4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f70:	f7ff ffea 	bl	8001f48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f74:	480c      	ldr	r0, [pc, #48]	; (8001fa8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f76:	490d      	ldr	r1, [pc, #52]	; (8001fac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f78:	4a0d      	ldr	r2, [pc, #52]	; (8001fb0 <LoopForever+0xe>)
  movs r3, #0
 8001f7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f7c:	e002      	b.n	8001f84 <LoopCopyDataInit>

08001f7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f82:	3304      	adds	r3, #4

08001f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f88:	d3f9      	bcc.n	8001f7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f8a:	4a0a      	ldr	r2, [pc, #40]	; (8001fb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f8c:	4c0a      	ldr	r4, [pc, #40]	; (8001fb8 <LoopForever+0x16>)
  movs r3, #0
 8001f8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f90:	e001      	b.n	8001f96 <LoopFillZerobss>

08001f92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f94:	3204      	adds	r2, #4

08001f96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f98:	d3fb      	bcc.n	8001f92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f9a:	f006 feeb 	bl	8008d74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f9e:	f7fe ff81 	bl	8000ea4 <main>

08001fa2 <LoopForever>:

LoopForever:
    b LoopForever
 8001fa2:	e7fe      	b.n	8001fa2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001fa4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001fa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fac:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001fb0:	0800af54 	.word	0x0800af54
  ldr r2, =_sbss
 8001fb4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001fb8:	200005e4 	.word	0x200005e4

08001fbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fbc:	e7fe      	b.n	8001fbc <ADC1_2_IRQHandler>
	...

08001fc0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fc4:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <HAL_Init+0x28>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a07      	ldr	r2, [pc, #28]	; (8001fe8 <HAL_Init+0x28>)
 8001fca:	f043 0310 	orr.w	r3, r3, #16
 8001fce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fd0:	2003      	movs	r0, #3
 8001fd2:	f001 f923 	bl	800321c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	f000 f808 	bl	8001fec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fdc:	f7ff fcc4 	bl	8001968 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40022000 	.word	0x40022000

08001fec <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ff4:	4b12      	ldr	r3, [pc, #72]	; (8002040 <HAL_InitTick+0x54>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	4b12      	ldr	r3, [pc, #72]	; (8002044 <HAL_InitTick+0x58>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002002:	fbb3 f3f1 	udiv	r3, r3, r1
 8002006:	fbb2 f3f3 	udiv	r3, r2, r3
 800200a:	4618      	mov	r0, r3
 800200c:	f001 f93b 	bl	8003286 <HAL_SYSTICK_Config>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e00e      	b.n	8002038 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b0f      	cmp	r3, #15
 800201e:	d80a      	bhi.n	8002036 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002020:	2200      	movs	r2, #0
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	f04f 30ff 	mov.w	r0, #4294967295
 8002028:	f001 f903 	bl	8003232 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800202c:	4a06      	ldr	r2, [pc, #24]	; (8002048 <HAL_InitTick+0x5c>)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002032:	2300      	movs	r3, #0
 8002034:	e000      	b.n	8002038 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
}
 8002038:	4618      	mov	r0, r3
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20000000 	.word	0x20000000
 8002044:	20000008 	.word	0x20000008
 8002048:	20000004 	.word	0x20000004

0800204c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002050:	4b06      	ldr	r3, [pc, #24]	; (800206c <HAL_IncTick+0x20>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	461a      	mov	r2, r3
 8002056:	4b06      	ldr	r3, [pc, #24]	; (8002070 <HAL_IncTick+0x24>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4413      	add	r3, r2
 800205c:	4a04      	ldr	r2, [pc, #16]	; (8002070 <HAL_IncTick+0x24>)
 800205e:	6013      	str	r3, [r2, #0]
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	20000008 	.word	0x20000008
 8002070:	20000494 	.word	0x20000494

08002074 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return uwTick;  
 8002078:	4b03      	ldr	r3, [pc, #12]	; (8002088 <HAL_GetTick+0x14>)
 800207a:	681b      	ldr	r3, [r3, #0]
}
 800207c:	4618      	mov	r0, r3
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	20000494 	.word	0x20000494

0800208c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002094:	f7ff ffee 	bl	8002074 <HAL_GetTick>
 8002098:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a4:	d005      	beq.n	80020b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020a6:	4b0a      	ldr	r3, [pc, #40]	; (80020d0 <HAL_Delay+0x44>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	461a      	mov	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4413      	add	r3, r2
 80020b0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80020b2:	bf00      	nop
 80020b4:	f7ff ffde 	bl	8002074 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d8f7      	bhi.n	80020b4 <HAL_Delay+0x28>
  {
  }
}
 80020c4:	bf00      	nop
 80020c6:	bf00      	nop
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000008 	.word	0x20000008

080020d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b09a      	sub	sp, #104	; 0x68
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020dc:	2300      	movs	r3, #0
 80020de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80020e6:	2300      	movs	r3, #0
 80020e8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d101      	bne.n	80020f4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e1e3      	b.n	80024bc <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	f003 0310 	and.w	r3, r3, #16
 8002102:	2b00      	cmp	r3, #0
 8002104:	d176      	bne.n	80021f4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	2b00      	cmp	r3, #0
 800210c:	d152      	bne.n	80021b4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff fc41 	bl	80019b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d13b      	bne.n	80021b4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 ff37 	bl	8002fb0 <ADC_Disable>
 8002142:	4603      	mov	r3, r0
 8002144:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	f003 0310 	and.w	r3, r3, #16
 8002150:	2b00      	cmp	r3, #0
 8002152:	d12f      	bne.n	80021b4 <HAL_ADC_Init+0xe0>
 8002154:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002158:	2b00      	cmp	r3, #0
 800215a:	d12b      	bne.n	80021b4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002164:	f023 0302 	bic.w	r3, r3, #2
 8002168:	f043 0202 	orr.w	r2, r3, #2
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800217e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800218e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002190:	4b92      	ldr	r3, [pc, #584]	; (80023dc <HAL_ADC_Init+0x308>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a92      	ldr	r2, [pc, #584]	; (80023e0 <HAL_ADC_Init+0x30c>)
 8002196:	fba2 2303 	umull	r2, r3, r2, r3
 800219a:	0c9a      	lsrs	r2, r3, #18
 800219c:	4613      	mov	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021a6:	e002      	b.n	80021ae <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1f9      	bne.n	80021a8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d007      	beq.n	80021d2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80021cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021d0:	d110      	bne.n	80021f4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	f023 0312 	bic.w	r3, r3, #18
 80021da:	f043 0210 	orr.w	r2, r3, #16
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e6:	f043 0201 	orr.w	r2, r3, #1
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f8:	f003 0310 	and.w	r3, r3, #16
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f040 8150 	bne.w	80024a2 <HAL_ADC_Init+0x3ce>
 8002202:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002206:	2b00      	cmp	r3, #0
 8002208:	f040 814b 	bne.w	80024a2 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002216:	2b00      	cmp	r3, #0
 8002218:	f040 8143 	bne.w	80024a2 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002224:	f043 0202 	orr.w	r2, r3, #2
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002234:	d004      	beq.n	8002240 <HAL_ADC_Init+0x16c>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a6a      	ldr	r2, [pc, #424]	; (80023e4 <HAL_ADC_Init+0x310>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d101      	bne.n	8002244 <HAL_ADC_Init+0x170>
 8002240:	4b69      	ldr	r3, [pc, #420]	; (80023e8 <HAL_ADC_Init+0x314>)
 8002242:	e000      	b.n	8002246 <HAL_ADC_Init+0x172>
 8002244:	4b69      	ldr	r3, [pc, #420]	; (80023ec <HAL_ADC_Init+0x318>)
 8002246:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002250:	d102      	bne.n	8002258 <HAL_ADC_Init+0x184>
 8002252:	4b64      	ldr	r3, [pc, #400]	; (80023e4 <HAL_ADC_Init+0x310>)
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	e01a      	b.n	800228e <HAL_ADC_Init+0x1ba>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a61      	ldr	r2, [pc, #388]	; (80023e4 <HAL_ADC_Init+0x310>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d103      	bne.n	800226a <HAL_ADC_Init+0x196>
 8002262:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	e011      	b.n	800228e <HAL_ADC_Init+0x1ba>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a60      	ldr	r2, [pc, #384]	; (80023f0 <HAL_ADC_Init+0x31c>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d102      	bne.n	800227a <HAL_ADC_Init+0x1a6>
 8002274:	4b5f      	ldr	r3, [pc, #380]	; (80023f4 <HAL_ADC_Init+0x320>)
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	e009      	b.n	800228e <HAL_ADC_Init+0x1ba>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a5d      	ldr	r2, [pc, #372]	; (80023f4 <HAL_ADC_Init+0x320>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d102      	bne.n	800228a <HAL_ADC_Init+0x1b6>
 8002284:	4b5a      	ldr	r3, [pc, #360]	; (80023f0 <HAL_ADC_Init+0x31c>)
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	e001      	b.n	800228e <HAL_ADC_Init+0x1ba>
 800228a:	2300      	movs	r3, #0
 800228c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f003 0303 	and.w	r3, r3, #3
 8002298:	2b01      	cmp	r3, #1
 800229a:	d108      	bne.n	80022ae <HAL_ADC_Init+0x1da>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d101      	bne.n	80022ae <HAL_ADC_Init+0x1da>
 80022aa:	2301      	movs	r3, #1
 80022ac:	e000      	b.n	80022b0 <HAL_ADC_Init+0x1dc>
 80022ae:	2300      	movs	r3, #0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d11c      	bne.n	80022ee <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80022b4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d010      	beq.n	80022dc <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d107      	bne.n	80022d6 <HAL_ADC_Init+0x202>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d101      	bne.n	80022d6 <HAL_ADC_Init+0x202>
 80022d2:	2301      	movs	r3, #1
 80022d4:	e000      	b.n	80022d8 <HAL_ADC_Init+0x204>
 80022d6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d108      	bne.n	80022ee <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80022dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	431a      	orrs	r2, r3
 80022ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022ec:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	7e5b      	ldrb	r3, [r3, #25]
 80022f2:	035b      	lsls	r3, r3, #13
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022f8:	2a01      	cmp	r2, #1
 80022fa:	d002      	beq.n	8002302 <HAL_ADC_Init+0x22e>
 80022fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002300:	e000      	b.n	8002304 <HAL_ADC_Init+0x230>
 8002302:	2200      	movs	r2, #0
 8002304:	431a      	orrs	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	4313      	orrs	r3, r2
 8002312:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002314:	4313      	orrs	r3, r2
 8002316:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d11b      	bne.n	800235a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	7e5b      	ldrb	r3, [r3, #25]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d109      	bne.n	800233e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232e:	3b01      	subs	r3, #1
 8002330:	045a      	lsls	r2, r3, #17
 8002332:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002334:	4313      	orrs	r3, r2
 8002336:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800233a:	663b      	str	r3, [r7, #96]	; 0x60
 800233c:	e00d      	b.n	800235a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002346:	f043 0220 	orr.w	r2, r3, #32
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002352:	f043 0201 	orr.w	r2, r3, #1
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235e:	2b01      	cmp	r3, #1
 8002360:	d054      	beq.n	800240c <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a22      	ldr	r2, [pc, #136]	; (80023f0 <HAL_ADC_Init+0x31c>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d004      	beq.n	8002376 <HAL_ADC_Init+0x2a2>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a20      	ldr	r2, [pc, #128]	; (80023f4 <HAL_ADC_Init+0x320>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d140      	bne.n	80023f8 <HAL_ADC_Init+0x324>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800237e:	d02a      	beq.n	80023d6 <HAL_ADC_Init+0x302>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002384:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002388:	d022      	beq.n	80023d0 <HAL_ADC_Init+0x2fc>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002392:	d01a      	beq.n	80023ca <HAL_ADC_Init+0x2f6>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002398:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 800239c:	d012      	beq.n	80023c4 <HAL_ADC_Init+0x2f0>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a2:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 80023a6:	d00a      	beq.n	80023be <HAL_ADC_Init+0x2ea>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ac:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 80023b0:	d002      	beq.n	80023b8 <HAL_ADC_Init+0x2e4>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b6:	e023      	b.n	8002400 <HAL_ADC_Init+0x32c>
 80023b8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80023bc:	e020      	b.n	8002400 <HAL_ADC_Init+0x32c>
 80023be:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80023c2:	e01d      	b.n	8002400 <HAL_ADC_Init+0x32c>
 80023c4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80023c8:	e01a      	b.n	8002400 <HAL_ADC_Init+0x32c>
 80023ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023ce:	e017      	b.n	8002400 <HAL_ADC_Init+0x32c>
 80023d0:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80023d4:	e014      	b.n	8002400 <HAL_ADC_Init+0x32c>
 80023d6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80023da:	e011      	b.n	8002400 <HAL_ADC_Init+0x32c>
 80023dc:	20000000 	.word	0x20000000
 80023e0:	431bde83 	.word	0x431bde83
 80023e4:	50000100 	.word	0x50000100
 80023e8:	50000300 	.word	0x50000300
 80023ec:	50000700 	.word	0x50000700
 80023f0:	50000400 	.word	0x50000400
 80023f4:	50000500 	.word	0x50000500
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002404:	4313      	orrs	r3, r2
 8002406:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002408:	4313      	orrs	r3, r2
 800240a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 030c 	and.w	r3, r3, #12
 8002416:	2b00      	cmp	r3, #0
 8002418:	d114      	bne.n	8002444 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6812      	ldr	r2, [r2, #0]
 8002424:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002428:	f023 0302 	bic.w	r3, r3, #2
 800242c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	7e1b      	ldrb	r3, [r3, #24]
 8002432:	039a      	lsls	r2, r3, #14
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	4313      	orrs	r3, r2
 800243e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002440:	4313      	orrs	r3, r2
 8002442:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68da      	ldr	r2, [r3, #12]
 800244a:	4b1e      	ldr	r3, [pc, #120]	; (80024c4 <HAL_ADC_Init+0x3f0>)
 800244c:	4013      	ands	r3, r2
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6812      	ldr	r2, [r2, #0]
 8002452:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002454:	430b      	orrs	r3, r1
 8002456:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d10c      	bne.n	800247a <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	f023 010f 	bic.w	r1, r3, #15
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	1e5a      	subs	r2, r3, #1
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	631a      	str	r2, [r3, #48]	; 0x30
 8002478:	e007      	b.n	800248a <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 020f 	bic.w	r2, r2, #15
 8002488:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002494:	f023 0303 	bic.w	r3, r3, #3
 8002498:	f043 0201 	orr.w	r2, r3, #1
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	641a      	str	r2, [r3, #64]	; 0x40
 80024a0:	e00a      	b.n	80024b8 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	f023 0312 	bic.w	r3, r3, #18
 80024aa:	f043 0210 	orr.w	r2, r3, #16
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80024b2:	2301      	movs	r3, #1
 80024b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80024b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3768      	adds	r7, #104	; 0x68
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	fff0c007 	.word	0xfff0c007

080024c8 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024d0:	2300      	movs	r3, #0
 80024d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 0304 	and.w	r3, r3, #4
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f040 80f9 	bne.w	80026d6 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d101      	bne.n	80024f2 <HAL_ADC_Start+0x2a>
 80024ee:	2302      	movs	r3, #2
 80024f0:	e0f4      	b.n	80026dc <HAL_ADC_Start+0x214>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 fcf4 	bl	8002ee8 <ADC_Enable>
 8002500:	4603      	mov	r3, r0
 8002502:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002504:	7bfb      	ldrb	r3, [r7, #15]
 8002506:	2b00      	cmp	r3, #0
 8002508:	f040 80e0 	bne.w	80026cc <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002510:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002514:	f023 0301 	bic.w	r3, r3, #1
 8002518:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002528:	d004      	beq.n	8002534 <HAL_ADC_Start+0x6c>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a6d      	ldr	r2, [pc, #436]	; (80026e4 <HAL_ADC_Start+0x21c>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d106      	bne.n	8002542 <HAL_ADC_Start+0x7a>
 8002534:	4b6c      	ldr	r3, [pc, #432]	; (80026e8 <HAL_ADC_Start+0x220>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f003 031f 	and.w	r3, r3, #31
 800253c:	2b00      	cmp	r3, #0
 800253e:	d010      	beq.n	8002562 <HAL_ADC_Start+0x9a>
 8002540:	e005      	b.n	800254e <HAL_ADC_Start+0x86>
 8002542:	4b6a      	ldr	r3, [pc, #424]	; (80026ec <HAL_ADC_Start+0x224>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 031f 	and.w	r3, r3, #31
 800254a:	2b00      	cmp	r3, #0
 800254c:	d009      	beq.n	8002562 <HAL_ADC_Start+0x9a>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002556:	d004      	beq.n	8002562 <HAL_ADC_Start+0x9a>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a64      	ldr	r2, [pc, #400]	; (80026f0 <HAL_ADC_Start+0x228>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d115      	bne.n	800258e <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d036      	beq.n	80025ea <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002580:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002584:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800258c:	e02d      	b.n	80025ea <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025a2:	d004      	beq.n	80025ae <HAL_ADC_Start+0xe6>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a4e      	ldr	r2, [pc, #312]	; (80026e4 <HAL_ADC_Start+0x21c>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d10a      	bne.n	80025c4 <HAL_ADC_Start+0xfc>
 80025ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	bf14      	ite	ne
 80025bc:	2301      	movne	r3, #1
 80025be:	2300      	moveq	r3, #0
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	e008      	b.n	80025d6 <HAL_ADC_Start+0x10e>
 80025c4:	4b4a      	ldr	r3, [pc, #296]	; (80026f0 <HAL_ADC_Start+0x228>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	bf14      	ite	ne
 80025d0:	2301      	movne	r3, #1
 80025d2:	2300      	moveq	r3, #0
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d007      	beq.n	80025ea <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025e2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025f6:	d106      	bne.n	8002606 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fc:	f023 0206 	bic.w	r2, r3, #6
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	645a      	str	r2, [r3, #68]	; 0x44
 8002604:	e002      	b.n	800260c <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	221c      	movs	r2, #28
 800261a:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002624:	d004      	beq.n	8002630 <HAL_ADC_Start+0x168>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a2e      	ldr	r2, [pc, #184]	; (80026e4 <HAL_ADC_Start+0x21c>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d106      	bne.n	800263e <HAL_ADC_Start+0x176>
 8002630:	4b2d      	ldr	r3, [pc, #180]	; (80026e8 <HAL_ADC_Start+0x220>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f003 031f 	and.w	r3, r3, #31
 8002638:	2b00      	cmp	r3, #0
 800263a:	d03e      	beq.n	80026ba <HAL_ADC_Start+0x1f2>
 800263c:	e005      	b.n	800264a <HAL_ADC_Start+0x182>
 800263e:	4b2b      	ldr	r3, [pc, #172]	; (80026ec <HAL_ADC_Start+0x224>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 031f 	and.w	r3, r3, #31
 8002646:	2b00      	cmp	r3, #0
 8002648:	d037      	beq.n	80026ba <HAL_ADC_Start+0x1f2>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002652:	d004      	beq.n	800265e <HAL_ADC_Start+0x196>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a22      	ldr	r2, [pc, #136]	; (80026e4 <HAL_ADC_Start+0x21c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d106      	bne.n	800266c <HAL_ADC_Start+0x1a4>
 800265e:	4b22      	ldr	r3, [pc, #136]	; (80026e8 <HAL_ADC_Start+0x220>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 031f 	and.w	r3, r3, #31
 8002666:	2b05      	cmp	r3, #5
 8002668:	d027      	beq.n	80026ba <HAL_ADC_Start+0x1f2>
 800266a:	e005      	b.n	8002678 <HAL_ADC_Start+0x1b0>
 800266c:	4b1f      	ldr	r3, [pc, #124]	; (80026ec <HAL_ADC_Start+0x224>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 031f 	and.w	r3, r3, #31
 8002674:	2b05      	cmp	r3, #5
 8002676:	d020      	beq.n	80026ba <HAL_ADC_Start+0x1f2>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002680:	d004      	beq.n	800268c <HAL_ADC_Start+0x1c4>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a17      	ldr	r2, [pc, #92]	; (80026e4 <HAL_ADC_Start+0x21c>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d106      	bne.n	800269a <HAL_ADC_Start+0x1d2>
 800268c:	4b16      	ldr	r3, [pc, #88]	; (80026e8 <HAL_ADC_Start+0x220>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 031f 	and.w	r3, r3, #31
 8002694:	2b09      	cmp	r3, #9
 8002696:	d010      	beq.n	80026ba <HAL_ADC_Start+0x1f2>
 8002698:	e005      	b.n	80026a6 <HAL_ADC_Start+0x1de>
 800269a:	4b14      	ldr	r3, [pc, #80]	; (80026ec <HAL_ADC_Start+0x224>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 031f 	and.w	r3, r3, #31
 80026a2:	2b09      	cmp	r3, #9
 80026a4:	d009      	beq.n	80026ba <HAL_ADC_Start+0x1f2>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026ae:	d004      	beq.n	80026ba <HAL_ADC_Start+0x1f2>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a0e      	ldr	r2, [pc, #56]	; (80026f0 <HAL_ADC_Start+0x228>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d10f      	bne.n	80026da <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f042 0204 	orr.w	r2, r2, #4
 80026c8:	609a      	str	r2, [r3, #8]
 80026ca:	e006      	b.n	80026da <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80026d4:	e001      	b.n	80026da <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80026d6:	2302      	movs	r3, #2
 80026d8:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80026da:	7bfb      	ldrb	r3, [r7, #15]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	50000100 	.word	0x50000100
 80026e8:	50000300 	.word	0x50000300
 80026ec:	50000700 	.word	0x50000700
 80026f0:	50000400 	.word	0x50000400

080026f4 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80026fe:	2300      	movs	r3, #0
 8002700:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	2b08      	cmp	r3, #8
 8002708:	d102      	bne.n	8002710 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800270a:	2308      	movs	r3, #8
 800270c:	617b      	str	r3, [r7, #20]
 800270e:	e03a      	b.n	8002786 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002718:	d004      	beq.n	8002724 <HAL_ADC_PollForConversion+0x30>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a72      	ldr	r2, [pc, #456]	; (80028e8 <HAL_ADC_PollForConversion+0x1f4>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d101      	bne.n	8002728 <HAL_ADC_PollForConversion+0x34>
 8002724:	4b71      	ldr	r3, [pc, #452]	; (80028ec <HAL_ADC_PollForConversion+0x1f8>)
 8002726:	e000      	b.n	800272a <HAL_ADC_PollForConversion+0x36>
 8002728:	4b71      	ldr	r3, [pc, #452]	; (80028f0 <HAL_ADC_PollForConversion+0x1fc>)
 800272a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f003 031f 	and.w	r3, r3, #31
 8002734:	2b00      	cmp	r3, #0
 8002736:	d112      	bne.n	800275e <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b01      	cmp	r3, #1
 8002744:	d11d      	bne.n	8002782 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	f043 0220 	orr.w	r2, r3, #32
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e0bf      	b.n	80028de <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00b      	beq.n	8002782 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	f043 0220 	orr.w	r2, r3, #32
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e0ad      	b.n	80028de <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002782:	230c      	movs	r3, #12
 8002784:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800278e:	d004      	beq.n	800279a <HAL_ADC_PollForConversion+0xa6>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a54      	ldr	r2, [pc, #336]	; (80028e8 <HAL_ADC_PollForConversion+0x1f4>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d106      	bne.n	80027a8 <HAL_ADC_PollForConversion+0xb4>
 800279a:	4b54      	ldr	r3, [pc, #336]	; (80028ec <HAL_ADC_PollForConversion+0x1f8>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 031f 	and.w	r3, r3, #31
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d010      	beq.n	80027c8 <HAL_ADC_PollForConversion+0xd4>
 80027a6:	e005      	b.n	80027b4 <HAL_ADC_PollForConversion+0xc0>
 80027a8:	4b51      	ldr	r3, [pc, #324]	; (80028f0 <HAL_ADC_PollForConversion+0x1fc>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f003 031f 	and.w	r3, r3, #31
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d009      	beq.n	80027c8 <HAL_ADC_PollForConversion+0xd4>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027bc:	d004      	beq.n	80027c8 <HAL_ADC_PollForConversion+0xd4>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a4c      	ldr	r2, [pc, #304]	; (80028f4 <HAL_ADC_PollForConversion+0x200>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d104      	bne.n	80027d2 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	613b      	str	r3, [r7, #16]
 80027d0:	e00f      	b.n	80027f2 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027da:	d004      	beq.n	80027e6 <HAL_ADC_PollForConversion+0xf2>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a41      	ldr	r2, [pc, #260]	; (80028e8 <HAL_ADC_PollForConversion+0x1f4>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d102      	bne.n	80027ec <HAL_ADC_PollForConversion+0xf8>
 80027e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80027ea:	e000      	b.n	80027ee <HAL_ADC_PollForConversion+0xfa>
 80027ec:	4b41      	ldr	r3, [pc, #260]	; (80028f4 <HAL_ADC_PollForConversion+0x200>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80027f2:	f7ff fc3f 	bl	8002074 <HAL_GetTick>
 80027f6:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80027f8:	e021      	b.n	800283e <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002800:	d01d      	beq.n	800283e <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d007      	beq.n	8002818 <HAL_ADC_PollForConversion+0x124>
 8002808:	f7ff fc34 	bl	8002074 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	429a      	cmp	r2, r3
 8002816:	d212      	bcs.n	800283e <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	4013      	ands	r3, r2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10b      	bne.n	800283e <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	f043 0204 	orr.w	r2, r3, #4
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e04f      	b.n	80028de <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	4013      	ands	r3, r2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0d6      	beq.n	80027fa <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002850:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002862:	2b00      	cmp	r3, #0
 8002864:	d131      	bne.n	80028ca <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800286c:	2b00      	cmp	r3, #0
 800286e:	d12c      	bne.n	80028ca <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0308 	and.w	r3, r3, #8
 800287a:	2b08      	cmp	r3, #8
 800287c:	d125      	bne.n	80028ca <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	2b00      	cmp	r3, #0
 800288a:	d112      	bne.n	80028b2 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d112      	bne.n	80028ca <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a8:	f043 0201 	orr.w	r2, r3, #1
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	641a      	str	r2, [r3, #64]	; 0x40
 80028b0:	e00b      	b.n	80028ca <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	f043 0220 	orr.w	r2, r3, #32
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	f043 0201 	orr.w	r2, r3, #1
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d103      	bne.n	80028dc <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	50000100 	.word	0x50000100
 80028ec:	50000300 	.word	0x50000300
 80028f0:	50000700 	.word	0x50000700
 80028f4:	50000400 	.word	0x50000400

080028f8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002906:	4618      	mov	r0, r3
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
	...

08002914 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002914:	b480      	push	{r7}
 8002916:	b09b      	sub	sp, #108	; 0x6c
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800291e:	2300      	movs	r3, #0
 8002920:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002924:	2300      	movs	r3, #0
 8002926:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800292e:	2b01      	cmp	r3, #1
 8002930:	d101      	bne.n	8002936 <HAL_ADC_ConfigChannel+0x22>
 8002932:	2302      	movs	r3, #2
 8002934:	e2c8      	b.n	8002ec8 <HAL_ADC_ConfigChannel+0x5b4>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	2b00      	cmp	r3, #0
 800294a:	f040 82ac 	bne.w	8002ea6 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2b04      	cmp	r3, #4
 8002954:	d81c      	bhi.n	8002990 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	4613      	mov	r3, r2
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	4413      	add	r3, r2
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	461a      	mov	r2, r3
 800296a:	231f      	movs	r3, #31
 800296c:	4093      	lsls	r3, r2
 800296e:	43db      	mvns	r3, r3
 8002970:	4019      	ands	r1, r3
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	6818      	ldr	r0, [r3, #0]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	4613      	mov	r3, r2
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	4413      	add	r3, r2
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	fa00 f203 	lsl.w	r2, r0, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	430a      	orrs	r2, r1
 800298c:	631a      	str	r2, [r3, #48]	; 0x30
 800298e:	e063      	b.n	8002a58 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	2b09      	cmp	r3, #9
 8002996:	d81e      	bhi.n	80029d6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	4613      	mov	r3, r2
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	4413      	add	r3, r2
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	3b1e      	subs	r3, #30
 80029ac:	221f      	movs	r2, #31
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	43db      	mvns	r3, r3
 80029b4:	4019      	ands	r1, r3
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	6818      	ldr	r0, [r3, #0]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	4613      	mov	r3, r2
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	4413      	add	r3, r2
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	3b1e      	subs	r3, #30
 80029c8:	fa00 f203 	lsl.w	r2, r0, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	635a      	str	r2, [r3, #52]	; 0x34
 80029d4:	e040      	b.n	8002a58 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b0e      	cmp	r3, #14
 80029dc:	d81e      	bhi.n	8002a1c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	4613      	mov	r3, r2
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	4413      	add	r3, r2
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	3b3c      	subs	r3, #60	; 0x3c
 80029f2:	221f      	movs	r2, #31
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	43db      	mvns	r3, r3
 80029fa:	4019      	ands	r1, r3
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	6818      	ldr	r0, [r3, #0]
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	4613      	mov	r3, r2
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	4413      	add	r3, r2
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	3b3c      	subs	r3, #60	; 0x3c
 8002a0e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	639a      	str	r2, [r3, #56]	; 0x38
 8002a1a:	e01d      	b.n	8002a58 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	4613      	mov	r3, r2
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	4413      	add	r3, r2
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	3b5a      	subs	r3, #90	; 0x5a
 8002a30:	221f      	movs	r2, #31
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	43db      	mvns	r3, r3
 8002a38:	4019      	ands	r1, r3
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	6818      	ldr	r0, [r3, #0]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	4613      	mov	r3, r2
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	4413      	add	r3, r2
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	3b5a      	subs	r3, #90	; 0x5a
 8002a4c:	fa00 f203 	lsl.w	r2, r0, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	430a      	orrs	r2, r1
 8002a56:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 030c 	and.w	r3, r3, #12
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f040 80e5 	bne.w	8002c32 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2b09      	cmp	r3, #9
 8002a6e:	d91c      	bls.n	8002aaa <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6999      	ldr	r1, [r3, #24]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	4413      	add	r3, r2
 8002a80:	3b1e      	subs	r3, #30
 8002a82:	2207      	movs	r2, #7
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	4019      	ands	r1, r3
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	6898      	ldr	r0, [r3, #8]
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	4613      	mov	r3, r2
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	4413      	add	r3, r2
 8002a9a:	3b1e      	subs	r3, #30
 8002a9c:	fa00 f203 	lsl.w	r2, r0, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	619a      	str	r2, [r3, #24]
 8002aa8:	e019      	b.n	8002ade <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6959      	ldr	r1, [r3, #20]
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	4413      	add	r3, r2
 8002aba:	2207      	movs	r2, #7
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	4019      	ands	r1, r3
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	6898      	ldr	r0, [r3, #8]
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	4613      	mov	r3, r2
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	4413      	add	r3, r2
 8002ad2:	fa00 f203 	lsl.w	r2, r0, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	695a      	ldr	r2, [r3, #20]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	08db      	lsrs	r3, r3, #3
 8002aea:	f003 0303 	and.w	r3, r3, #3
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	3b01      	subs	r3, #1
 8002afc:	2b03      	cmp	r3, #3
 8002afe:	d84f      	bhi.n	8002ba0 <HAL_ADC_ConfigChannel+0x28c>
 8002b00:	a201      	add	r2, pc, #4	; (adr r2, 8002b08 <HAL_ADC_ConfigChannel+0x1f4>)
 8002b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b06:	bf00      	nop
 8002b08:	08002b19 	.word	0x08002b19
 8002b0c:	08002b3b 	.word	0x08002b3b
 8002b10:	08002b5d 	.word	0x08002b5d
 8002b14:	08002b7f 	.word	0x08002b7f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b1e:	4b99      	ldr	r3, [pc, #612]	; (8002d84 <HAL_ADC_ConfigChannel+0x470>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	6812      	ldr	r2, [r2, #0]
 8002b26:	0691      	lsls	r1, r2, #26
 8002b28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002b36:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002b38:	e07b      	b.n	8002c32 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002b40:	4b90      	ldr	r3, [pc, #576]	; (8002d84 <HAL_ADC_ConfigChannel+0x470>)
 8002b42:	4013      	ands	r3, r2
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	6812      	ldr	r2, [r2, #0]
 8002b48:	0691      	lsls	r1, r2, #26
 8002b4a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002b58:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002b5a:	e06a      	b.n	8002c32 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002b62:	4b88      	ldr	r3, [pc, #544]	; (8002d84 <HAL_ADC_ConfigChannel+0x470>)
 8002b64:	4013      	ands	r3, r2
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	6812      	ldr	r2, [r2, #0]
 8002b6a:	0691      	lsls	r1, r2, #26
 8002b6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	431a      	orrs	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002b7a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002b7c:	e059      	b.n	8002c32 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002b84:	4b7f      	ldr	r3, [pc, #508]	; (8002d84 <HAL_ADC_ConfigChannel+0x470>)
 8002b86:	4013      	ands	r3, r2
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	6812      	ldr	r2, [r2, #0]
 8002b8c:	0691      	lsls	r1, r2, #26
 8002b8e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b90:	430a      	orrs	r2, r1
 8002b92:	431a      	orrs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002b9c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002b9e:	e048      	b.n	8002c32 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ba6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	069b      	lsls	r3, r3, #26
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d107      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002bc2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	069b      	lsls	r3, r3, #26
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d107      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002be6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	069b      	lsls	r3, r3, #26
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d107      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c0a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	069b      	lsls	r3, r3, #26
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d107      	bne.n	8002c30 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c2e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002c30:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 0303 	and.w	r3, r3, #3
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d108      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x33e>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d101      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x33e>
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e000      	b.n	8002c54 <HAL_ADC_ConfigChannel+0x340>
 8002c52:	2300      	movs	r3, #0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f040 8131 	bne.w	8002ebc <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d00f      	beq.n	8002c82 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	43da      	mvns	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	400a      	ands	r2, r1
 8002c7c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002c80:	e049      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	409a      	lsls	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2b09      	cmp	r3, #9
 8002ca2:	d91c      	bls.n	8002cde <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6999      	ldr	r1, [r3, #24]
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3b1b      	subs	r3, #27
 8002cb6:	2207      	movs	r2, #7
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	4019      	ands	r1, r3
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	6898      	ldr	r0, [r3, #8]
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	4413      	add	r3, r2
 8002cce:	3b1b      	subs	r3, #27
 8002cd0:	fa00 f203 	lsl.w	r2, r0, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	619a      	str	r2, [r3, #24]
 8002cdc:	e01b      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6959      	ldr	r1, [r3, #20]
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	1c5a      	adds	r2, r3, #1
 8002cea:	4613      	mov	r3, r2
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	4413      	add	r3, r2
 8002cf0:	2207      	movs	r2, #7
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	43db      	mvns	r3, r3
 8002cf8:	4019      	ands	r1, r3
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	6898      	ldr	r0, [r3, #8]
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	1c5a      	adds	r2, r3, #1
 8002d04:	4613      	mov	r3, r2
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	4413      	add	r3, r2
 8002d0a:	fa00 f203 	lsl.w	r2, r0, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d1e:	d004      	beq.n	8002d2a <HAL_ADC_ConfigChannel+0x416>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a18      	ldr	r2, [pc, #96]	; (8002d88 <HAL_ADC_ConfigChannel+0x474>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d101      	bne.n	8002d2e <HAL_ADC_ConfigChannel+0x41a>
 8002d2a:	4b18      	ldr	r3, [pc, #96]	; (8002d8c <HAL_ADC_ConfigChannel+0x478>)
 8002d2c:	e000      	b.n	8002d30 <HAL_ADC_ConfigChannel+0x41c>
 8002d2e:	4b18      	ldr	r3, [pc, #96]	; (8002d90 <HAL_ADC_ConfigChannel+0x47c>)
 8002d30:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2b10      	cmp	r3, #16
 8002d38:	d105      	bne.n	8002d46 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002d3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d015      	beq.n	8002d72 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002d4a:	2b11      	cmp	r3, #17
 8002d4c:	d105      	bne.n	8002d5a <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002d4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00b      	beq.n	8002d72 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002d5e:	2b12      	cmp	r3, #18
 8002d60:	f040 80ac 	bne.w	8002ebc <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002d64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f040 80a5 	bne.w	8002ebc <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d7a:	d10b      	bne.n	8002d94 <HAL_ADC_ConfigChannel+0x480>
 8002d7c:	4b02      	ldr	r3, [pc, #8]	; (8002d88 <HAL_ADC_ConfigChannel+0x474>)
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	e023      	b.n	8002dca <HAL_ADC_ConfigChannel+0x4b6>
 8002d82:	bf00      	nop
 8002d84:	83fff000 	.word	0x83fff000
 8002d88:	50000100 	.word	0x50000100
 8002d8c:	50000300 	.word	0x50000300
 8002d90:	50000700 	.word	0x50000700
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a4e      	ldr	r2, [pc, #312]	; (8002ed4 <HAL_ADC_ConfigChannel+0x5c0>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d103      	bne.n	8002da6 <HAL_ADC_ConfigChannel+0x492>
 8002d9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	e011      	b.n	8002dca <HAL_ADC_ConfigChannel+0x4b6>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a4b      	ldr	r2, [pc, #300]	; (8002ed8 <HAL_ADC_ConfigChannel+0x5c4>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d102      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x4a2>
 8002db0:	4b4a      	ldr	r3, [pc, #296]	; (8002edc <HAL_ADC_ConfigChannel+0x5c8>)
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	e009      	b.n	8002dca <HAL_ADC_ConfigChannel+0x4b6>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a48      	ldr	r2, [pc, #288]	; (8002edc <HAL_ADC_ConfigChannel+0x5c8>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d102      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x4b2>
 8002dc0:	4b45      	ldr	r3, [pc, #276]	; (8002ed8 <HAL_ADC_ConfigChannel+0x5c4>)
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	e001      	b.n	8002dca <HAL_ADC_ConfigChannel+0x4b6>
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f003 0303 	and.w	r3, r3, #3
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d108      	bne.n	8002dea <HAL_ADC_ConfigChannel+0x4d6>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d101      	bne.n	8002dea <HAL_ADC_ConfigChannel+0x4d6>
 8002de6:	2301      	movs	r3, #1
 8002de8:	e000      	b.n	8002dec <HAL_ADC_ConfigChannel+0x4d8>
 8002dea:	2300      	movs	r3, #0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d150      	bne.n	8002e92 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002df0:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d010      	beq.n	8002e18 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 0303 	and.w	r3, r3, #3
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d107      	bne.n	8002e12 <HAL_ADC_ConfigChannel+0x4fe>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d101      	bne.n	8002e12 <HAL_ADC_ConfigChannel+0x4fe>
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x500>
 8002e12:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d13c      	bne.n	8002e92 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2b10      	cmp	r3, #16
 8002e1e:	d11d      	bne.n	8002e5c <HAL_ADC_ConfigChannel+0x548>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e28:	d118      	bne.n	8002e5c <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002e2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002e32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e34:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e36:	4b2a      	ldr	r3, [pc, #168]	; (8002ee0 <HAL_ADC_ConfigChannel+0x5cc>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a2a      	ldr	r2, [pc, #168]	; (8002ee4 <HAL_ADC_ConfigChannel+0x5d0>)
 8002e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e40:	0c9a      	lsrs	r2, r3, #18
 8002e42:	4613      	mov	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e4c:	e002      	b.n	8002e54 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	3b01      	subs	r3, #1
 8002e52:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1f9      	bne.n	8002e4e <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002e5a:	e02e      	b.n	8002eba <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2b11      	cmp	r3, #17
 8002e62:	d10b      	bne.n	8002e7c <HAL_ADC_ConfigChannel+0x568>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e6c:	d106      	bne.n	8002e7c <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002e6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002e76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e78:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002e7a:	e01e      	b.n	8002eba <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b12      	cmp	r3, #18
 8002e82:	d11a      	bne.n	8002eba <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002e84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002e8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e8e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002e90:	e013      	b.n	8002eba <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	f043 0220 	orr.w	r2, r3, #32
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002ea4:	e00a      	b.n	8002ebc <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	f043 0220 	orr.w	r2, r3, #32
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002eb8:	e000      	b.n	8002ebc <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002eba:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002ec4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	376c      	adds	r7, #108	; 0x6c
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	50000100 	.word	0x50000100
 8002ed8:	50000400 	.word	0x50000400
 8002edc:	50000500 	.word	0x50000500
 8002ee0:	20000000 	.word	0x20000000
 8002ee4:	431bde83 	.word	0x431bde83

08002ee8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 0303 	and.w	r3, r3, #3
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d108      	bne.n	8002f14 <ADC_Enable+0x2c>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d101      	bne.n	8002f14 <ADC_Enable+0x2c>
 8002f10:	2301      	movs	r3, #1
 8002f12:	e000      	b.n	8002f16 <ADC_Enable+0x2e>
 8002f14:	2300      	movs	r3, #0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d143      	bne.n	8002fa2 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	4b22      	ldr	r3, [pc, #136]	; (8002fac <ADC_Enable+0xc4>)
 8002f22:	4013      	ands	r3, r2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00d      	beq.n	8002f44 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2c:	f043 0210 	orr.w	r2, r3, #16
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f38:	f043 0201 	orr.w	r2, r3, #1
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e02f      	b.n	8002fa4 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689a      	ldr	r2, [r3, #8]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f042 0201 	orr.w	r2, r2, #1
 8002f52:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002f54:	f7ff f88e 	bl	8002074 <HAL_GetTick>
 8002f58:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002f5a:	e01b      	b.n	8002f94 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f5c:	f7ff f88a 	bl	8002074 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d914      	bls.n	8002f94 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d00d      	beq.n	8002f94 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7c:	f043 0210 	orr.w	r2, r3, #16
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f88:	f043 0201 	orr.w	r2, r3, #1
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e007      	b.n	8002fa4 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d1dc      	bne.n	8002f5c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	8000003f 	.word	0x8000003f

08002fb0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 0303 	and.w	r3, r3, #3
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d108      	bne.n	8002fdc <ADC_Disable+0x2c>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d101      	bne.n	8002fdc <ADC_Disable+0x2c>
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e000      	b.n	8002fde <ADC_Disable+0x2e>
 8002fdc:	2300      	movs	r3, #0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d047      	beq.n	8003072 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 030d 	and.w	r3, r3, #13
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d10f      	bne.n	8003010 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689a      	ldr	r2, [r3, #8]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0202 	orr.w	r2, r2, #2
 8002ffe:	609a      	str	r2, [r3, #8]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2203      	movs	r2, #3
 8003006:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003008:	f7ff f834 	bl	8002074 <HAL_GetTick>
 800300c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800300e:	e029      	b.n	8003064 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003014:	f043 0210 	orr.w	r2, r3, #16
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003020:	f043 0201 	orr.w	r2, r3, #1
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e023      	b.n	8003074 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800302c:	f7ff f822 	bl	8002074 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d914      	bls.n	8003064 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	2b01      	cmp	r3, #1
 8003046:	d10d      	bne.n	8003064 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304c:	f043 0210 	orr.w	r2, r3, #16
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003058:	f043 0201 	orr.w	r2, r3, #1
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e007      	b.n	8003074 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b01      	cmp	r3, #1
 8003070:	d0dc      	beq.n	800302c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800308c:	4b0c      	ldr	r3, [pc, #48]	; (80030c0 <__NVIC_SetPriorityGrouping+0x44>)
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003098:	4013      	ands	r3, r2
 800309a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030ae:	4a04      	ldr	r2, [pc, #16]	; (80030c0 <__NVIC_SetPriorityGrouping+0x44>)
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	60d3      	str	r3, [r2, #12]
}
 80030b4:	bf00      	nop
 80030b6:	3714      	adds	r7, #20
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	e000ed00 	.word	0xe000ed00

080030c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030c8:	4b04      	ldr	r3, [pc, #16]	; (80030dc <__NVIC_GetPriorityGrouping+0x18>)
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	0a1b      	lsrs	r3, r3, #8
 80030ce:	f003 0307 	and.w	r3, r3, #7
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	e000ed00 	.word	0xe000ed00

080030e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	4603      	mov	r3, r0
 80030e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	db0b      	blt.n	800310a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030f2:	79fb      	ldrb	r3, [r7, #7]
 80030f4:	f003 021f 	and.w	r2, r3, #31
 80030f8:	4907      	ldr	r1, [pc, #28]	; (8003118 <__NVIC_EnableIRQ+0x38>)
 80030fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fe:	095b      	lsrs	r3, r3, #5
 8003100:	2001      	movs	r0, #1
 8003102:	fa00 f202 	lsl.w	r2, r0, r2
 8003106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800310a:	bf00      	nop
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	e000e100 	.word	0xe000e100

0800311c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	4603      	mov	r3, r0
 8003124:	6039      	str	r1, [r7, #0]
 8003126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312c:	2b00      	cmp	r3, #0
 800312e:	db0a      	blt.n	8003146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	b2da      	uxtb	r2, r3
 8003134:	490c      	ldr	r1, [pc, #48]	; (8003168 <__NVIC_SetPriority+0x4c>)
 8003136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313a:	0112      	lsls	r2, r2, #4
 800313c:	b2d2      	uxtb	r2, r2
 800313e:	440b      	add	r3, r1
 8003140:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003144:	e00a      	b.n	800315c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	b2da      	uxtb	r2, r3
 800314a:	4908      	ldr	r1, [pc, #32]	; (800316c <__NVIC_SetPriority+0x50>)
 800314c:	79fb      	ldrb	r3, [r7, #7]
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	3b04      	subs	r3, #4
 8003154:	0112      	lsls	r2, r2, #4
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	440b      	add	r3, r1
 800315a:	761a      	strb	r2, [r3, #24]
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	e000e100 	.word	0xe000e100
 800316c:	e000ed00 	.word	0xe000ed00

08003170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003170:	b480      	push	{r7}
 8003172:	b089      	sub	sp, #36	; 0x24
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f003 0307 	and.w	r3, r3, #7
 8003182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	f1c3 0307 	rsb	r3, r3, #7
 800318a:	2b04      	cmp	r3, #4
 800318c:	bf28      	it	cs
 800318e:	2304      	movcs	r3, #4
 8003190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	3304      	adds	r3, #4
 8003196:	2b06      	cmp	r3, #6
 8003198:	d902      	bls.n	80031a0 <NVIC_EncodePriority+0x30>
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	3b03      	subs	r3, #3
 800319e:	e000      	b.n	80031a2 <NVIC_EncodePriority+0x32>
 80031a0:	2300      	movs	r3, #0
 80031a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031a4:	f04f 32ff 	mov.w	r2, #4294967295
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	43da      	mvns	r2, r3
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	401a      	ands	r2, r3
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031b8:	f04f 31ff 	mov.w	r1, #4294967295
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	fa01 f303 	lsl.w	r3, r1, r3
 80031c2:	43d9      	mvns	r1, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c8:	4313      	orrs	r3, r2
         );
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3724      	adds	r7, #36	; 0x24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
	...

080031d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3b01      	subs	r3, #1
 80031e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031e8:	d301      	bcc.n	80031ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031ea:	2301      	movs	r3, #1
 80031ec:	e00f      	b.n	800320e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031ee:	4a0a      	ldr	r2, [pc, #40]	; (8003218 <SysTick_Config+0x40>)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3b01      	subs	r3, #1
 80031f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031f6:	210f      	movs	r1, #15
 80031f8:	f04f 30ff 	mov.w	r0, #4294967295
 80031fc:	f7ff ff8e 	bl	800311c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003200:	4b05      	ldr	r3, [pc, #20]	; (8003218 <SysTick_Config+0x40>)
 8003202:	2200      	movs	r2, #0
 8003204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003206:	4b04      	ldr	r3, [pc, #16]	; (8003218 <SysTick_Config+0x40>)
 8003208:	2207      	movs	r2, #7
 800320a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	e000e010 	.word	0xe000e010

0800321c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f7ff ff29 	bl	800307c <__NVIC_SetPriorityGrouping>
}
 800322a:	bf00      	nop
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b086      	sub	sp, #24
 8003236:	af00      	add	r7, sp, #0
 8003238:	4603      	mov	r3, r0
 800323a:	60b9      	str	r1, [r7, #8]
 800323c:	607a      	str	r2, [r7, #4]
 800323e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003240:	2300      	movs	r3, #0
 8003242:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003244:	f7ff ff3e 	bl	80030c4 <__NVIC_GetPriorityGrouping>
 8003248:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	68b9      	ldr	r1, [r7, #8]
 800324e:	6978      	ldr	r0, [r7, #20]
 8003250:	f7ff ff8e 	bl	8003170 <NVIC_EncodePriority>
 8003254:	4602      	mov	r2, r0
 8003256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800325a:	4611      	mov	r1, r2
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff ff5d 	bl	800311c <__NVIC_SetPriority>
}
 8003262:	bf00      	nop
 8003264:	3718      	adds	r7, #24
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b082      	sub	sp, #8
 800326e:	af00      	add	r7, sp, #0
 8003270:	4603      	mov	r3, r0
 8003272:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff ff31 	bl	80030e0 <__NVIC_EnableIRQ>
}
 800327e:	bf00      	nop
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b082      	sub	sp, #8
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7ff ffa2 	bl	80031d8 <SysTick_Config>
 8003294:	4603      	mov	r3, r0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
	...

080032a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b087      	sub	sp, #28
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032aa:	2300      	movs	r3, #0
 80032ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032ae:	e160      	b.n	8003572 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	2101      	movs	r1, #1
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	fa01 f303 	lsl.w	r3, r1, r3
 80032bc:	4013      	ands	r3, r2
 80032be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 8152 	beq.w	800356c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f003 0303 	and.w	r3, r3, #3
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d005      	beq.n	80032e0 <HAL_GPIO_Init+0x40>
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f003 0303 	and.w	r3, r3, #3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d130      	bne.n	8003342 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	2203      	movs	r2, #3
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	43db      	mvns	r3, r3
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	4013      	ands	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	68da      	ldr	r2, [r3, #12]
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	4313      	orrs	r3, r2
 8003308:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003316:	2201      	movs	r2, #1
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	43db      	mvns	r3, r3
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	4013      	ands	r3, r2
 8003324:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	091b      	lsrs	r3, r3, #4
 800332c:	f003 0201 	and.w	r2, r3, #1
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	4313      	orrs	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	2b03      	cmp	r3, #3
 800334c:	d017      	beq.n	800337e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	2203      	movs	r2, #3
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	43db      	mvns	r3, r3
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	4013      	ands	r3, r2
 8003364:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	689a      	ldr	r2, [r3, #8]
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	fa02 f303 	lsl.w	r3, r2, r3
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	4313      	orrs	r3, r2
 8003376:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d123      	bne.n	80033d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	08da      	lsrs	r2, r3, #3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	3208      	adds	r2, #8
 8003392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003396:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	220f      	movs	r2, #15
 80033a2:	fa02 f303 	lsl.w	r3, r2, r3
 80033a6:	43db      	mvns	r3, r3
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	4013      	ands	r3, r2
 80033ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	691a      	ldr	r2, [r3, #16]
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	f003 0307 	and.w	r3, r3, #7
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	08da      	lsrs	r2, r3, #3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	3208      	adds	r2, #8
 80033cc:	6939      	ldr	r1, [r7, #16]
 80033ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	2203      	movs	r2, #3
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	43db      	mvns	r3, r3
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	4013      	ands	r3, r2
 80033e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f003 0203 	and.w	r2, r3, #3
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	fa02 f303 	lsl.w	r3, r2, r3
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 80ac 	beq.w	800356c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003414:	4b5e      	ldr	r3, [pc, #376]	; (8003590 <HAL_GPIO_Init+0x2f0>)
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	4a5d      	ldr	r2, [pc, #372]	; (8003590 <HAL_GPIO_Init+0x2f0>)
 800341a:	f043 0301 	orr.w	r3, r3, #1
 800341e:	6193      	str	r3, [r2, #24]
 8003420:	4b5b      	ldr	r3, [pc, #364]	; (8003590 <HAL_GPIO_Init+0x2f0>)
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	60bb      	str	r3, [r7, #8]
 800342a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800342c:	4a59      	ldr	r2, [pc, #356]	; (8003594 <HAL_GPIO_Init+0x2f4>)
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	089b      	lsrs	r3, r3, #2
 8003432:	3302      	adds	r3, #2
 8003434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003438:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	f003 0303 	and.w	r3, r3, #3
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	220f      	movs	r2, #15
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	43db      	mvns	r3, r3
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	4013      	ands	r3, r2
 800344e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003456:	d025      	beq.n	80034a4 <HAL_GPIO_Init+0x204>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a4f      	ldr	r2, [pc, #316]	; (8003598 <HAL_GPIO_Init+0x2f8>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d01f      	beq.n	80034a0 <HAL_GPIO_Init+0x200>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a4e      	ldr	r2, [pc, #312]	; (800359c <HAL_GPIO_Init+0x2fc>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d019      	beq.n	800349c <HAL_GPIO_Init+0x1fc>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a4d      	ldr	r2, [pc, #308]	; (80035a0 <HAL_GPIO_Init+0x300>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d013      	beq.n	8003498 <HAL_GPIO_Init+0x1f8>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a4c      	ldr	r2, [pc, #304]	; (80035a4 <HAL_GPIO_Init+0x304>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d00d      	beq.n	8003494 <HAL_GPIO_Init+0x1f4>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a4b      	ldr	r2, [pc, #300]	; (80035a8 <HAL_GPIO_Init+0x308>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d007      	beq.n	8003490 <HAL_GPIO_Init+0x1f0>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a4a      	ldr	r2, [pc, #296]	; (80035ac <HAL_GPIO_Init+0x30c>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d101      	bne.n	800348c <HAL_GPIO_Init+0x1ec>
 8003488:	2306      	movs	r3, #6
 800348a:	e00c      	b.n	80034a6 <HAL_GPIO_Init+0x206>
 800348c:	2307      	movs	r3, #7
 800348e:	e00a      	b.n	80034a6 <HAL_GPIO_Init+0x206>
 8003490:	2305      	movs	r3, #5
 8003492:	e008      	b.n	80034a6 <HAL_GPIO_Init+0x206>
 8003494:	2304      	movs	r3, #4
 8003496:	e006      	b.n	80034a6 <HAL_GPIO_Init+0x206>
 8003498:	2303      	movs	r3, #3
 800349a:	e004      	b.n	80034a6 <HAL_GPIO_Init+0x206>
 800349c:	2302      	movs	r3, #2
 800349e:	e002      	b.n	80034a6 <HAL_GPIO_Init+0x206>
 80034a0:	2301      	movs	r3, #1
 80034a2:	e000      	b.n	80034a6 <HAL_GPIO_Init+0x206>
 80034a4:	2300      	movs	r3, #0
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	f002 0203 	and.w	r2, r2, #3
 80034ac:	0092      	lsls	r2, r2, #2
 80034ae:	4093      	lsls	r3, r2
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034b6:	4937      	ldr	r1, [pc, #220]	; (8003594 <HAL_GPIO_Init+0x2f4>)
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	089b      	lsrs	r3, r3, #2
 80034bc:	3302      	adds	r3, #2
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034c4:	4b3a      	ldr	r3, [pc, #232]	; (80035b0 <HAL_GPIO_Init+0x310>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	43db      	mvns	r3, r3
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	4013      	ands	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d003      	beq.n	80034e8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80034e8:	4a31      	ldr	r2, [pc, #196]	; (80035b0 <HAL_GPIO_Init+0x310>)
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034ee:	4b30      	ldr	r3, [pc, #192]	; (80035b0 <HAL_GPIO_Init+0x310>)
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	43db      	mvns	r3, r3
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	4013      	ands	r3, r2
 80034fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4313      	orrs	r3, r2
 8003510:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003512:	4a27      	ldr	r2, [pc, #156]	; (80035b0 <HAL_GPIO_Init+0x310>)
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003518:	4b25      	ldr	r3, [pc, #148]	; (80035b0 <HAL_GPIO_Init+0x310>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	43db      	mvns	r3, r3
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	4013      	ands	r3, r2
 8003526:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d003      	beq.n	800353c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	4313      	orrs	r3, r2
 800353a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800353c:	4a1c      	ldr	r2, [pc, #112]	; (80035b0 <HAL_GPIO_Init+0x310>)
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003542:	4b1b      	ldr	r3, [pc, #108]	; (80035b0 <HAL_GPIO_Init+0x310>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	43db      	mvns	r3, r3
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	4013      	ands	r3, r2
 8003550:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	4313      	orrs	r3, r2
 8003564:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003566:	4a12      	ldr	r2, [pc, #72]	; (80035b0 <HAL_GPIO_Init+0x310>)
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	3301      	adds	r3, #1
 8003570:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	fa22 f303 	lsr.w	r3, r2, r3
 800357c:	2b00      	cmp	r3, #0
 800357e:	f47f ae97 	bne.w	80032b0 <HAL_GPIO_Init+0x10>
  }
}
 8003582:	bf00      	nop
 8003584:	bf00      	nop
 8003586:	371c      	adds	r7, #28
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr
 8003590:	40021000 	.word	0x40021000
 8003594:	40010000 	.word	0x40010000
 8003598:	48000400 	.word	0x48000400
 800359c:	48000800 	.word	0x48000800
 80035a0:	48000c00 	.word	0x48000c00
 80035a4:	48001000 	.word	0x48001000
 80035a8:	48001400 	.word	0x48001400
 80035ac:	48001800 	.word	0x48001800
 80035b0:	40010400 	.word	0x40010400

080035b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	460b      	mov	r3, r1
 80035be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	691a      	ldr	r2, [r3, #16]
 80035c4:	887b      	ldrh	r3, [r7, #2]
 80035c6:	4013      	ands	r3, r2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d002      	beq.n	80035d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035cc:	2301      	movs	r3, #1
 80035ce:	73fb      	strb	r3, [r7, #15]
 80035d0:	e001      	b.n	80035d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035d2:	2300      	movs	r3, #0
 80035d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3714      	adds	r7, #20
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	460b      	mov	r3, r1
 80035ee:	807b      	strh	r3, [r7, #2]
 80035f0:	4613      	mov	r3, r2
 80035f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035f4:	787b      	ldrb	r3, [r7, #1]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035fa:	887a      	ldrh	r2, [r7, #2]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003600:	e002      	b.n	8003608 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003602:	887a      	ldrh	r2, [r7, #2]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	4603      	mov	r3, r0
 800361c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800361e:	4b08      	ldr	r3, [pc, #32]	; (8003640 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003620:	695a      	ldr	r2, [r3, #20]
 8003622:	88fb      	ldrh	r3, [r7, #6]
 8003624:	4013      	ands	r3, r2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d006      	beq.n	8003638 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800362a:	4a05      	ldr	r2, [pc, #20]	; (8003640 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800362c:	88fb      	ldrh	r3, [r7, #6]
 800362e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003630:	88fb      	ldrh	r3, [r7, #6]
 8003632:	4618      	mov	r0, r3
 8003634:	f7fd fc28 	bl	8000e88 <HAL_GPIO_EXTI_Callback>
  }
}
 8003638:	bf00      	nop
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	40010400 	.word	0x40010400

08003644 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e081      	b.n	800375a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d106      	bne.n	8003670 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f7fe f9e0 	bl	8001a30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2224      	movs	r2, #36	; 0x24
 8003674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 0201 	bic.w	r2, r2, #1
 8003686:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003694:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689a      	ldr	r2, [r3, #8]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d107      	bne.n	80036be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689a      	ldr	r2, [r3, #8]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036ba:	609a      	str	r2, [r3, #8]
 80036bc:	e006      	b.n	80036cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689a      	ldr	r2, [r3, #8]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80036ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d104      	bne.n	80036de <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	6812      	ldr	r2, [r2, #0]
 80036e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80036ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68da      	ldr	r2, [r3, #12]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003700:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	691a      	ldr	r2, [r3, #16]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	430a      	orrs	r2, r1
 800371a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	69d9      	ldr	r1, [r3, #28]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a1a      	ldr	r2, [r3, #32]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f042 0201 	orr.w	r2, r2, #1
 800373a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2220      	movs	r2, #32
 8003746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
	...

08003764 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b088      	sub	sp, #32
 8003768:	af02      	add	r7, sp, #8
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	4608      	mov	r0, r1
 800376e:	4611      	mov	r1, r2
 8003770:	461a      	mov	r2, r3
 8003772:	4603      	mov	r3, r0
 8003774:	817b      	strh	r3, [r7, #10]
 8003776:	460b      	mov	r3, r1
 8003778:	813b      	strh	r3, [r7, #8]
 800377a:	4613      	mov	r3, r2
 800377c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b20      	cmp	r3, #32
 8003788:	f040 80f9 	bne.w	800397e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800378c:	6a3b      	ldr	r3, [r7, #32]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d002      	beq.n	8003798 <HAL_I2C_Mem_Write+0x34>
 8003792:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003794:	2b00      	cmp	r3, #0
 8003796:	d105      	bne.n	80037a4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800379e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e0ed      	b.n	8003980 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d101      	bne.n	80037b2 <HAL_I2C_Mem_Write+0x4e>
 80037ae:	2302      	movs	r3, #2
 80037b0:	e0e6      	b.n	8003980 <HAL_I2C_Mem_Write+0x21c>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037ba:	f7fe fc5b 	bl	8002074 <HAL_GetTick>
 80037be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	9300      	str	r3, [sp, #0]
 80037c4:	2319      	movs	r3, #25
 80037c6:	2201      	movs	r2, #1
 80037c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f000 fac3 	bl	8003d58 <I2C_WaitOnFlagUntilTimeout>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e0d1      	b.n	8003980 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2221      	movs	r2, #33	; 0x21
 80037e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2240      	movs	r2, #64	; 0x40
 80037e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6a3a      	ldr	r2, [r7, #32]
 80037f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80037fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003804:	88f8      	ldrh	r0, [r7, #6]
 8003806:	893a      	ldrh	r2, [r7, #8]
 8003808:	8979      	ldrh	r1, [r7, #10]
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	9301      	str	r3, [sp, #4]
 800380e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	4603      	mov	r3, r0
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 f9d3 	bl	8003bc0 <I2C_RequestMemoryWrite>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d005      	beq.n	800382c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e0a9      	b.n	8003980 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003830:	b29b      	uxth	r3, r3
 8003832:	2bff      	cmp	r3, #255	; 0xff
 8003834:	d90e      	bls.n	8003854 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	22ff      	movs	r2, #255	; 0xff
 800383a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003840:	b2da      	uxtb	r2, r3
 8003842:	8979      	ldrh	r1, [r7, #10]
 8003844:	2300      	movs	r3, #0
 8003846:	9300      	str	r3, [sp, #0]
 8003848:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f000 fc3d 	bl	80040cc <I2C_TransferConfig>
 8003852:	e00f      	b.n	8003874 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003858:	b29a      	uxth	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003862:	b2da      	uxtb	r2, r3
 8003864:	8979      	ldrh	r1, [r7, #10]
 8003866:	2300      	movs	r3, #0
 8003868:	9300      	str	r3, [sp, #0]
 800386a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f000 fc2c 	bl	80040cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003874:	697a      	ldr	r2, [r7, #20]
 8003876:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 fabc 	bl	8003df6 <I2C_WaitOnTXISFlagUntilTimeout>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e07b      	b.n	8003980 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	781a      	ldrb	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	1c5a      	adds	r2, r3, #1
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	3b01      	subs	r3, #1
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b0:	3b01      	subs	r3, #1
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038bc:	b29b      	uxth	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d034      	beq.n	800392c <HAL_I2C_Mem_Write+0x1c8>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d130      	bne.n	800392c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	9300      	str	r3, [sp, #0]
 80038ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d0:	2200      	movs	r2, #0
 80038d2:	2180      	movs	r1, #128	; 0x80
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f000 fa3f 	bl	8003d58 <I2C_WaitOnFlagUntilTimeout>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d001      	beq.n	80038e4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e04d      	b.n	8003980 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	2bff      	cmp	r3, #255	; 0xff
 80038ec:	d90e      	bls.n	800390c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	22ff      	movs	r2, #255	; 0xff
 80038f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	8979      	ldrh	r1, [r7, #10]
 80038fc:	2300      	movs	r3, #0
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 fbe1 	bl	80040cc <I2C_TransferConfig>
 800390a:	e00f      	b.n	800392c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003910:	b29a      	uxth	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800391a:	b2da      	uxtb	r2, r3
 800391c:	8979      	ldrh	r1, [r7, #10]
 800391e:	2300      	movs	r3, #0
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f000 fbd0 	bl	80040cc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003930:	b29b      	uxth	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d19e      	bne.n	8003874 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f000 faa2 	bl	8003e84 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e01a      	b.n	8003980 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2220      	movs	r2, #32
 8003950:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6859      	ldr	r1, [r3, #4]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	4b0a      	ldr	r3, [pc, #40]	; (8003988 <HAL_I2C_Mem_Write+0x224>)
 800395e:	400b      	ands	r3, r1
 8003960:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2220      	movs	r2, #32
 8003966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800397a:	2300      	movs	r3, #0
 800397c:	e000      	b.n	8003980 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800397e:	2302      	movs	r3, #2
  }
}
 8003980:	4618      	mov	r0, r3
 8003982:	3718      	adds	r7, #24
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	fe00e800 	.word	0xfe00e800

0800398c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b088      	sub	sp, #32
 8003990:	af02      	add	r7, sp, #8
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	4608      	mov	r0, r1
 8003996:	4611      	mov	r1, r2
 8003998:	461a      	mov	r2, r3
 800399a:	4603      	mov	r3, r0
 800399c:	817b      	strh	r3, [r7, #10]
 800399e:	460b      	mov	r3, r1
 80039a0:	813b      	strh	r3, [r7, #8]
 80039a2:	4613      	mov	r3, r2
 80039a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b20      	cmp	r3, #32
 80039b0:	f040 80fd 	bne.w	8003bae <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80039b4:	6a3b      	ldr	r3, [r7, #32]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d002      	beq.n	80039c0 <HAL_I2C_Mem_Read+0x34>
 80039ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d105      	bne.n	80039cc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039c6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e0f1      	b.n	8003bb0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d101      	bne.n	80039da <HAL_I2C_Mem_Read+0x4e>
 80039d6:	2302      	movs	r3, #2
 80039d8:	e0ea      	b.n	8003bb0 <HAL_I2C_Mem_Read+0x224>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80039e2:	f7fe fb47 	bl	8002074 <HAL_GetTick>
 80039e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	2319      	movs	r3, #25
 80039ee:	2201      	movs	r2, #1
 80039f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f000 f9af 	bl	8003d58 <I2C_WaitOnFlagUntilTimeout>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d001      	beq.n	8003a04 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e0d5      	b.n	8003bb0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2222      	movs	r2, #34	; 0x22
 8003a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2240      	movs	r2, #64	; 0x40
 8003a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6a3a      	ldr	r2, [r7, #32]
 8003a1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a2c:	88f8      	ldrh	r0, [r7, #6]
 8003a2e:	893a      	ldrh	r2, [r7, #8]
 8003a30:	8979      	ldrh	r1, [r7, #10]
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	9301      	str	r3, [sp, #4]
 8003a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f000 f913 	bl	8003c68 <I2C_RequestMemoryRead>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d005      	beq.n	8003a54 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e0ad      	b.n	8003bb0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	2bff      	cmp	r3, #255	; 0xff
 8003a5c:	d90e      	bls.n	8003a7c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	22ff      	movs	r2, #255	; 0xff
 8003a62:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a68:	b2da      	uxtb	r2, r3
 8003a6a:	8979      	ldrh	r1, [r7, #10]
 8003a6c:	4b52      	ldr	r3, [pc, #328]	; (8003bb8 <HAL_I2C_Mem_Read+0x22c>)
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f000 fb29 	bl	80040cc <I2C_TransferConfig>
 8003a7a:	e00f      	b.n	8003a9c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a8a:	b2da      	uxtb	r2, r3
 8003a8c:	8979      	ldrh	r1, [r7, #10]
 8003a8e:	4b4a      	ldr	r3, [pc, #296]	; (8003bb8 <HAL_I2C_Mem_Read+0x22c>)
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f000 fb18 	bl	80040cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	2104      	movs	r1, #4
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 f956 	bl	8003d58 <I2C_WaitOnFlagUntilTimeout>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e07c      	b.n	8003bb0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	b2d2      	uxtb	r2, r2
 8003ac2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac8:	1c5a      	adds	r2, r3, #1
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d034      	beq.n	8003b5c <HAL_I2C_Mem_Read+0x1d0>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d130      	bne.n	8003b5c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b00:	2200      	movs	r2, #0
 8003b02:	2180      	movs	r1, #128	; 0x80
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f000 f927 	bl	8003d58 <I2C_WaitOnFlagUntilTimeout>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e04d      	b.n	8003bb0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	2bff      	cmp	r3, #255	; 0xff
 8003b1c:	d90e      	bls.n	8003b3c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	22ff      	movs	r2, #255	; 0xff
 8003b22:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b28:	b2da      	uxtb	r2, r3
 8003b2a:	8979      	ldrh	r1, [r7, #10]
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	9300      	str	r3, [sp, #0]
 8003b30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f000 fac9 	bl	80040cc <I2C_TransferConfig>
 8003b3a:	e00f      	b.n	8003b5c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b4a:	b2da      	uxtb	r2, r3
 8003b4c:	8979      	ldrh	r1, [r7, #10]
 8003b4e:	2300      	movs	r3, #0
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f000 fab8 	bl	80040cc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d19a      	bne.n	8003a9c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 f98a 	bl	8003e84 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e01a      	b.n	8003bb0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	6859      	ldr	r1, [r3, #4]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	4b0b      	ldr	r3, [pc, #44]	; (8003bbc <HAL_I2C_Mem_Read+0x230>)
 8003b8e:	400b      	ands	r3, r1
 8003b90:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2220      	movs	r2, #32
 8003b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003baa:	2300      	movs	r3, #0
 8003bac:	e000      	b.n	8003bb0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003bae:	2302      	movs	r3, #2
  }
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3718      	adds	r7, #24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	80002400 	.word	0x80002400
 8003bbc:	fe00e800 	.word	0xfe00e800

08003bc0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af02      	add	r7, sp, #8
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	4608      	mov	r0, r1
 8003bca:	4611      	mov	r1, r2
 8003bcc:	461a      	mov	r2, r3
 8003bce:	4603      	mov	r3, r0
 8003bd0:	817b      	strh	r3, [r7, #10]
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	813b      	strh	r3, [r7, #8]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003bda:	88fb      	ldrh	r3, [r7, #6]
 8003bdc:	b2da      	uxtb	r2, r3
 8003bde:	8979      	ldrh	r1, [r7, #10]
 8003be0:	4b20      	ldr	r3, [pc, #128]	; (8003c64 <I2C_RequestMemoryWrite+0xa4>)
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f000 fa6f 	bl	80040cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bee:	69fa      	ldr	r2, [r7, #28]
 8003bf0:	69b9      	ldr	r1, [r7, #24]
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 f8ff 	bl	8003df6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e02c      	b.n	8003c5c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c02:	88fb      	ldrh	r3, [r7, #6]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d105      	bne.n	8003c14 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c08:	893b      	ldrh	r3, [r7, #8]
 8003c0a:	b2da      	uxtb	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	629a      	str	r2, [r3, #40]	; 0x28
 8003c12:	e015      	b.n	8003c40 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c14:	893b      	ldrh	r3, [r7, #8]
 8003c16:	0a1b      	lsrs	r3, r3, #8
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c22:	69fa      	ldr	r2, [r7, #28]
 8003c24:	69b9      	ldr	r1, [r7, #24]
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f000 f8e5 	bl	8003df6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e012      	b.n	8003c5c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c36:	893b      	ldrh	r3, [r7, #8]
 8003c38:	b2da      	uxtb	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	2200      	movs	r2, #0
 8003c48:	2180      	movs	r1, #128	; 0x80
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 f884 	bl	8003d58 <I2C_WaitOnFlagUntilTimeout>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e000      	b.n	8003c5c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	80002000 	.word	0x80002000

08003c68 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af02      	add	r7, sp, #8
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	4608      	mov	r0, r1
 8003c72:	4611      	mov	r1, r2
 8003c74:	461a      	mov	r2, r3
 8003c76:	4603      	mov	r3, r0
 8003c78:	817b      	strh	r3, [r7, #10]
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	813b      	strh	r3, [r7, #8]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003c82:	88fb      	ldrh	r3, [r7, #6]
 8003c84:	b2da      	uxtb	r2, r3
 8003c86:	8979      	ldrh	r1, [r7, #10]
 8003c88:	4b20      	ldr	r3, [pc, #128]	; (8003d0c <I2C_RequestMemoryRead+0xa4>)
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f000 fa1c 	bl	80040cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c94:	69fa      	ldr	r2, [r7, #28]
 8003c96:	69b9      	ldr	r1, [r7, #24]
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f000 f8ac 	bl	8003df6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e02c      	b.n	8003d02 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ca8:	88fb      	ldrh	r3, [r7, #6]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d105      	bne.n	8003cba <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cae:	893b      	ldrh	r3, [r7, #8]
 8003cb0:	b2da      	uxtb	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	629a      	str	r2, [r3, #40]	; 0x28
 8003cb8:	e015      	b.n	8003ce6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003cba:	893b      	ldrh	r3, [r7, #8]
 8003cbc:	0a1b      	lsrs	r3, r3, #8
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	b2da      	uxtb	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cc8:	69fa      	ldr	r2, [r7, #28]
 8003cca:	69b9      	ldr	r1, [r7, #24]
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f000 f892 	bl	8003df6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e012      	b.n	8003d02 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cdc:	893b      	ldrh	r3, [r7, #8]
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	2200      	movs	r2, #0
 8003cee:	2140      	movs	r1, #64	; 0x40
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f000 f831 	bl	8003d58 <I2C_WaitOnFlagUntilTimeout>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e000      	b.n	8003d02 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	80002000 	.word	0x80002000

08003d10 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d103      	bne.n	8003d2e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d007      	beq.n	8003d4c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	699a      	ldr	r2, [r3, #24]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 0201 	orr.w	r2, r2, #1
 8003d4a:	619a      	str	r2, [r3, #24]
  }
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	603b      	str	r3, [r7, #0]
 8003d64:	4613      	mov	r3, r2
 8003d66:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d68:	e031      	b.n	8003dce <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d70:	d02d      	beq.n	8003dce <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d72:	f7fe f97f 	bl	8002074 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d302      	bcc.n	8003d88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d122      	bne.n	8003dce <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699a      	ldr	r2, [r3, #24]
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	4013      	ands	r3, r2
 8003d92:	68ba      	ldr	r2, [r7, #8]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	bf0c      	ite	eq
 8003d98:	2301      	moveq	r3, #1
 8003d9a:	2300      	movne	r3, #0
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	461a      	mov	r2, r3
 8003da0:	79fb      	ldrb	r3, [r7, #7]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d113      	bne.n	8003dce <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003daa:	f043 0220 	orr.w	r2, r3, #32
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2220      	movs	r2, #32
 8003db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e00f      	b.n	8003dee <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	699a      	ldr	r2, [r3, #24]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	bf0c      	ite	eq
 8003dde:	2301      	moveq	r3, #1
 8003de0:	2300      	movne	r3, #0
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	461a      	mov	r2, r3
 8003de6:	79fb      	ldrb	r3, [r7, #7]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d0be      	beq.n	8003d6a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b084      	sub	sp, #16
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	60f8      	str	r0, [r7, #12]
 8003dfe:	60b9      	str	r1, [r7, #8]
 8003e00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e02:	e033      	b.n	8003e6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	68b9      	ldr	r1, [r7, #8]
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f000 f87f 	bl	8003f0c <I2C_IsErrorOccurred>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e031      	b.n	8003e7c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1e:	d025      	beq.n	8003e6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e20:	f7fe f928 	bl	8002074 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	68ba      	ldr	r2, [r7, #8]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d302      	bcc.n	8003e36 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d11a      	bne.n	8003e6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d013      	beq.n	8003e6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e48:	f043 0220 	orr.w	r2, r3, #32
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2220      	movs	r2, #32
 8003e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e007      	b.n	8003e7c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d1c4      	bne.n	8003e04 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e90:	e02f      	b.n	8003ef2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	68b9      	ldr	r1, [r7, #8]
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f000 f838 	bl	8003f0c <I2C_IsErrorOccurred>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e02d      	b.n	8003f02 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ea6:	f7fe f8e5 	bl	8002074 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d302      	bcc.n	8003ebc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d11a      	bne.n	8003ef2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	f003 0320 	and.w	r3, r3, #32
 8003ec6:	2b20      	cmp	r3, #32
 8003ec8:	d013      	beq.n	8003ef2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ece:	f043 0220 	orr.w	r2, r3, #32
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2220      	movs	r2, #32
 8003eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e007      	b.n	8003f02 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	f003 0320 	and.w	r3, r3, #32
 8003efc:	2b20      	cmp	r3, #32
 8003efe:	d1c8      	bne.n	8003e92 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
	...

08003f0c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b08a      	sub	sp, #40	; 0x28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003f26:	2300      	movs	r3, #0
 8003f28:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	f003 0310 	and.w	r3, r3, #16
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d068      	beq.n	800400a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2210      	movs	r2, #16
 8003f3e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f40:	e049      	b.n	8003fd6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f48:	d045      	beq.n	8003fd6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f4a:	f7fe f893 	bl	8002074 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	68ba      	ldr	r2, [r7, #8]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d302      	bcc.n	8003f60 <I2C_IsErrorOccurred+0x54>
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d13a      	bne.n	8003fd6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f6a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f72:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f82:	d121      	bne.n	8003fc8 <I2C_IsErrorOccurred+0xbc>
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f8a:	d01d      	beq.n	8003fc8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003f8c:	7cfb      	ldrb	r3, [r7, #19]
 8003f8e:	2b20      	cmp	r3, #32
 8003f90:	d01a      	beq.n	8003fc8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fa0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003fa2:	f7fe f867 	bl	8002074 <HAL_GetTick>
 8003fa6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fa8:	e00e      	b.n	8003fc8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003faa:	f7fe f863 	bl	8002074 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b19      	cmp	r3, #25
 8003fb6:	d907      	bls.n	8003fc8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003fb8:	6a3b      	ldr	r3, [r7, #32]
 8003fba:	f043 0320 	orr.w	r3, r3, #32
 8003fbe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003fc6:	e006      	b.n	8003fd6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	f003 0320 	and.w	r3, r3, #32
 8003fd2:	2b20      	cmp	r3, #32
 8003fd4:	d1e9      	bne.n	8003faa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	f003 0320 	and.w	r3, r3, #32
 8003fe0:	2b20      	cmp	r3, #32
 8003fe2:	d003      	beq.n	8003fec <I2C_IsErrorOccurred+0xe0>
 8003fe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d0aa      	beq.n	8003f42 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003fec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d103      	bne.n	8003ffc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2220      	movs	r2, #32
 8003ffa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003ffc:	6a3b      	ldr	r3, [r7, #32]
 8003ffe:	f043 0304 	orr.w	r3, r3, #4
 8004002:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00b      	beq.n	8004034 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800401c:	6a3b      	ldr	r3, [r7, #32]
 800401e:	f043 0301 	orr.w	r3, r3, #1
 8004022:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f44f 7280 	mov.w	r2, #256	; 0x100
 800402c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00b      	beq.n	8004056 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800403e:	6a3b      	ldr	r3, [r7, #32]
 8004040:	f043 0308 	orr.w	r3, r3, #8
 8004044:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800404e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00b      	beq.n	8004078 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004060:	6a3b      	ldr	r3, [r7, #32]
 8004062:	f043 0302 	orr.w	r3, r3, #2
 8004066:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004070:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004078:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800407c:	2b00      	cmp	r3, #0
 800407e:	d01c      	beq.n	80040ba <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f7ff fe45 	bl	8003d10 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	6859      	ldr	r1, [r3, #4]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	4b0d      	ldr	r3, [pc, #52]	; (80040c8 <I2C_IsErrorOccurred+0x1bc>)
 8004092:	400b      	ands	r3, r1
 8004094:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800409a:	6a3b      	ldr	r3, [r7, #32]
 800409c:	431a      	orrs	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2220      	movs	r2, #32
 80040a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80040ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3728      	adds	r7, #40	; 0x28
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	fe00e800 	.word	0xfe00e800

080040cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b087      	sub	sp, #28
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	607b      	str	r3, [r7, #4]
 80040d6:	460b      	mov	r3, r1
 80040d8:	817b      	strh	r3, [r7, #10]
 80040da:	4613      	mov	r3, r2
 80040dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040de:	897b      	ldrh	r3, [r7, #10]
 80040e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80040e4:	7a7b      	ldrb	r3, [r7, #9]
 80040e6:	041b      	lsls	r3, r3, #16
 80040e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040ec:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040f2:	6a3b      	ldr	r3, [r7, #32]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80040fa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	6a3b      	ldr	r3, [r7, #32]
 8004104:	0d5b      	lsrs	r3, r3, #21
 8004106:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800410a:	4b08      	ldr	r3, [pc, #32]	; (800412c <I2C_TransferConfig+0x60>)
 800410c:	430b      	orrs	r3, r1
 800410e:	43db      	mvns	r3, r3
 8004110:	ea02 0103 	and.w	r1, r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	430a      	orrs	r2, r1
 800411c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800411e:	bf00      	nop
 8004120:	371c      	adds	r7, #28
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	03ff63ff 	.word	0x03ff63ff

08004130 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b20      	cmp	r3, #32
 8004144:	d138      	bne.n	80041b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800414c:	2b01      	cmp	r3, #1
 800414e:	d101      	bne.n	8004154 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004150:	2302      	movs	r3, #2
 8004152:	e032      	b.n	80041ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2224      	movs	r2, #36	; 0x24
 8004160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f022 0201 	bic.w	r2, r2, #1
 8004172:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004182:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6819      	ldr	r1, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f042 0201 	orr.w	r2, r2, #1
 80041a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2220      	movs	r2, #32
 80041a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	e000      	b.n	80041ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80041b8:	2302      	movs	r3, #2
  }
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b085      	sub	sp, #20
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
 80041ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b20      	cmp	r3, #32
 80041da:	d139      	bne.n	8004250 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d101      	bne.n	80041ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80041e6:	2302      	movs	r3, #2
 80041e8:	e033      	b.n	8004252 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2224      	movs	r2, #36	; 0x24
 80041f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f022 0201 	bic.w	r2, r2, #1
 8004208:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004218:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	021b      	lsls	r3, r3, #8
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	4313      	orrs	r3, r2
 8004222:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f042 0201 	orr.w	r2, r2, #1
 800423a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2220      	movs	r2, #32
 8004240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800424c:	2300      	movs	r3, #0
 800424e:	e000      	b.n	8004252 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004250:	2302      	movs	r3, #2
  }
}
 8004252:	4618      	mov	r0, r3
 8004254:	3714      	adds	r7, #20
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
	...

08004260 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8004266:	af00      	add	r7, sp, #0
 8004268:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800426c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004270:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004272:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004276:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d102      	bne.n	8004286 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	f001 b83a 	b.w	80052fa <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004286:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800428a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b00      	cmp	r3, #0
 8004298:	f000 816f 	beq.w	800457a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800429c:	4bb5      	ldr	r3, [pc, #724]	; (8004574 <HAL_RCC_OscConfig+0x314>)
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f003 030c 	and.w	r3, r3, #12
 80042a4:	2b04      	cmp	r3, #4
 80042a6:	d00c      	beq.n	80042c2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80042a8:	4bb2      	ldr	r3, [pc, #712]	; (8004574 <HAL_RCC_OscConfig+0x314>)
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f003 030c 	and.w	r3, r3, #12
 80042b0:	2b08      	cmp	r3, #8
 80042b2:	d15c      	bne.n	800436e <HAL_RCC_OscConfig+0x10e>
 80042b4:	4baf      	ldr	r3, [pc, #700]	; (8004574 <HAL_RCC_OscConfig+0x314>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80042bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042c0:	d155      	bne.n	800436e <HAL_RCC_OscConfig+0x10e>
 80042c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042c6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80042ce:	fa93 f3a3 	rbit	r3, r3
 80042d2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80042d6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042da:	fab3 f383 	clz	r3, r3
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	095b      	lsrs	r3, r3, #5
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	f043 0301 	orr.w	r3, r3, #1
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d102      	bne.n	80042f4 <HAL_RCC_OscConfig+0x94>
 80042ee:	4ba1      	ldr	r3, [pc, #644]	; (8004574 <HAL_RCC_OscConfig+0x314>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	e015      	b.n	8004320 <HAL_RCC_OscConfig+0xc0>
 80042f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042f8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042fc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8004300:	fa93 f3a3 	rbit	r3, r3
 8004304:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8004308:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800430c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004310:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8004314:	fa93 f3a3 	rbit	r3, r3
 8004318:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800431c:	4b95      	ldr	r3, [pc, #596]	; (8004574 <HAL_RCC_OscConfig+0x314>)
 800431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004320:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004324:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8004328:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800432c:	fa92 f2a2 	rbit	r2, r2
 8004330:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8004334:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004338:	fab2 f282 	clz	r2, r2
 800433c:	b2d2      	uxtb	r2, r2
 800433e:	f042 0220 	orr.w	r2, r2, #32
 8004342:	b2d2      	uxtb	r2, r2
 8004344:	f002 021f 	and.w	r2, r2, #31
 8004348:	2101      	movs	r1, #1
 800434a:	fa01 f202 	lsl.w	r2, r1, r2
 800434e:	4013      	ands	r3, r2
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 8111 	beq.w	8004578 <HAL_RCC_OscConfig+0x318>
 8004356:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800435a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	f040 8108 	bne.w	8004578 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	f000 bfc6 	b.w	80052fa <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800436e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004372:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800437e:	d106      	bne.n	800438e <HAL_RCC_OscConfig+0x12e>
 8004380:	4b7c      	ldr	r3, [pc, #496]	; (8004574 <HAL_RCC_OscConfig+0x314>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a7b      	ldr	r2, [pc, #492]	; (8004574 <HAL_RCC_OscConfig+0x314>)
 8004386:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800438a:	6013      	str	r3, [r2, #0]
 800438c:	e036      	b.n	80043fc <HAL_RCC_OscConfig+0x19c>
 800438e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004392:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10c      	bne.n	80043b8 <HAL_RCC_OscConfig+0x158>
 800439e:	4b75      	ldr	r3, [pc, #468]	; (8004574 <HAL_RCC_OscConfig+0x314>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a74      	ldr	r2, [pc, #464]	; (8004574 <HAL_RCC_OscConfig+0x314>)
 80043a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043a8:	6013      	str	r3, [r2, #0]
 80043aa:	4b72      	ldr	r3, [pc, #456]	; (8004574 <HAL_RCC_OscConfig+0x314>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a71      	ldr	r2, [pc, #452]	; (8004574 <HAL_RCC_OscConfig+0x314>)
 80043b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043b4:	6013      	str	r3, [r2, #0]
 80043b6:	e021      	b.n	80043fc <HAL_RCC_OscConfig+0x19c>
 80043b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043bc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043c8:	d10c      	bne.n	80043e4 <HAL_RCC_OscConfig+0x184>
 80043ca:	4b6a      	ldr	r3, [pc, #424]	; (8004574 <HAL_RCC_OscConfig+0x314>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a69      	ldr	r2, [pc, #420]	; (8004574 <HAL_RCC_OscConfig+0x314>)
 80043d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043d4:	6013      	str	r3, [r2, #0]
 80043d6:	4b67      	ldr	r3, [pc, #412]	; (8004574 <HAL_RCC_OscConfig+0x314>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a66      	ldr	r2, [pc, #408]	; (8004574 <HAL_RCC_OscConfig+0x314>)
 80043dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043e0:	6013      	str	r3, [r2, #0]
 80043e2:	e00b      	b.n	80043fc <HAL_RCC_OscConfig+0x19c>
 80043e4:	4b63      	ldr	r3, [pc, #396]	; (8004574 <HAL_RCC_OscConfig+0x314>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a62      	ldr	r2, [pc, #392]	; (8004574 <HAL_RCC_OscConfig+0x314>)
 80043ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ee:	6013      	str	r3, [r2, #0]
 80043f0:	4b60      	ldr	r3, [pc, #384]	; (8004574 <HAL_RCC_OscConfig+0x314>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a5f      	ldr	r2, [pc, #380]	; (8004574 <HAL_RCC_OscConfig+0x314>)
 80043f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043fa:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004400:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d059      	beq.n	80044c0 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800440c:	f7fd fe32 	bl	8002074 <HAL_GetTick>
 8004410:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004414:	e00a      	b.n	800442c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004416:	f7fd fe2d 	bl	8002074 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b64      	cmp	r3, #100	; 0x64
 8004424:	d902      	bls.n	800442c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	f000 bf67 	b.w	80052fa <HAL_RCC_OscConfig+0x109a>
 800442c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004430:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004434:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8004438:	fa93 f3a3 	rbit	r3, r3
 800443c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8004440:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004444:	fab3 f383 	clz	r3, r3
 8004448:	b2db      	uxtb	r3, r3
 800444a:	095b      	lsrs	r3, r3, #5
 800444c:	b2db      	uxtb	r3, r3
 800444e:	f043 0301 	orr.w	r3, r3, #1
 8004452:	b2db      	uxtb	r3, r3
 8004454:	2b01      	cmp	r3, #1
 8004456:	d102      	bne.n	800445e <HAL_RCC_OscConfig+0x1fe>
 8004458:	4b46      	ldr	r3, [pc, #280]	; (8004574 <HAL_RCC_OscConfig+0x314>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	e015      	b.n	800448a <HAL_RCC_OscConfig+0x22a>
 800445e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004462:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004466:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800446a:	fa93 f3a3 	rbit	r3, r3
 800446e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8004472:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004476:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800447a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800447e:	fa93 f3a3 	rbit	r3, r3
 8004482:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004486:	4b3b      	ldr	r3, [pc, #236]	; (8004574 <HAL_RCC_OscConfig+0x314>)
 8004488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800448e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8004492:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8004496:	fa92 f2a2 	rbit	r2, r2
 800449a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800449e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80044a2:	fab2 f282 	clz	r2, r2
 80044a6:	b2d2      	uxtb	r2, r2
 80044a8:	f042 0220 	orr.w	r2, r2, #32
 80044ac:	b2d2      	uxtb	r2, r2
 80044ae:	f002 021f 	and.w	r2, r2, #31
 80044b2:	2101      	movs	r1, #1
 80044b4:	fa01 f202 	lsl.w	r2, r1, r2
 80044b8:	4013      	ands	r3, r2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d0ab      	beq.n	8004416 <HAL_RCC_OscConfig+0x1b6>
 80044be:	e05c      	b.n	800457a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c0:	f7fd fdd8 	bl	8002074 <HAL_GetTick>
 80044c4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044c8:	e00a      	b.n	80044e0 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044ca:	f7fd fdd3 	bl	8002074 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b64      	cmp	r3, #100	; 0x64
 80044d8:	d902      	bls.n	80044e0 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	f000 bf0d 	b.w	80052fa <HAL_RCC_OscConfig+0x109a>
 80044e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044e4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80044ec:	fa93 f3a3 	rbit	r3, r3
 80044f0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80044f4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044f8:	fab3 f383 	clz	r3, r3
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	095b      	lsrs	r3, r3, #5
 8004500:	b2db      	uxtb	r3, r3
 8004502:	f043 0301 	orr.w	r3, r3, #1
 8004506:	b2db      	uxtb	r3, r3
 8004508:	2b01      	cmp	r3, #1
 800450a:	d102      	bne.n	8004512 <HAL_RCC_OscConfig+0x2b2>
 800450c:	4b19      	ldr	r3, [pc, #100]	; (8004574 <HAL_RCC_OscConfig+0x314>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	e015      	b.n	800453e <HAL_RCC_OscConfig+0x2de>
 8004512:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004516:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800451a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800451e:	fa93 f3a3 	rbit	r3, r3
 8004522:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8004526:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800452a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800452e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004532:	fa93 f3a3 	rbit	r3, r3
 8004536:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800453a:	4b0e      	ldr	r3, [pc, #56]	; (8004574 <HAL_RCC_OscConfig+0x314>)
 800453c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004542:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8004546:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800454a:	fa92 f2a2 	rbit	r2, r2
 800454e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8004552:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004556:	fab2 f282 	clz	r2, r2
 800455a:	b2d2      	uxtb	r2, r2
 800455c:	f042 0220 	orr.w	r2, r2, #32
 8004560:	b2d2      	uxtb	r2, r2
 8004562:	f002 021f 	and.w	r2, r2, #31
 8004566:	2101      	movs	r1, #1
 8004568:	fa01 f202 	lsl.w	r2, r1, r2
 800456c:	4013      	ands	r3, r2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1ab      	bne.n	80044ca <HAL_RCC_OscConfig+0x26a>
 8004572:	e002      	b.n	800457a <HAL_RCC_OscConfig+0x31a>
 8004574:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004578:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800457a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800457e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	f000 817f 	beq.w	800488e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004590:	4ba7      	ldr	r3, [pc, #668]	; (8004830 <HAL_RCC_OscConfig+0x5d0>)
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f003 030c 	and.w	r3, r3, #12
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00c      	beq.n	80045b6 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800459c:	4ba4      	ldr	r3, [pc, #656]	; (8004830 <HAL_RCC_OscConfig+0x5d0>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f003 030c 	and.w	r3, r3, #12
 80045a4:	2b08      	cmp	r3, #8
 80045a6:	d173      	bne.n	8004690 <HAL_RCC_OscConfig+0x430>
 80045a8:	4ba1      	ldr	r3, [pc, #644]	; (8004830 <HAL_RCC_OscConfig+0x5d0>)
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80045b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045b4:	d16c      	bne.n	8004690 <HAL_RCC_OscConfig+0x430>
 80045b6:	2302      	movs	r3, #2
 80045b8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045bc:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80045c0:	fa93 f3a3 	rbit	r3, r3
 80045c4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80045c8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045cc:	fab3 f383 	clz	r3, r3
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	095b      	lsrs	r3, r3, #5
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	f043 0301 	orr.w	r3, r3, #1
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d102      	bne.n	80045e6 <HAL_RCC_OscConfig+0x386>
 80045e0:	4b93      	ldr	r3, [pc, #588]	; (8004830 <HAL_RCC_OscConfig+0x5d0>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	e013      	b.n	800460e <HAL_RCC_OscConfig+0x3ae>
 80045e6:	2302      	movs	r3, #2
 80045e8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ec:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80045f0:	fa93 f3a3 	rbit	r3, r3
 80045f4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80045f8:	2302      	movs	r3, #2
 80045fa:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80045fe:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004602:	fa93 f3a3 	rbit	r3, r3
 8004606:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800460a:	4b89      	ldr	r3, [pc, #548]	; (8004830 <HAL_RCC_OscConfig+0x5d0>)
 800460c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460e:	2202      	movs	r2, #2
 8004610:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8004614:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8004618:	fa92 f2a2 	rbit	r2, r2
 800461c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8004620:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004624:	fab2 f282 	clz	r2, r2
 8004628:	b2d2      	uxtb	r2, r2
 800462a:	f042 0220 	orr.w	r2, r2, #32
 800462e:	b2d2      	uxtb	r2, r2
 8004630:	f002 021f 	and.w	r2, r2, #31
 8004634:	2101      	movs	r1, #1
 8004636:	fa01 f202 	lsl.w	r2, r1, r2
 800463a:	4013      	ands	r3, r2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00a      	beq.n	8004656 <HAL_RCC_OscConfig+0x3f6>
 8004640:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004644:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d002      	beq.n	8004656 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	f000 be52 	b.w	80052fa <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004656:	4b76      	ldr	r3, [pc, #472]	; (8004830 <HAL_RCC_OscConfig+0x5d0>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800465e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004662:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	21f8      	movs	r1, #248	; 0xf8
 800466c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004670:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8004674:	fa91 f1a1 	rbit	r1, r1
 8004678:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800467c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004680:	fab1 f181 	clz	r1, r1
 8004684:	b2c9      	uxtb	r1, r1
 8004686:	408b      	lsls	r3, r1
 8004688:	4969      	ldr	r1, [pc, #420]	; (8004830 <HAL_RCC_OscConfig+0x5d0>)
 800468a:	4313      	orrs	r3, r2
 800468c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800468e:	e0fe      	b.n	800488e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004690:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004694:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 8088 	beq.w	80047b2 <HAL_RCC_OscConfig+0x552>
 80046a2:	2301      	movs	r3, #1
 80046a4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80046ac:	fa93 f3a3 	rbit	r3, r3
 80046b0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80046b4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046b8:	fab3 f383 	clz	r3, r3
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80046c2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	461a      	mov	r2, r3
 80046ca:	2301      	movs	r3, #1
 80046cc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ce:	f7fd fcd1 	bl	8002074 <HAL_GetTick>
 80046d2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046d6:	e00a      	b.n	80046ee <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046d8:	f7fd fccc 	bl	8002074 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d902      	bls.n	80046ee <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	f000 be06 	b.w	80052fa <HAL_RCC_OscConfig+0x109a>
 80046ee:	2302      	movs	r3, #2
 80046f0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80046f8:	fa93 f3a3 	rbit	r3, r3
 80046fc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8004700:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004704:	fab3 f383 	clz	r3, r3
 8004708:	b2db      	uxtb	r3, r3
 800470a:	095b      	lsrs	r3, r3, #5
 800470c:	b2db      	uxtb	r3, r3
 800470e:	f043 0301 	orr.w	r3, r3, #1
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b01      	cmp	r3, #1
 8004716:	d102      	bne.n	800471e <HAL_RCC_OscConfig+0x4be>
 8004718:	4b45      	ldr	r3, [pc, #276]	; (8004830 <HAL_RCC_OscConfig+0x5d0>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	e013      	b.n	8004746 <HAL_RCC_OscConfig+0x4e6>
 800471e:	2302      	movs	r3, #2
 8004720:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004724:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004728:	fa93 f3a3 	rbit	r3, r3
 800472c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004730:	2302      	movs	r3, #2
 8004732:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004736:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800473a:	fa93 f3a3 	rbit	r3, r3
 800473e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004742:	4b3b      	ldr	r3, [pc, #236]	; (8004830 <HAL_RCC_OscConfig+0x5d0>)
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004746:	2202      	movs	r2, #2
 8004748:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800474c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004750:	fa92 f2a2 	rbit	r2, r2
 8004754:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8004758:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800475c:	fab2 f282 	clz	r2, r2
 8004760:	b2d2      	uxtb	r2, r2
 8004762:	f042 0220 	orr.w	r2, r2, #32
 8004766:	b2d2      	uxtb	r2, r2
 8004768:	f002 021f 	and.w	r2, r2, #31
 800476c:	2101      	movs	r1, #1
 800476e:	fa01 f202 	lsl.w	r2, r1, r2
 8004772:	4013      	ands	r3, r2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d0af      	beq.n	80046d8 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004778:	4b2d      	ldr	r3, [pc, #180]	; (8004830 <HAL_RCC_OscConfig+0x5d0>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004780:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004784:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	21f8      	movs	r1, #248	; 0xf8
 800478e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004792:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8004796:	fa91 f1a1 	rbit	r1, r1
 800479a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800479e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80047a2:	fab1 f181 	clz	r1, r1
 80047a6:	b2c9      	uxtb	r1, r1
 80047a8:	408b      	lsls	r3, r1
 80047aa:	4921      	ldr	r1, [pc, #132]	; (8004830 <HAL_RCC_OscConfig+0x5d0>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	600b      	str	r3, [r1, #0]
 80047b0:	e06d      	b.n	800488e <HAL_RCC_OscConfig+0x62e>
 80047b2:	2301      	movs	r3, #1
 80047b4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80047bc:	fa93 f3a3 	rbit	r3, r3
 80047c0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80047c4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047c8:	fab3 f383 	clz	r3, r3
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80047d2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	461a      	mov	r2, r3
 80047da:	2300      	movs	r3, #0
 80047dc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047de:	f7fd fc49 	bl	8002074 <HAL_GetTick>
 80047e2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047e6:	e00a      	b.n	80047fe <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047e8:	f7fd fc44 	bl	8002074 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d902      	bls.n	80047fe <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	f000 bd7e 	b.w	80052fa <HAL_RCC_OscConfig+0x109a>
 80047fe:	2302      	movs	r3, #2
 8004800:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004804:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004808:	fa93 f3a3 	rbit	r3, r3
 800480c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8004810:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004814:	fab3 f383 	clz	r3, r3
 8004818:	b2db      	uxtb	r3, r3
 800481a:	095b      	lsrs	r3, r3, #5
 800481c:	b2db      	uxtb	r3, r3
 800481e:	f043 0301 	orr.w	r3, r3, #1
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b01      	cmp	r3, #1
 8004826:	d105      	bne.n	8004834 <HAL_RCC_OscConfig+0x5d4>
 8004828:	4b01      	ldr	r3, [pc, #4]	; (8004830 <HAL_RCC_OscConfig+0x5d0>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	e016      	b.n	800485c <HAL_RCC_OscConfig+0x5fc>
 800482e:	bf00      	nop
 8004830:	40021000 	.word	0x40021000
 8004834:	2302      	movs	r3, #2
 8004836:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800483a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800483e:	fa93 f3a3 	rbit	r3, r3
 8004842:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004846:	2302      	movs	r3, #2
 8004848:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800484c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004850:	fa93 f3a3 	rbit	r3, r3
 8004854:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004858:	4bbf      	ldr	r3, [pc, #764]	; (8004b58 <HAL_RCC_OscConfig+0x8f8>)
 800485a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485c:	2202      	movs	r2, #2
 800485e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004862:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8004866:	fa92 f2a2 	rbit	r2, r2
 800486a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800486e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004872:	fab2 f282 	clz	r2, r2
 8004876:	b2d2      	uxtb	r2, r2
 8004878:	f042 0220 	orr.w	r2, r2, #32
 800487c:	b2d2      	uxtb	r2, r2
 800487e:	f002 021f 	and.w	r2, r2, #31
 8004882:	2101      	movs	r1, #1
 8004884:	fa01 f202 	lsl.w	r2, r1, r2
 8004888:	4013      	ands	r3, r2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1ac      	bne.n	80047e8 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800488e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004892:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0308 	and.w	r3, r3, #8
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f000 8113 	beq.w	8004aca <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048a8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	695b      	ldr	r3, [r3, #20]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d07c      	beq.n	80049ae <HAL_RCC_OscConfig+0x74e>
 80048b4:	2301      	movs	r3, #1
 80048b6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048be:	fa93 f3a3 	rbit	r3, r3
 80048c2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80048c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048ca:	fab3 f383 	clz	r3, r3
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	461a      	mov	r2, r3
 80048d2:	4ba2      	ldr	r3, [pc, #648]	; (8004b5c <HAL_RCC_OscConfig+0x8fc>)
 80048d4:	4413      	add	r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	461a      	mov	r2, r3
 80048da:	2301      	movs	r3, #1
 80048dc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048de:	f7fd fbc9 	bl	8002074 <HAL_GetTick>
 80048e2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048e6:	e00a      	b.n	80048fe <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048e8:	f7fd fbc4 	bl	8002074 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d902      	bls.n	80048fe <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	f000 bcfe 	b.w	80052fa <HAL_RCC_OscConfig+0x109a>
 80048fe:	2302      	movs	r3, #2
 8004900:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004904:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004908:	fa93 f2a3 	rbit	r2, r3
 800490c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004910:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004914:	601a      	str	r2, [r3, #0]
 8004916:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800491a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800491e:	2202      	movs	r2, #2
 8004920:	601a      	str	r2, [r3, #0]
 8004922:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004926:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	fa93 f2a3 	rbit	r2, r3
 8004930:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004934:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004938:	601a      	str	r2, [r3, #0]
 800493a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800493e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004942:	2202      	movs	r2, #2
 8004944:	601a      	str	r2, [r3, #0]
 8004946:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800494a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	fa93 f2a3 	rbit	r2, r3
 8004954:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004958:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800495c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800495e:	4b7e      	ldr	r3, [pc, #504]	; (8004b58 <HAL_RCC_OscConfig+0x8f8>)
 8004960:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004962:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004966:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800496a:	2102      	movs	r1, #2
 800496c:	6019      	str	r1, [r3, #0]
 800496e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004972:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	fa93 f1a3 	rbit	r1, r3
 800497c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004980:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004984:	6019      	str	r1, [r3, #0]
  return result;
 8004986:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800498a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	fab3 f383 	clz	r3, r3
 8004994:	b2db      	uxtb	r3, r3
 8004996:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800499a:	b2db      	uxtb	r3, r3
 800499c:	f003 031f 	and.w	r3, r3, #31
 80049a0:	2101      	movs	r1, #1
 80049a2:	fa01 f303 	lsl.w	r3, r1, r3
 80049a6:	4013      	ands	r3, r2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d09d      	beq.n	80048e8 <HAL_RCC_OscConfig+0x688>
 80049ac:	e08d      	b.n	8004aca <HAL_RCC_OscConfig+0x86a>
 80049ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049b2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80049b6:	2201      	movs	r2, #1
 80049b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049be:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	fa93 f2a3 	rbit	r2, r3
 80049c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049cc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80049d0:	601a      	str	r2, [r3, #0]
  return result;
 80049d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049d6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80049da:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049dc:	fab3 f383 	clz	r3, r3
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	461a      	mov	r2, r3
 80049e4:	4b5d      	ldr	r3, [pc, #372]	; (8004b5c <HAL_RCC_OscConfig+0x8fc>)
 80049e6:	4413      	add	r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	461a      	mov	r2, r3
 80049ec:	2300      	movs	r3, #0
 80049ee:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049f0:	f7fd fb40 	bl	8002074 <HAL_GetTick>
 80049f4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049f8:	e00a      	b.n	8004a10 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049fa:	f7fd fb3b 	bl	8002074 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d902      	bls.n	8004a10 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	f000 bc75 	b.w	80052fa <HAL_RCC_OscConfig+0x109a>
 8004a10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a14:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004a18:	2202      	movs	r2, #2
 8004a1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a20:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	fa93 f2a3 	rbit	r2, r3
 8004a2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a2e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a3c:	2202      	movs	r2, #2
 8004a3e:	601a      	str	r2, [r3, #0]
 8004a40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	fa93 f2a3 	rbit	r2, r3
 8004a4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a56:	601a      	str	r2, [r3, #0]
 8004a58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a5c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004a60:	2202      	movs	r2, #2
 8004a62:	601a      	str	r2, [r3, #0]
 8004a64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a68:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	fa93 f2a3 	rbit	r2, r3
 8004a72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a76:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004a7a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a7c:	4b36      	ldr	r3, [pc, #216]	; (8004b58 <HAL_RCC_OscConfig+0x8f8>)
 8004a7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a84:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004a88:	2102      	movs	r1, #2
 8004a8a:	6019      	str	r1, [r3, #0]
 8004a8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a90:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	fa93 f1a3 	rbit	r1, r3
 8004a9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a9e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004aa2:	6019      	str	r1, [r3, #0]
  return result;
 8004aa4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004aa8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	fab3 f383 	clz	r3, r3
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	f003 031f 	and.w	r3, r3, #31
 8004abe:	2101      	movs	r1, #1
 8004ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d197      	bne.n	80049fa <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004aca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ace:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0304 	and.w	r3, r3, #4
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f000 81a5 	beq.w	8004e2a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ae6:	4b1c      	ldr	r3, [pc, #112]	; (8004b58 <HAL_RCC_OscConfig+0x8f8>)
 8004ae8:	69db      	ldr	r3, [r3, #28]
 8004aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d116      	bne.n	8004b20 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004af2:	4b19      	ldr	r3, [pc, #100]	; (8004b58 <HAL_RCC_OscConfig+0x8f8>)
 8004af4:	69db      	ldr	r3, [r3, #28]
 8004af6:	4a18      	ldr	r2, [pc, #96]	; (8004b58 <HAL_RCC_OscConfig+0x8f8>)
 8004af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004afc:	61d3      	str	r3, [r2, #28]
 8004afe:	4b16      	ldr	r3, [pc, #88]	; (8004b58 <HAL_RCC_OscConfig+0x8f8>)
 8004b00:	69db      	ldr	r3, [r3, #28]
 8004b02:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004b06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b0e:	601a      	str	r2, [r3, #0]
 8004b10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b18:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b20:	4b0f      	ldr	r3, [pc, #60]	; (8004b60 <HAL_RCC_OscConfig+0x900>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d121      	bne.n	8004b70 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b2c:	4b0c      	ldr	r3, [pc, #48]	; (8004b60 <HAL_RCC_OscConfig+0x900>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a0b      	ldr	r2, [pc, #44]	; (8004b60 <HAL_RCC_OscConfig+0x900>)
 8004b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b36:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b38:	f7fd fa9c 	bl	8002074 <HAL_GetTick>
 8004b3c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b40:	e010      	b.n	8004b64 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b42:	f7fd fa97 	bl	8002074 <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b64      	cmp	r3, #100	; 0x64
 8004b50:	d908      	bls.n	8004b64 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e3d1      	b.n	80052fa <HAL_RCC_OscConfig+0x109a>
 8004b56:	bf00      	nop
 8004b58:	40021000 	.word	0x40021000
 8004b5c:	10908120 	.word	0x10908120
 8004b60:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b64:	4b8d      	ldr	r3, [pc, #564]	; (8004d9c <HAL_RCC_OscConfig+0xb3c>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d0e8      	beq.n	8004b42 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b74:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d106      	bne.n	8004b8e <HAL_RCC_OscConfig+0x92e>
 8004b80:	4b87      	ldr	r3, [pc, #540]	; (8004da0 <HAL_RCC_OscConfig+0xb40>)
 8004b82:	6a1b      	ldr	r3, [r3, #32]
 8004b84:	4a86      	ldr	r2, [pc, #536]	; (8004da0 <HAL_RCC_OscConfig+0xb40>)
 8004b86:	f043 0301 	orr.w	r3, r3, #1
 8004b8a:	6213      	str	r3, [r2, #32]
 8004b8c:	e035      	b.n	8004bfa <HAL_RCC_OscConfig+0x99a>
 8004b8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b92:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10c      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x958>
 8004b9e:	4b80      	ldr	r3, [pc, #512]	; (8004da0 <HAL_RCC_OscConfig+0xb40>)
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	4a7f      	ldr	r2, [pc, #508]	; (8004da0 <HAL_RCC_OscConfig+0xb40>)
 8004ba4:	f023 0301 	bic.w	r3, r3, #1
 8004ba8:	6213      	str	r3, [r2, #32]
 8004baa:	4b7d      	ldr	r3, [pc, #500]	; (8004da0 <HAL_RCC_OscConfig+0xb40>)
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	4a7c      	ldr	r2, [pc, #496]	; (8004da0 <HAL_RCC_OscConfig+0xb40>)
 8004bb0:	f023 0304 	bic.w	r3, r3, #4
 8004bb4:	6213      	str	r3, [r2, #32]
 8004bb6:	e020      	b.n	8004bfa <HAL_RCC_OscConfig+0x99a>
 8004bb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bbc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	2b05      	cmp	r3, #5
 8004bc6:	d10c      	bne.n	8004be2 <HAL_RCC_OscConfig+0x982>
 8004bc8:	4b75      	ldr	r3, [pc, #468]	; (8004da0 <HAL_RCC_OscConfig+0xb40>)
 8004bca:	6a1b      	ldr	r3, [r3, #32]
 8004bcc:	4a74      	ldr	r2, [pc, #464]	; (8004da0 <HAL_RCC_OscConfig+0xb40>)
 8004bce:	f043 0304 	orr.w	r3, r3, #4
 8004bd2:	6213      	str	r3, [r2, #32]
 8004bd4:	4b72      	ldr	r3, [pc, #456]	; (8004da0 <HAL_RCC_OscConfig+0xb40>)
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	4a71      	ldr	r2, [pc, #452]	; (8004da0 <HAL_RCC_OscConfig+0xb40>)
 8004bda:	f043 0301 	orr.w	r3, r3, #1
 8004bde:	6213      	str	r3, [r2, #32]
 8004be0:	e00b      	b.n	8004bfa <HAL_RCC_OscConfig+0x99a>
 8004be2:	4b6f      	ldr	r3, [pc, #444]	; (8004da0 <HAL_RCC_OscConfig+0xb40>)
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	4a6e      	ldr	r2, [pc, #440]	; (8004da0 <HAL_RCC_OscConfig+0xb40>)
 8004be8:	f023 0301 	bic.w	r3, r3, #1
 8004bec:	6213      	str	r3, [r2, #32]
 8004bee:	4b6c      	ldr	r3, [pc, #432]	; (8004da0 <HAL_RCC_OscConfig+0xb40>)
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	4a6b      	ldr	r2, [pc, #428]	; (8004da0 <HAL_RCC_OscConfig+0xb40>)
 8004bf4:	f023 0304 	bic.w	r3, r3, #4
 8004bf8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bfa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bfe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f000 8081 	beq.w	8004d0e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c0c:	f7fd fa32 	bl	8002074 <HAL_GetTick>
 8004c10:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c14:	e00b      	b.n	8004c2e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c16:	f7fd fa2d 	bl	8002074 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e365      	b.n	80052fa <HAL_RCC_OscConfig+0x109a>
 8004c2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c32:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004c36:	2202      	movs	r2, #2
 8004c38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c3e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	fa93 f2a3 	rbit	r2, r3
 8004c48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c4c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004c50:	601a      	str	r2, [r3, #0]
 8004c52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c56:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004c5a:	2202      	movs	r2, #2
 8004c5c:	601a      	str	r2, [r3, #0]
 8004c5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c62:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	fa93 f2a3 	rbit	r2, r3
 8004c6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c70:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004c74:	601a      	str	r2, [r3, #0]
  return result;
 8004c76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c7a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004c7e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c80:	fab3 f383 	clz	r3, r3
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	095b      	lsrs	r3, r3, #5
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	f043 0302 	orr.w	r3, r3, #2
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d102      	bne.n	8004c9a <HAL_RCC_OscConfig+0xa3a>
 8004c94:	4b42      	ldr	r3, [pc, #264]	; (8004da0 <HAL_RCC_OscConfig+0xb40>)
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	e013      	b.n	8004cc2 <HAL_RCC_OscConfig+0xa62>
 8004c9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c9e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004caa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	fa93 f2a3 	rbit	r2, r3
 8004cb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cb8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8004cbc:	601a      	str	r2, [r3, #0]
 8004cbe:	4b38      	ldr	r3, [pc, #224]	; (8004da0 <HAL_RCC_OscConfig+0xb40>)
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004cc6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004cca:	2102      	movs	r1, #2
 8004ccc:	6011      	str	r1, [r2, #0]
 8004cce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004cd2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004cd6:	6812      	ldr	r2, [r2, #0]
 8004cd8:	fa92 f1a2 	rbit	r1, r2
 8004cdc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004ce0:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8004ce4:	6011      	str	r1, [r2, #0]
  return result;
 8004ce6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004cea:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8004cee:	6812      	ldr	r2, [r2, #0]
 8004cf0:	fab2 f282 	clz	r2, r2
 8004cf4:	b2d2      	uxtb	r2, r2
 8004cf6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cfa:	b2d2      	uxtb	r2, r2
 8004cfc:	f002 021f 	and.w	r2, r2, #31
 8004d00:	2101      	movs	r1, #1
 8004d02:	fa01 f202 	lsl.w	r2, r1, r2
 8004d06:	4013      	ands	r3, r2
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d084      	beq.n	8004c16 <HAL_RCC_OscConfig+0x9b6>
 8004d0c:	e083      	b.n	8004e16 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d0e:	f7fd f9b1 	bl	8002074 <HAL_GetTick>
 8004d12:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d16:	e00b      	b.n	8004d30 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d18:	f7fd f9ac 	bl	8002074 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d901      	bls.n	8004d30 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e2e4      	b.n	80052fa <HAL_RCC_OscConfig+0x109a>
 8004d30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d34:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004d38:	2202      	movs	r2, #2
 8004d3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d40:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	fa93 f2a3 	rbit	r2, r3
 8004d4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d4e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004d52:	601a      	str	r2, [r3, #0]
 8004d54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d58:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004d5c:	2202      	movs	r2, #2
 8004d5e:	601a      	str	r2, [r3, #0]
 8004d60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d64:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	fa93 f2a3 	rbit	r2, r3
 8004d6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d72:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004d76:	601a      	str	r2, [r3, #0]
  return result;
 8004d78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d7c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004d80:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d82:	fab3 f383 	clz	r3, r3
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	095b      	lsrs	r3, r3, #5
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	f043 0302 	orr.w	r3, r3, #2
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d106      	bne.n	8004da4 <HAL_RCC_OscConfig+0xb44>
 8004d96:	4b02      	ldr	r3, [pc, #8]	; (8004da0 <HAL_RCC_OscConfig+0xb40>)
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	e017      	b.n	8004dcc <HAL_RCC_OscConfig+0xb6c>
 8004d9c:	40007000 	.word	0x40007000
 8004da0:	40021000 	.word	0x40021000
 8004da4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004da8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004dac:	2202      	movs	r2, #2
 8004dae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004db4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	fa93 f2a3 	rbit	r2, r3
 8004dbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004dc2:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004dc6:	601a      	str	r2, [r3, #0]
 8004dc8:	4bb3      	ldr	r3, [pc, #716]	; (8005098 <HAL_RCC_OscConfig+0xe38>)
 8004dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dcc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004dd0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004dd4:	2102      	movs	r1, #2
 8004dd6:	6011      	str	r1, [r2, #0]
 8004dd8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004ddc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004de0:	6812      	ldr	r2, [r2, #0]
 8004de2:	fa92 f1a2 	rbit	r1, r2
 8004de6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004dea:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8004dee:	6011      	str	r1, [r2, #0]
  return result;
 8004df0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004df4:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8004df8:	6812      	ldr	r2, [r2, #0]
 8004dfa:	fab2 f282 	clz	r2, r2
 8004dfe:	b2d2      	uxtb	r2, r2
 8004e00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e04:	b2d2      	uxtb	r2, r2
 8004e06:	f002 021f 	and.w	r2, r2, #31
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8004e10:	4013      	ands	r3, r2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d180      	bne.n	8004d18 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e16:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d105      	bne.n	8004e2a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e1e:	4b9e      	ldr	r3, [pc, #632]	; (8005098 <HAL_RCC_OscConfig+0xe38>)
 8004e20:	69db      	ldr	r3, [r3, #28]
 8004e22:	4a9d      	ldr	r2, [pc, #628]	; (8005098 <HAL_RCC_OscConfig+0xe38>)
 8004e24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e28:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e2e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f000 825e 	beq.w	80052f8 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e3c:	4b96      	ldr	r3, [pc, #600]	; (8005098 <HAL_RCC_OscConfig+0xe38>)
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f003 030c 	and.w	r3, r3, #12
 8004e44:	2b08      	cmp	r3, #8
 8004e46:	f000 821f 	beq.w	8005288 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e4e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	f040 8170 	bne.w	800513c <HAL_RCC_OscConfig+0xedc>
 8004e5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e60:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004e64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e6e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	fa93 f2a3 	rbit	r2, r3
 8004e78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e7c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004e80:	601a      	str	r2, [r3, #0]
  return result;
 8004e82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e86:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004e8a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e8c:	fab3 f383 	clz	r3, r3
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e96:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea2:	f7fd f8e7 	bl	8002074 <HAL_GetTick>
 8004ea6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004eaa:	e009      	b.n	8004ec0 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004eac:	f7fd f8e2 	bl	8002074 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d901      	bls.n	8004ec0 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e21c      	b.n	80052fa <HAL_RCC_OscConfig+0x109a>
 8004ec0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ec4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004ec8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ecc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ece:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ed2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	fa93 f2a3 	rbit	r2, r3
 8004edc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ee0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004ee4:	601a      	str	r2, [r3, #0]
  return result;
 8004ee6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004eea:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004eee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ef0:	fab3 f383 	clz	r3, r3
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	095b      	lsrs	r3, r3, #5
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	f043 0301 	orr.w	r3, r3, #1
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d102      	bne.n	8004f0a <HAL_RCC_OscConfig+0xcaa>
 8004f04:	4b64      	ldr	r3, [pc, #400]	; (8005098 <HAL_RCC_OscConfig+0xe38>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	e027      	b.n	8004f5a <HAL_RCC_OscConfig+0xcfa>
 8004f0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f0e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004f12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f1c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	fa93 f2a3 	rbit	r2, r3
 8004f26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f2a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004f2e:	601a      	str	r2, [r3, #0]
 8004f30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f34:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004f38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f3c:	601a      	str	r2, [r3, #0]
 8004f3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f42:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	fa93 f2a3 	rbit	r2, r3
 8004f4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f50:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004f54:	601a      	str	r2, [r3, #0]
 8004f56:	4b50      	ldr	r3, [pc, #320]	; (8005098 <HAL_RCC_OscConfig+0xe38>)
 8004f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004f5e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004f62:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004f66:	6011      	str	r1, [r2, #0]
 8004f68:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004f6c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004f70:	6812      	ldr	r2, [r2, #0]
 8004f72:	fa92 f1a2 	rbit	r1, r2
 8004f76:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004f7a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004f7e:	6011      	str	r1, [r2, #0]
  return result;
 8004f80:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004f84:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004f88:	6812      	ldr	r2, [r2, #0]
 8004f8a:	fab2 f282 	clz	r2, r2
 8004f8e:	b2d2      	uxtb	r2, r2
 8004f90:	f042 0220 	orr.w	r2, r2, #32
 8004f94:	b2d2      	uxtb	r2, r2
 8004f96:	f002 021f 	and.w	r2, r2, #31
 8004f9a:	2101      	movs	r1, #1
 8004f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d182      	bne.n	8004eac <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fa6:	4b3c      	ldr	r3, [pc, #240]	; (8005098 <HAL_RCC_OscConfig+0xe38>)
 8004fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004faa:	f023 020f 	bic.w	r2, r3, #15
 8004fae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fb2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fba:	4937      	ldr	r1, [pc, #220]	; (8005098 <HAL_RCC_OscConfig+0xe38>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004fc0:	4b35      	ldr	r3, [pc, #212]	; (8005098 <HAL_RCC_OscConfig+0xe38>)
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8004fc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fcc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	6a19      	ldr	r1, [r3, #32]
 8004fd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fd8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	69db      	ldr	r3, [r3, #28]
 8004fe0:	430b      	orrs	r3, r1
 8004fe2:	492d      	ldr	r1, [pc, #180]	; (8005098 <HAL_RCC_OscConfig+0xe38>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	604b      	str	r3, [r1, #4]
 8004fe8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fec:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004ff0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ff4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ff6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ffa:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	fa93 f2a3 	rbit	r2, r3
 8005004:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005008:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800500c:	601a      	str	r2, [r3, #0]
  return result;
 800500e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005012:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005016:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005018:	fab3 f383 	clz	r3, r3
 800501c:	b2db      	uxtb	r3, r3
 800501e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005022:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	461a      	mov	r2, r3
 800502a:	2301      	movs	r3, #1
 800502c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800502e:	f7fd f821 	bl	8002074 <HAL_GetTick>
 8005032:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005036:	e009      	b.n	800504c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005038:	f7fd f81c 	bl	8002074 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	2b02      	cmp	r3, #2
 8005046:	d901      	bls.n	800504c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e156      	b.n	80052fa <HAL_RCC_OscConfig+0x109a>
 800504c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005050:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005054:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005058:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800505a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800505e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	fa93 f2a3 	rbit	r2, r3
 8005068:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800506c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005070:	601a      	str	r2, [r3, #0]
  return result;
 8005072:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005076:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800507a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800507c:	fab3 f383 	clz	r3, r3
 8005080:	b2db      	uxtb	r3, r3
 8005082:	095b      	lsrs	r3, r3, #5
 8005084:	b2db      	uxtb	r3, r3
 8005086:	f043 0301 	orr.w	r3, r3, #1
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b01      	cmp	r3, #1
 800508e:	d105      	bne.n	800509c <HAL_RCC_OscConfig+0xe3c>
 8005090:	4b01      	ldr	r3, [pc, #4]	; (8005098 <HAL_RCC_OscConfig+0xe38>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	e02a      	b.n	80050ec <HAL_RCC_OscConfig+0xe8c>
 8005096:	bf00      	nop
 8005098:	40021000 	.word	0x40021000
 800509c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050a0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80050a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80050a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050ae:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	fa93 f2a3 	rbit	r2, r3
 80050b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050bc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80050c0:	601a      	str	r2, [r3, #0]
 80050c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050c6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80050ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80050ce:	601a      	str	r2, [r3, #0]
 80050d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050d4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	fa93 f2a3 	rbit	r2, r3
 80050de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050e2:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	4b86      	ldr	r3, [pc, #536]	; (8005304 <HAL_RCC_OscConfig+0x10a4>)
 80050ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ec:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80050f0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80050f4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80050f8:	6011      	str	r1, [r2, #0]
 80050fa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80050fe:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005102:	6812      	ldr	r2, [r2, #0]
 8005104:	fa92 f1a2 	rbit	r1, r2
 8005108:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800510c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8005110:	6011      	str	r1, [r2, #0]
  return result;
 8005112:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005116:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800511a:	6812      	ldr	r2, [r2, #0]
 800511c:	fab2 f282 	clz	r2, r2
 8005120:	b2d2      	uxtb	r2, r2
 8005122:	f042 0220 	orr.w	r2, r2, #32
 8005126:	b2d2      	uxtb	r2, r2
 8005128:	f002 021f 	and.w	r2, r2, #31
 800512c:	2101      	movs	r1, #1
 800512e:	fa01 f202 	lsl.w	r2, r1, r2
 8005132:	4013      	ands	r3, r2
 8005134:	2b00      	cmp	r3, #0
 8005136:	f43f af7f 	beq.w	8005038 <HAL_RCC_OscConfig+0xdd8>
 800513a:	e0dd      	b.n	80052f8 <HAL_RCC_OscConfig+0x1098>
 800513c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005140:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005144:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005148:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800514a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800514e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	fa93 f2a3 	rbit	r2, r3
 8005158:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800515c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005160:	601a      	str	r2, [r3, #0]
  return result;
 8005162:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005166:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800516a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800516c:	fab3 f383 	clz	r3, r3
 8005170:	b2db      	uxtb	r3, r3
 8005172:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005176:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	461a      	mov	r2, r3
 800517e:	2300      	movs	r3, #0
 8005180:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005182:	f7fc ff77 	bl	8002074 <HAL_GetTick>
 8005186:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800518a:	e009      	b.n	80051a0 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800518c:	f7fc ff72 	bl	8002074 <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	2b02      	cmp	r3, #2
 800519a:	d901      	bls.n	80051a0 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e0ac      	b.n	80052fa <HAL_RCC_OscConfig+0x109a>
 80051a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051a4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80051a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051b2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	fa93 f2a3 	rbit	r2, r3
 80051bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051c0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80051c4:	601a      	str	r2, [r3, #0]
  return result;
 80051c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051ca:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80051ce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051d0:	fab3 f383 	clz	r3, r3
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	095b      	lsrs	r3, r3, #5
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	f043 0301 	orr.w	r3, r3, #1
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d102      	bne.n	80051ea <HAL_RCC_OscConfig+0xf8a>
 80051e4:	4b47      	ldr	r3, [pc, #284]	; (8005304 <HAL_RCC_OscConfig+0x10a4>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	e027      	b.n	800523a <HAL_RCC_OscConfig+0xfda>
 80051ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051ee:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80051f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051fc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	fa93 f2a3 	rbit	r2, r3
 8005206:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800520a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800520e:	601a      	str	r2, [r3, #0]
 8005210:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005214:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005218:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005222:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	fa93 f2a3 	rbit	r2, r3
 800522c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005230:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8005234:	601a      	str	r2, [r3, #0]
 8005236:	4b33      	ldr	r3, [pc, #204]	; (8005304 <HAL_RCC_OscConfig+0x10a4>)
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800523e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005242:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005246:	6011      	str	r1, [r2, #0]
 8005248:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800524c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005250:	6812      	ldr	r2, [r2, #0]
 8005252:	fa92 f1a2 	rbit	r1, r2
 8005256:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800525a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800525e:	6011      	str	r1, [r2, #0]
  return result;
 8005260:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005264:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8005268:	6812      	ldr	r2, [r2, #0]
 800526a:	fab2 f282 	clz	r2, r2
 800526e:	b2d2      	uxtb	r2, r2
 8005270:	f042 0220 	orr.w	r2, r2, #32
 8005274:	b2d2      	uxtb	r2, r2
 8005276:	f002 021f 	and.w	r2, r2, #31
 800527a:	2101      	movs	r1, #1
 800527c:	fa01 f202 	lsl.w	r2, r1, r2
 8005280:	4013      	ands	r3, r2
 8005282:	2b00      	cmp	r3, #0
 8005284:	d182      	bne.n	800518c <HAL_RCC_OscConfig+0xf2c>
 8005286:	e037      	b.n	80052f8 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005288:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800528c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d101      	bne.n	800529c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e02e      	b.n	80052fa <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800529c:	4b19      	ldr	r3, [pc, #100]	; (8005304 <HAL_RCC_OscConfig+0x10a4>)
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80052a4:	4b17      	ldr	r3, [pc, #92]	; (8005304 <HAL_RCC_OscConfig+0x10a4>)
 80052a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80052ac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80052b0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80052b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052b8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	69db      	ldr	r3, [r3, #28]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d117      	bne.n	80052f4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80052c4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80052c8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80052cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80052d8:	429a      	cmp	r2, r3
 80052da:	d10b      	bne.n	80052f4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80052dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80052e0:	f003 020f 	and.w	r2, r3, #15
 80052e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d001      	beq.n	80052f8 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e000      	b.n	80052fa <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	40021000 	.word	0x40021000

08005308 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b09e      	sub	sp, #120	; 0x78
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005312:	2300      	movs	r3, #0
 8005314:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d101      	bne.n	8005320 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e162      	b.n	80055e6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005320:	4b90      	ldr	r3, [pc, #576]	; (8005564 <HAL_RCC_ClockConfig+0x25c>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0307 	and.w	r3, r3, #7
 8005328:	683a      	ldr	r2, [r7, #0]
 800532a:	429a      	cmp	r2, r3
 800532c:	d910      	bls.n	8005350 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800532e:	4b8d      	ldr	r3, [pc, #564]	; (8005564 <HAL_RCC_ClockConfig+0x25c>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f023 0207 	bic.w	r2, r3, #7
 8005336:	498b      	ldr	r1, [pc, #556]	; (8005564 <HAL_RCC_ClockConfig+0x25c>)
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	4313      	orrs	r3, r2
 800533c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800533e:	4b89      	ldr	r3, [pc, #548]	; (8005564 <HAL_RCC_ClockConfig+0x25c>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0307 	and.w	r3, r3, #7
 8005346:	683a      	ldr	r2, [r7, #0]
 8005348:	429a      	cmp	r2, r3
 800534a:	d001      	beq.n	8005350 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e14a      	b.n	80055e6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0302 	and.w	r3, r3, #2
 8005358:	2b00      	cmp	r3, #0
 800535a:	d008      	beq.n	800536e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800535c:	4b82      	ldr	r3, [pc, #520]	; (8005568 <HAL_RCC_ClockConfig+0x260>)
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	497f      	ldr	r1, [pc, #508]	; (8005568 <HAL_RCC_ClockConfig+0x260>)
 800536a:	4313      	orrs	r3, r2
 800536c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0301 	and.w	r3, r3, #1
 8005376:	2b00      	cmp	r3, #0
 8005378:	f000 80dc 	beq.w	8005534 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	2b01      	cmp	r3, #1
 8005382:	d13c      	bne.n	80053fe <HAL_RCC_ClockConfig+0xf6>
 8005384:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005388:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800538a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800538c:	fa93 f3a3 	rbit	r3, r3
 8005390:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005394:	fab3 f383 	clz	r3, r3
 8005398:	b2db      	uxtb	r3, r3
 800539a:	095b      	lsrs	r3, r3, #5
 800539c:	b2db      	uxtb	r3, r3
 800539e:	f043 0301 	orr.w	r3, r3, #1
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d102      	bne.n	80053ae <HAL_RCC_ClockConfig+0xa6>
 80053a8:	4b6f      	ldr	r3, [pc, #444]	; (8005568 <HAL_RCC_ClockConfig+0x260>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	e00f      	b.n	80053ce <HAL_RCC_ClockConfig+0xc6>
 80053ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80053b2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053b6:	fa93 f3a3 	rbit	r3, r3
 80053ba:	667b      	str	r3, [r7, #100]	; 0x64
 80053bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80053c0:	663b      	str	r3, [r7, #96]	; 0x60
 80053c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053c4:	fa93 f3a3 	rbit	r3, r3
 80053c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053ca:	4b67      	ldr	r3, [pc, #412]	; (8005568 <HAL_RCC_ClockConfig+0x260>)
 80053cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80053d2:	65ba      	str	r2, [r7, #88]	; 0x58
 80053d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053d6:	fa92 f2a2 	rbit	r2, r2
 80053da:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80053dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80053de:	fab2 f282 	clz	r2, r2
 80053e2:	b2d2      	uxtb	r2, r2
 80053e4:	f042 0220 	orr.w	r2, r2, #32
 80053e8:	b2d2      	uxtb	r2, r2
 80053ea:	f002 021f 	and.w	r2, r2, #31
 80053ee:	2101      	movs	r1, #1
 80053f0:	fa01 f202 	lsl.w	r2, r1, r2
 80053f4:	4013      	ands	r3, r2
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d17b      	bne.n	80054f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e0f3      	b.n	80055e6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	2b02      	cmp	r3, #2
 8005404:	d13c      	bne.n	8005480 <HAL_RCC_ClockConfig+0x178>
 8005406:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800540a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800540c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800540e:	fa93 f3a3 	rbit	r3, r3
 8005412:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005416:	fab3 f383 	clz	r3, r3
 800541a:	b2db      	uxtb	r3, r3
 800541c:	095b      	lsrs	r3, r3, #5
 800541e:	b2db      	uxtb	r3, r3
 8005420:	f043 0301 	orr.w	r3, r3, #1
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b01      	cmp	r3, #1
 8005428:	d102      	bne.n	8005430 <HAL_RCC_ClockConfig+0x128>
 800542a:	4b4f      	ldr	r3, [pc, #316]	; (8005568 <HAL_RCC_ClockConfig+0x260>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	e00f      	b.n	8005450 <HAL_RCC_ClockConfig+0x148>
 8005430:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005434:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005438:	fa93 f3a3 	rbit	r3, r3
 800543c:	647b      	str	r3, [r7, #68]	; 0x44
 800543e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005442:	643b      	str	r3, [r7, #64]	; 0x40
 8005444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005446:	fa93 f3a3 	rbit	r3, r3
 800544a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800544c:	4b46      	ldr	r3, [pc, #280]	; (8005568 <HAL_RCC_ClockConfig+0x260>)
 800544e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005450:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005454:	63ba      	str	r2, [r7, #56]	; 0x38
 8005456:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005458:	fa92 f2a2 	rbit	r2, r2
 800545c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800545e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005460:	fab2 f282 	clz	r2, r2
 8005464:	b2d2      	uxtb	r2, r2
 8005466:	f042 0220 	orr.w	r2, r2, #32
 800546a:	b2d2      	uxtb	r2, r2
 800546c:	f002 021f 	and.w	r2, r2, #31
 8005470:	2101      	movs	r1, #1
 8005472:	fa01 f202 	lsl.w	r2, r1, r2
 8005476:	4013      	ands	r3, r2
 8005478:	2b00      	cmp	r3, #0
 800547a:	d13a      	bne.n	80054f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e0b2      	b.n	80055e6 <HAL_RCC_ClockConfig+0x2de>
 8005480:	2302      	movs	r3, #2
 8005482:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005486:	fa93 f3a3 	rbit	r3, r3
 800548a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800548c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800548e:	fab3 f383 	clz	r3, r3
 8005492:	b2db      	uxtb	r3, r3
 8005494:	095b      	lsrs	r3, r3, #5
 8005496:	b2db      	uxtb	r3, r3
 8005498:	f043 0301 	orr.w	r3, r3, #1
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d102      	bne.n	80054a8 <HAL_RCC_ClockConfig+0x1a0>
 80054a2:	4b31      	ldr	r3, [pc, #196]	; (8005568 <HAL_RCC_ClockConfig+0x260>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	e00d      	b.n	80054c4 <HAL_RCC_ClockConfig+0x1bc>
 80054a8:	2302      	movs	r3, #2
 80054aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ae:	fa93 f3a3 	rbit	r3, r3
 80054b2:	627b      	str	r3, [r7, #36]	; 0x24
 80054b4:	2302      	movs	r3, #2
 80054b6:	623b      	str	r3, [r7, #32]
 80054b8:	6a3b      	ldr	r3, [r7, #32]
 80054ba:	fa93 f3a3 	rbit	r3, r3
 80054be:	61fb      	str	r3, [r7, #28]
 80054c0:	4b29      	ldr	r3, [pc, #164]	; (8005568 <HAL_RCC_ClockConfig+0x260>)
 80054c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c4:	2202      	movs	r2, #2
 80054c6:	61ba      	str	r2, [r7, #24]
 80054c8:	69ba      	ldr	r2, [r7, #24]
 80054ca:	fa92 f2a2 	rbit	r2, r2
 80054ce:	617a      	str	r2, [r7, #20]
  return result;
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	fab2 f282 	clz	r2, r2
 80054d6:	b2d2      	uxtb	r2, r2
 80054d8:	f042 0220 	orr.w	r2, r2, #32
 80054dc:	b2d2      	uxtb	r2, r2
 80054de:	f002 021f 	and.w	r2, r2, #31
 80054e2:	2101      	movs	r1, #1
 80054e4:	fa01 f202 	lsl.w	r2, r1, r2
 80054e8:	4013      	ands	r3, r2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d101      	bne.n	80054f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e079      	b.n	80055e6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054f2:	4b1d      	ldr	r3, [pc, #116]	; (8005568 <HAL_RCC_ClockConfig+0x260>)
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f023 0203 	bic.w	r2, r3, #3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	491a      	ldr	r1, [pc, #104]	; (8005568 <HAL_RCC_ClockConfig+0x260>)
 8005500:	4313      	orrs	r3, r2
 8005502:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005504:	f7fc fdb6 	bl	8002074 <HAL_GetTick>
 8005508:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800550a:	e00a      	b.n	8005522 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800550c:	f7fc fdb2 	bl	8002074 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	f241 3288 	movw	r2, #5000	; 0x1388
 800551a:	4293      	cmp	r3, r2
 800551c:	d901      	bls.n	8005522 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e061      	b.n	80055e6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005522:	4b11      	ldr	r3, [pc, #68]	; (8005568 <HAL_RCC_ClockConfig+0x260>)
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f003 020c 	and.w	r2, r3, #12
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	429a      	cmp	r2, r3
 8005532:	d1eb      	bne.n	800550c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005534:	4b0b      	ldr	r3, [pc, #44]	; (8005564 <HAL_RCC_ClockConfig+0x25c>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0307 	and.w	r3, r3, #7
 800553c:	683a      	ldr	r2, [r7, #0]
 800553e:	429a      	cmp	r2, r3
 8005540:	d214      	bcs.n	800556c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005542:	4b08      	ldr	r3, [pc, #32]	; (8005564 <HAL_RCC_ClockConfig+0x25c>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f023 0207 	bic.w	r2, r3, #7
 800554a:	4906      	ldr	r1, [pc, #24]	; (8005564 <HAL_RCC_ClockConfig+0x25c>)
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	4313      	orrs	r3, r2
 8005550:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005552:	4b04      	ldr	r3, [pc, #16]	; (8005564 <HAL_RCC_ClockConfig+0x25c>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0307 	and.w	r3, r3, #7
 800555a:	683a      	ldr	r2, [r7, #0]
 800555c:	429a      	cmp	r2, r3
 800555e:	d005      	beq.n	800556c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e040      	b.n	80055e6 <HAL_RCC_ClockConfig+0x2de>
 8005564:	40022000 	.word	0x40022000
 8005568:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0304 	and.w	r3, r3, #4
 8005574:	2b00      	cmp	r3, #0
 8005576:	d008      	beq.n	800558a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005578:	4b1d      	ldr	r3, [pc, #116]	; (80055f0 <HAL_RCC_ClockConfig+0x2e8>)
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	491a      	ldr	r1, [pc, #104]	; (80055f0 <HAL_RCC_ClockConfig+0x2e8>)
 8005586:	4313      	orrs	r3, r2
 8005588:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0308 	and.w	r3, r3, #8
 8005592:	2b00      	cmp	r3, #0
 8005594:	d009      	beq.n	80055aa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005596:	4b16      	ldr	r3, [pc, #88]	; (80055f0 <HAL_RCC_ClockConfig+0x2e8>)
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	00db      	lsls	r3, r3, #3
 80055a4:	4912      	ldr	r1, [pc, #72]	; (80055f0 <HAL_RCC_ClockConfig+0x2e8>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80055aa:	f000 f829 	bl	8005600 <HAL_RCC_GetSysClockFreq>
 80055ae:	4601      	mov	r1, r0
 80055b0:	4b0f      	ldr	r3, [pc, #60]	; (80055f0 <HAL_RCC_ClockConfig+0x2e8>)
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055b8:	22f0      	movs	r2, #240	; 0xf0
 80055ba:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	fa92 f2a2 	rbit	r2, r2
 80055c2:	60fa      	str	r2, [r7, #12]
  return result;
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	fab2 f282 	clz	r2, r2
 80055ca:	b2d2      	uxtb	r2, r2
 80055cc:	40d3      	lsrs	r3, r2
 80055ce:	4a09      	ldr	r2, [pc, #36]	; (80055f4 <HAL_RCC_ClockConfig+0x2ec>)
 80055d0:	5cd3      	ldrb	r3, [r2, r3]
 80055d2:	fa21 f303 	lsr.w	r3, r1, r3
 80055d6:	4a08      	ldr	r2, [pc, #32]	; (80055f8 <HAL_RCC_ClockConfig+0x2f0>)
 80055d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80055da:	4b08      	ldr	r3, [pc, #32]	; (80055fc <HAL_RCC_ClockConfig+0x2f4>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4618      	mov	r0, r3
 80055e0:	f7fc fd04 	bl	8001fec <HAL_InitTick>
  
  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3778      	adds	r7, #120	; 0x78
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	40021000 	.word	0x40021000
 80055f4:	0800aba4 	.word	0x0800aba4
 80055f8:	20000000 	.word	0x20000000
 80055fc:	20000004 	.word	0x20000004

08005600 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005600:	b480      	push	{r7}
 8005602:	b08b      	sub	sp, #44	; 0x2c
 8005604:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005606:	2300      	movs	r3, #0
 8005608:	61fb      	str	r3, [r7, #28]
 800560a:	2300      	movs	r3, #0
 800560c:	61bb      	str	r3, [r7, #24]
 800560e:	2300      	movs	r3, #0
 8005610:	627b      	str	r3, [r7, #36]	; 0x24
 8005612:	2300      	movs	r3, #0
 8005614:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005616:	2300      	movs	r3, #0
 8005618:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800561a:	4b2a      	ldr	r3, [pc, #168]	; (80056c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	f003 030c 	and.w	r3, r3, #12
 8005626:	2b04      	cmp	r3, #4
 8005628:	d002      	beq.n	8005630 <HAL_RCC_GetSysClockFreq+0x30>
 800562a:	2b08      	cmp	r3, #8
 800562c:	d003      	beq.n	8005636 <HAL_RCC_GetSysClockFreq+0x36>
 800562e:	e03f      	b.n	80056b0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005630:	4b25      	ldr	r3, [pc, #148]	; (80056c8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005632:	623b      	str	r3, [r7, #32]
      break;
 8005634:	e03f      	b.n	80056b6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800563c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005640:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005642:	68ba      	ldr	r2, [r7, #8]
 8005644:	fa92 f2a2 	rbit	r2, r2
 8005648:	607a      	str	r2, [r7, #4]
  return result;
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	fab2 f282 	clz	r2, r2
 8005650:	b2d2      	uxtb	r2, r2
 8005652:	40d3      	lsrs	r3, r2
 8005654:	4a1d      	ldr	r2, [pc, #116]	; (80056cc <HAL_RCC_GetSysClockFreq+0xcc>)
 8005656:	5cd3      	ldrb	r3, [r2, r3]
 8005658:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800565a:	4b1a      	ldr	r3, [pc, #104]	; (80056c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800565c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565e:	f003 030f 	and.w	r3, r3, #15
 8005662:	220f      	movs	r2, #15
 8005664:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	fa92 f2a2 	rbit	r2, r2
 800566c:	60fa      	str	r2, [r7, #12]
  return result;
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	fab2 f282 	clz	r2, r2
 8005674:	b2d2      	uxtb	r2, r2
 8005676:	40d3      	lsrs	r3, r2
 8005678:	4a15      	ldr	r2, [pc, #84]	; (80056d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800567a:	5cd3      	ldrb	r3, [r2, r3]
 800567c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d008      	beq.n	800569a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005688:	4a0f      	ldr	r2, [pc, #60]	; (80056c8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	fb02 f303 	mul.w	r3, r2, r3
 8005696:	627b      	str	r3, [r7, #36]	; 0x24
 8005698:	e007      	b.n	80056aa <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800569a:	4a0b      	ldr	r2, [pc, #44]	; (80056c8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	fbb2 f2f3 	udiv	r2, r2, r3
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	fb02 f303 	mul.w	r3, r2, r3
 80056a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80056aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ac:	623b      	str	r3, [r7, #32]
      break;
 80056ae:	e002      	b.n	80056b6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80056b0:	4b05      	ldr	r3, [pc, #20]	; (80056c8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80056b2:	623b      	str	r3, [r7, #32]
      break;
 80056b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056b6:	6a3b      	ldr	r3, [r7, #32]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	372c      	adds	r7, #44	; 0x2c
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr
 80056c4:	40021000 	.word	0x40021000
 80056c8:	007a1200 	.word	0x007a1200
 80056cc:	0800abbc 	.word	0x0800abbc
 80056d0:	0800abcc 	.word	0x0800abcc

080056d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056d4:	b480      	push	{r7}
 80056d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056d8:	4b03      	ldr	r3, [pc, #12]	; (80056e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80056da:	681b      	ldr	r3, [r3, #0]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	20000000 	.word	0x20000000

080056ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80056f2:	f7ff ffef 	bl	80056d4 <HAL_RCC_GetHCLKFreq>
 80056f6:	4601      	mov	r1, r0
 80056f8:	4b0b      	ldr	r3, [pc, #44]	; (8005728 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005700:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005704:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	fa92 f2a2 	rbit	r2, r2
 800570c:	603a      	str	r2, [r7, #0]
  return result;
 800570e:	683a      	ldr	r2, [r7, #0]
 8005710:	fab2 f282 	clz	r2, r2
 8005714:	b2d2      	uxtb	r2, r2
 8005716:	40d3      	lsrs	r3, r2
 8005718:	4a04      	ldr	r2, [pc, #16]	; (800572c <HAL_RCC_GetPCLK1Freq+0x40>)
 800571a:	5cd3      	ldrb	r3, [r2, r3]
 800571c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005720:	4618      	mov	r0, r3
 8005722:	3708      	adds	r7, #8
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	40021000 	.word	0x40021000
 800572c:	0800abb4 	.word	0x0800abb4

08005730 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005736:	f7ff ffcd 	bl	80056d4 <HAL_RCC_GetHCLKFreq>
 800573a:	4601      	mov	r1, r0
 800573c:	4b0b      	ldr	r3, [pc, #44]	; (800576c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005744:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005748:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	fa92 f2a2 	rbit	r2, r2
 8005750:	603a      	str	r2, [r7, #0]
  return result;
 8005752:	683a      	ldr	r2, [r7, #0]
 8005754:	fab2 f282 	clz	r2, r2
 8005758:	b2d2      	uxtb	r2, r2
 800575a:	40d3      	lsrs	r3, r2
 800575c:	4a04      	ldr	r2, [pc, #16]	; (8005770 <HAL_RCC_GetPCLK2Freq+0x40>)
 800575e:	5cd3      	ldrb	r3, [r2, r3]
 8005760:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005764:	4618      	mov	r0, r3
 8005766:	3708      	adds	r7, #8
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	40021000 	.word	0x40021000
 8005770:	0800abb4 	.word	0x0800abb4

08005774 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b092      	sub	sp, #72	; 0x48
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800577c:	2300      	movs	r3, #0
 800577e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005780:	2300      	movs	r3, #0
 8005782:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005784:	2300      	movs	r3, #0
 8005786:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005792:	2b00      	cmp	r3, #0
 8005794:	f000 80d4 	beq.w	8005940 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005798:	4b4e      	ldr	r3, [pc, #312]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800579a:	69db      	ldr	r3, [r3, #28]
 800579c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d10e      	bne.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057a4:	4b4b      	ldr	r3, [pc, #300]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057a6:	69db      	ldr	r3, [r3, #28]
 80057a8:	4a4a      	ldr	r2, [pc, #296]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057ae:	61d3      	str	r3, [r2, #28]
 80057b0:	4b48      	ldr	r3, [pc, #288]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057b2:	69db      	ldr	r3, [r3, #28]
 80057b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057b8:	60bb      	str	r3, [r7, #8]
 80057ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057bc:	2301      	movs	r3, #1
 80057be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057c2:	4b45      	ldr	r3, [pc, #276]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d118      	bne.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057ce:	4b42      	ldr	r3, [pc, #264]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a41      	ldr	r2, [pc, #260]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80057d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057d8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057da:	f7fc fc4b 	bl	8002074 <HAL_GetTick>
 80057de:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057e0:	e008      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057e2:	f7fc fc47 	bl	8002074 <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	2b64      	cmp	r3, #100	; 0x64
 80057ee:	d901      	bls.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e1d6      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057f4:	4b38      	ldr	r3, [pc, #224]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d0f0      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005800:	4b34      	ldr	r3, [pc, #208]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005802:	6a1b      	ldr	r3, [r3, #32]
 8005804:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005808:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800580a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800580c:	2b00      	cmp	r3, #0
 800580e:	f000 8084 	beq.w	800591a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800581a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800581c:	429a      	cmp	r2, r3
 800581e:	d07c      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005820:	4b2c      	ldr	r3, [pc, #176]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005822:	6a1b      	ldr	r3, [r3, #32]
 8005824:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005828:	63fb      	str	r3, [r7, #60]	; 0x3c
 800582a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800582e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005832:	fa93 f3a3 	rbit	r3, r3
 8005836:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800583a:	fab3 f383 	clz	r3, r3
 800583e:	b2db      	uxtb	r3, r3
 8005840:	461a      	mov	r2, r3
 8005842:	4b26      	ldr	r3, [pc, #152]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005844:	4413      	add	r3, r2
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	461a      	mov	r2, r3
 800584a:	2301      	movs	r3, #1
 800584c:	6013      	str	r3, [r2, #0]
 800584e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005852:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005856:	fa93 f3a3 	rbit	r3, r3
 800585a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800585c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800585e:	fab3 f383 	clz	r3, r3
 8005862:	b2db      	uxtb	r3, r3
 8005864:	461a      	mov	r2, r3
 8005866:	4b1d      	ldr	r3, [pc, #116]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005868:	4413      	add	r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	461a      	mov	r2, r3
 800586e:	2300      	movs	r3, #0
 8005870:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005872:	4a18      	ldr	r2, [pc, #96]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005876:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	2b00      	cmp	r3, #0
 8005880:	d04b      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005882:	f7fc fbf7 	bl	8002074 <HAL_GetTick>
 8005886:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005888:	e00a      	b.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800588a:	f7fc fbf3 	bl	8002074 <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	f241 3288 	movw	r2, #5000	; 0x1388
 8005898:	4293      	cmp	r3, r2
 800589a:	d901      	bls.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e180      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80058a0:	2302      	movs	r3, #2
 80058a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a6:	fa93 f3a3 	rbit	r3, r3
 80058aa:	627b      	str	r3, [r7, #36]	; 0x24
 80058ac:	2302      	movs	r3, #2
 80058ae:	623b      	str	r3, [r7, #32]
 80058b0:	6a3b      	ldr	r3, [r7, #32]
 80058b2:	fa93 f3a3 	rbit	r3, r3
 80058b6:	61fb      	str	r3, [r7, #28]
  return result;
 80058b8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058ba:	fab3 f383 	clz	r3, r3
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	095b      	lsrs	r3, r3, #5
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	f043 0302 	orr.w	r3, r3, #2
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d108      	bne.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80058ce:	4b01      	ldr	r3, [pc, #4]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	e00d      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80058d4:	40021000 	.word	0x40021000
 80058d8:	40007000 	.word	0x40007000
 80058dc:	10908100 	.word	0x10908100
 80058e0:	2302      	movs	r3, #2
 80058e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	fa93 f3a3 	rbit	r3, r3
 80058ea:	617b      	str	r3, [r7, #20]
 80058ec:	4b9a      	ldr	r3, [pc, #616]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f0:	2202      	movs	r2, #2
 80058f2:	613a      	str	r2, [r7, #16]
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	fa92 f2a2 	rbit	r2, r2
 80058fa:	60fa      	str	r2, [r7, #12]
  return result;
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	fab2 f282 	clz	r2, r2
 8005902:	b2d2      	uxtb	r2, r2
 8005904:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005908:	b2d2      	uxtb	r2, r2
 800590a:	f002 021f 	and.w	r2, r2, #31
 800590e:	2101      	movs	r1, #1
 8005910:	fa01 f202 	lsl.w	r2, r1, r2
 8005914:	4013      	ands	r3, r2
 8005916:	2b00      	cmp	r3, #0
 8005918:	d0b7      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800591a:	4b8f      	ldr	r3, [pc, #572]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	498c      	ldr	r1, [pc, #560]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005928:	4313      	orrs	r3, r2
 800592a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800592c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005930:	2b01      	cmp	r3, #1
 8005932:	d105      	bne.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005934:	4b88      	ldr	r3, [pc, #544]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005936:	69db      	ldr	r3, [r3, #28]
 8005938:	4a87      	ldr	r2, [pc, #540]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800593a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800593e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0301 	and.w	r3, r3, #1
 8005948:	2b00      	cmp	r3, #0
 800594a:	d008      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800594c:	4b82      	ldr	r3, [pc, #520]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800594e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005950:	f023 0203 	bic.w	r2, r3, #3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	497f      	ldr	r1, [pc, #508]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800595a:	4313      	orrs	r3, r2
 800595c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0302 	and.w	r3, r3, #2
 8005966:	2b00      	cmp	r3, #0
 8005968:	d008      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800596a:	4b7b      	ldr	r3, [pc, #492]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800596c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	4978      	ldr	r1, [pc, #480]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005978:	4313      	orrs	r3, r2
 800597a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0304 	and.w	r3, r3, #4
 8005984:	2b00      	cmp	r3, #0
 8005986:	d008      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005988:	4b73      	ldr	r3, [pc, #460]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800598a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	4970      	ldr	r1, [pc, #448]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005996:	4313      	orrs	r3, r2
 8005998:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0320 	and.w	r3, r3, #32
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d008      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059a6:	4b6c      	ldr	r3, [pc, #432]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80059a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059aa:	f023 0210 	bic.w	r2, r3, #16
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	69db      	ldr	r3, [r3, #28]
 80059b2:	4969      	ldr	r1, [pc, #420]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80059b4:	4313      	orrs	r3, r2
 80059b6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d008      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80059c4:	4b64      	ldr	r3, [pc, #400]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d0:	4961      	ldr	r1, [pc, #388]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d008      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80059e2:	4b5d      	ldr	r3, [pc, #372]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80059e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e6:	f023 0220 	bic.w	r2, r3, #32
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	495a      	ldr	r1, [pc, #360]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d008      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a00:	4b55      	ldr	r3, [pc, #340]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a04:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0c:	4952      	ldr	r1, [pc, #328]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0308 	and.w	r3, r3, #8
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d008      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a1e:	4b4e      	ldr	r3, [pc, #312]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	494b      	ldr	r1, [pc, #300]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0310 	and.w	r3, r3, #16
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d008      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005a3c:	4b46      	ldr	r3, [pc, #280]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a40:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	4943      	ldr	r1, [pc, #268]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d008      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005a5a:	4b3f      	ldr	r3, [pc, #252]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a66:	493c      	ldr	r1, [pc, #240]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d008      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005a78:	4b37      	ldr	r3, [pc, #220]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a84:	4934      	ldr	r1, [pc, #208]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d008      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005a96:	4b30      	ldr	r3, [pc, #192]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa2:	492d      	ldr	r1, [pc, #180]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d008      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005ab4:	4b28      	ldr	r3, [pc, #160]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac0:	4925      	ldr	r1, [pc, #148]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d008      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005ad2:	4b21      	ldr	r3, [pc, #132]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ade:	491e      	ldr	r1, [pc, #120]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d008      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8005af0:	4b19      	ldr	r3, [pc, #100]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afc:	4916      	ldr	r1, [pc, #88]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d008      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8005b0e:	4b12      	ldr	r3, [pc, #72]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b12:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b1a:	490f      	ldr	r1, [pc, #60]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d008      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005b2c:	4b0a      	ldr	r3, [pc, #40]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b30:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b38:	4907      	ldr	r1, [pc, #28]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00c      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005b4a:	4b03      	ldr	r3, [pc, #12]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b4e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	e002      	b.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005b56:	bf00      	nop
 8005b58:	40021000 	.word	0x40021000
 8005b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b5e:	4913      	ldr	r1, [pc, #76]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005b60:	4313      	orrs	r3, r2
 8005b62:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d008      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005b70:	4b0e      	ldr	r3, [pc, #56]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b74:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b7c:	490b      	ldr	r1, [pc, #44]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d008      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8005b8e:	4b07      	ldr	r3, [pc, #28]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b92:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b9a:	4904      	ldr	r1, [pc, #16]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3748      	adds	r7, #72	; 0x48
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	40021000 	.word	0x40021000

08005bb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d101      	bne.n	8005bc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e049      	b.n	8005c56 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d106      	bne.n	8005bdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f7fb ffa0 	bl	8001b1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2202      	movs	r2, #2
 8005be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	3304      	adds	r3, #4
 8005bec:	4619      	mov	r1, r3
 8005bee:	4610      	mov	r0, r2
 8005bf0:	f000 ff70 	bl	8006ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3708      	adds	r7, #8
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
	...

08005c60 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d001      	beq.n	8005c78 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e047      	b.n	8005d08 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a23      	ldr	r2, [pc, #140]	; (8005d14 <HAL_TIM_Base_Start+0xb4>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d01d      	beq.n	8005cc6 <HAL_TIM_Base_Start+0x66>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c92:	d018      	beq.n	8005cc6 <HAL_TIM_Base_Start+0x66>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a1f      	ldr	r2, [pc, #124]	; (8005d18 <HAL_TIM_Base_Start+0xb8>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d013      	beq.n	8005cc6 <HAL_TIM_Base_Start+0x66>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a1e      	ldr	r2, [pc, #120]	; (8005d1c <HAL_TIM_Base_Start+0xbc>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d00e      	beq.n	8005cc6 <HAL_TIM_Base_Start+0x66>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a1c      	ldr	r2, [pc, #112]	; (8005d20 <HAL_TIM_Base_Start+0xc0>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d009      	beq.n	8005cc6 <HAL_TIM_Base_Start+0x66>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a1b      	ldr	r2, [pc, #108]	; (8005d24 <HAL_TIM_Base_Start+0xc4>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d004      	beq.n	8005cc6 <HAL_TIM_Base_Start+0x66>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a19      	ldr	r2, [pc, #100]	; (8005d28 <HAL_TIM_Base_Start+0xc8>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d115      	bne.n	8005cf2 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	689a      	ldr	r2, [r3, #8]
 8005ccc:	4b17      	ldr	r3, [pc, #92]	; (8005d2c <HAL_TIM_Base_Start+0xcc>)
 8005cce:	4013      	ands	r3, r2
 8005cd0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2b06      	cmp	r3, #6
 8005cd6:	d015      	beq.n	8005d04 <HAL_TIM_Base_Start+0xa4>
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cde:	d011      	beq.n	8005d04 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f042 0201 	orr.w	r2, r2, #1
 8005cee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cf0:	e008      	b.n	8005d04 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f042 0201 	orr.w	r2, r2, #1
 8005d00:	601a      	str	r2, [r3, #0]
 8005d02:	e000      	b.n	8005d06 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d04:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d06:	2300      	movs	r3, #0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3714      	adds	r7, #20
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr
 8005d14:	40012c00 	.word	0x40012c00
 8005d18:	40000400 	.word	0x40000400
 8005d1c:	40000800 	.word	0x40000800
 8005d20:	40013400 	.word	0x40013400
 8005d24:	40014000 	.word	0x40014000
 8005d28:	40015000 	.word	0x40015000
 8005d2c:	00010007 	.word	0x00010007

08005d30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d101      	bne.n	8005d42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e049      	b.n	8005dd6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d106      	bne.n	8005d5c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 f841 	bl	8005dde <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2202      	movs	r2, #2
 8005d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	3304      	adds	r3, #4
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	4610      	mov	r0, r2
 8005d70:	f000 feb0 	bl	8006ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3708      	adds	r7, #8
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005dde:	b480      	push	{r7}
 8005de0:	b083      	sub	sp, #12
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005de6:	bf00      	nop
 8005de8:	370c      	adds	r7, #12
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
	...

08005df4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d109      	bne.n	8005e18 <HAL_TIM_PWM_Start+0x24>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	bf14      	ite	ne
 8005e10:	2301      	movne	r3, #1
 8005e12:	2300      	moveq	r3, #0
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	e03c      	b.n	8005e92 <HAL_TIM_PWM_Start+0x9e>
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	2b04      	cmp	r3, #4
 8005e1c:	d109      	bne.n	8005e32 <HAL_TIM_PWM_Start+0x3e>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	bf14      	ite	ne
 8005e2a:	2301      	movne	r3, #1
 8005e2c:	2300      	moveq	r3, #0
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	e02f      	b.n	8005e92 <HAL_TIM_PWM_Start+0x9e>
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	2b08      	cmp	r3, #8
 8005e36:	d109      	bne.n	8005e4c <HAL_TIM_PWM_Start+0x58>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	bf14      	ite	ne
 8005e44:	2301      	movne	r3, #1
 8005e46:	2300      	moveq	r3, #0
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	e022      	b.n	8005e92 <HAL_TIM_PWM_Start+0x9e>
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	2b0c      	cmp	r3, #12
 8005e50:	d109      	bne.n	8005e66 <HAL_TIM_PWM_Start+0x72>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	bf14      	ite	ne
 8005e5e:	2301      	movne	r3, #1
 8005e60:	2300      	moveq	r3, #0
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	e015      	b.n	8005e92 <HAL_TIM_PWM_Start+0x9e>
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	2b10      	cmp	r3, #16
 8005e6a:	d109      	bne.n	8005e80 <HAL_TIM_PWM_Start+0x8c>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	bf14      	ite	ne
 8005e78:	2301      	movne	r3, #1
 8005e7a:	2300      	moveq	r3, #0
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	e008      	b.n	8005e92 <HAL_TIM_PWM_Start+0x9e>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	bf14      	ite	ne
 8005e8c:	2301      	movne	r3, #1
 8005e8e:	2300      	moveq	r3, #0
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d001      	beq.n	8005e9a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e0a1      	b.n	8005fde <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d104      	bne.n	8005eaa <HAL_TIM_PWM_Start+0xb6>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2202      	movs	r2, #2
 8005ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ea8:	e023      	b.n	8005ef2 <HAL_TIM_PWM_Start+0xfe>
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	2b04      	cmp	r3, #4
 8005eae:	d104      	bne.n	8005eba <HAL_TIM_PWM_Start+0xc6>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005eb8:	e01b      	b.n	8005ef2 <HAL_TIM_PWM_Start+0xfe>
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	2b08      	cmp	r3, #8
 8005ebe:	d104      	bne.n	8005eca <HAL_TIM_PWM_Start+0xd6>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ec8:	e013      	b.n	8005ef2 <HAL_TIM_PWM_Start+0xfe>
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	2b0c      	cmp	r3, #12
 8005ece:	d104      	bne.n	8005eda <HAL_TIM_PWM_Start+0xe6>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ed8:	e00b      	b.n	8005ef2 <HAL_TIM_PWM_Start+0xfe>
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2b10      	cmp	r3, #16
 8005ede:	d104      	bne.n	8005eea <HAL_TIM_PWM_Start+0xf6>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ee8:	e003      	b.n	8005ef2 <HAL_TIM_PWM_Start+0xfe>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2202      	movs	r2, #2
 8005eee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	6839      	ldr	r1, [r7, #0]
 8005efa:	4618      	mov	r0, r3
 8005efc:	f001 fb4c 	bl	8007598 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a38      	ldr	r2, [pc, #224]	; (8005fe8 <HAL_TIM_PWM_Start+0x1f4>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d018      	beq.n	8005f3c <HAL_TIM_PWM_Start+0x148>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a37      	ldr	r2, [pc, #220]	; (8005fec <HAL_TIM_PWM_Start+0x1f8>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d013      	beq.n	8005f3c <HAL_TIM_PWM_Start+0x148>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a35      	ldr	r2, [pc, #212]	; (8005ff0 <HAL_TIM_PWM_Start+0x1fc>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d00e      	beq.n	8005f3c <HAL_TIM_PWM_Start+0x148>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a34      	ldr	r2, [pc, #208]	; (8005ff4 <HAL_TIM_PWM_Start+0x200>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d009      	beq.n	8005f3c <HAL_TIM_PWM_Start+0x148>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a32      	ldr	r2, [pc, #200]	; (8005ff8 <HAL_TIM_PWM_Start+0x204>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d004      	beq.n	8005f3c <HAL_TIM_PWM_Start+0x148>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a31      	ldr	r2, [pc, #196]	; (8005ffc <HAL_TIM_PWM_Start+0x208>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d101      	bne.n	8005f40 <HAL_TIM_PWM_Start+0x14c>
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e000      	b.n	8005f42 <HAL_TIM_PWM_Start+0x14e>
 8005f40:	2300      	movs	r3, #0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d007      	beq.n	8005f56 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a23      	ldr	r2, [pc, #140]	; (8005fe8 <HAL_TIM_PWM_Start+0x1f4>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d01d      	beq.n	8005f9c <HAL_TIM_PWM_Start+0x1a8>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f68:	d018      	beq.n	8005f9c <HAL_TIM_PWM_Start+0x1a8>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a24      	ldr	r2, [pc, #144]	; (8006000 <HAL_TIM_PWM_Start+0x20c>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d013      	beq.n	8005f9c <HAL_TIM_PWM_Start+0x1a8>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a22      	ldr	r2, [pc, #136]	; (8006004 <HAL_TIM_PWM_Start+0x210>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d00e      	beq.n	8005f9c <HAL_TIM_PWM_Start+0x1a8>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a1a      	ldr	r2, [pc, #104]	; (8005fec <HAL_TIM_PWM_Start+0x1f8>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d009      	beq.n	8005f9c <HAL_TIM_PWM_Start+0x1a8>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a18      	ldr	r2, [pc, #96]	; (8005ff0 <HAL_TIM_PWM_Start+0x1fc>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d004      	beq.n	8005f9c <HAL_TIM_PWM_Start+0x1a8>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a19      	ldr	r2, [pc, #100]	; (8005ffc <HAL_TIM_PWM_Start+0x208>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d115      	bne.n	8005fc8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	689a      	ldr	r2, [r3, #8]
 8005fa2:	4b19      	ldr	r3, [pc, #100]	; (8006008 <HAL_TIM_PWM_Start+0x214>)
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2b06      	cmp	r3, #6
 8005fac:	d015      	beq.n	8005fda <HAL_TIM_PWM_Start+0x1e6>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fb4:	d011      	beq.n	8005fda <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f042 0201 	orr.w	r2, r2, #1
 8005fc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fc6:	e008      	b.n	8005fda <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f042 0201 	orr.w	r2, r2, #1
 8005fd6:	601a      	str	r2, [r3, #0]
 8005fd8:	e000      	b.n	8005fdc <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fda:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3710      	adds	r7, #16
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	40012c00 	.word	0x40012c00
 8005fec:	40013400 	.word	0x40013400
 8005ff0:	40014000 	.word	0x40014000
 8005ff4:	40014400 	.word	0x40014400
 8005ff8:	40014800 	.word	0x40014800
 8005ffc:	40015000 	.word	0x40015000
 8006000:	40000400 	.word	0x40000400
 8006004:	40000800 	.word	0x40000800
 8006008:	00010007 	.word	0x00010007

0800600c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d101      	bne.n	800601e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e049      	b.n	80060b2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b00      	cmp	r3, #0
 8006028:	d106      	bne.n	8006038 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 f841 	bl	80060ba <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2202      	movs	r2, #2
 800603c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	3304      	adds	r3, #4
 8006048:	4619      	mov	r1, r3
 800604a:	4610      	mov	r0, r2
 800604c:	f000 fd42 	bl	8006ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3708      	adds	r7, #8
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b083      	sub	sp, #12
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80060c2:	bf00      	nop
 80060c4:	370c      	adds	r7, #12
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
	...

080060d0 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d104      	bne.n	80060ea <HAL_TIM_IC_Start+0x1a>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	e023      	b.n	8006132 <HAL_TIM_IC_Start+0x62>
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	2b04      	cmp	r3, #4
 80060ee:	d104      	bne.n	80060fa <HAL_TIM_IC_Start+0x2a>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	e01b      	b.n	8006132 <HAL_TIM_IC_Start+0x62>
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	2b08      	cmp	r3, #8
 80060fe:	d104      	bne.n	800610a <HAL_TIM_IC_Start+0x3a>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006106:	b2db      	uxtb	r3, r3
 8006108:	e013      	b.n	8006132 <HAL_TIM_IC_Start+0x62>
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	2b0c      	cmp	r3, #12
 800610e:	d104      	bne.n	800611a <HAL_TIM_IC_Start+0x4a>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006116:	b2db      	uxtb	r3, r3
 8006118:	e00b      	b.n	8006132 <HAL_TIM_IC_Start+0x62>
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	2b10      	cmp	r3, #16
 800611e:	d104      	bne.n	800612a <HAL_TIM_IC_Start+0x5a>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006126:	b2db      	uxtb	r3, r3
 8006128:	e003      	b.n	8006132 <HAL_TIM_IC_Start+0x62>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006130:	b2db      	uxtb	r3, r3
 8006132:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d104      	bne.n	8006144 <HAL_TIM_IC_Start+0x74>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006140:	b2db      	uxtb	r3, r3
 8006142:	e013      	b.n	800616c <HAL_TIM_IC_Start+0x9c>
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	2b04      	cmp	r3, #4
 8006148:	d104      	bne.n	8006154 <HAL_TIM_IC_Start+0x84>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006150:	b2db      	uxtb	r3, r3
 8006152:	e00b      	b.n	800616c <HAL_TIM_IC_Start+0x9c>
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	2b08      	cmp	r3, #8
 8006158:	d104      	bne.n	8006164 <HAL_TIM_IC_Start+0x94>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006160:	b2db      	uxtb	r3, r3
 8006162:	e003      	b.n	800616c <HAL_TIM_IC_Start+0x9c>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800616a:	b2db      	uxtb	r3, r3
 800616c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800616e:	7bfb      	ldrb	r3, [r7, #15]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d102      	bne.n	800617a <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006174:	7bbb      	ldrb	r3, [r7, #14]
 8006176:	2b01      	cmp	r3, #1
 8006178:	d001      	beq.n	800617e <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e092      	b.n	80062a4 <HAL_TIM_IC_Start+0x1d4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d104      	bne.n	800618e <HAL_TIM_IC_Start+0xbe>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2202      	movs	r2, #2
 8006188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800618c:	e023      	b.n	80061d6 <HAL_TIM_IC_Start+0x106>
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	2b04      	cmp	r3, #4
 8006192:	d104      	bne.n	800619e <HAL_TIM_IC_Start+0xce>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2202      	movs	r2, #2
 8006198:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800619c:	e01b      	b.n	80061d6 <HAL_TIM_IC_Start+0x106>
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	2b08      	cmp	r3, #8
 80061a2:	d104      	bne.n	80061ae <HAL_TIM_IC_Start+0xde>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2202      	movs	r2, #2
 80061a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061ac:	e013      	b.n	80061d6 <HAL_TIM_IC_Start+0x106>
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	2b0c      	cmp	r3, #12
 80061b2:	d104      	bne.n	80061be <HAL_TIM_IC_Start+0xee>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2202      	movs	r2, #2
 80061b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061bc:	e00b      	b.n	80061d6 <HAL_TIM_IC_Start+0x106>
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	2b10      	cmp	r3, #16
 80061c2:	d104      	bne.n	80061ce <HAL_TIM_IC_Start+0xfe>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2202      	movs	r2, #2
 80061c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061cc:	e003      	b.n	80061d6 <HAL_TIM_IC_Start+0x106>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2202      	movs	r2, #2
 80061d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d104      	bne.n	80061e6 <HAL_TIM_IC_Start+0x116>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2202      	movs	r2, #2
 80061e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061e4:	e013      	b.n	800620e <HAL_TIM_IC_Start+0x13e>
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	2b04      	cmp	r3, #4
 80061ea:	d104      	bne.n	80061f6 <HAL_TIM_IC_Start+0x126>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2202      	movs	r2, #2
 80061f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061f4:	e00b      	b.n	800620e <HAL_TIM_IC_Start+0x13e>
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	2b08      	cmp	r3, #8
 80061fa:	d104      	bne.n	8006206 <HAL_TIM_IC_Start+0x136>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2202      	movs	r2, #2
 8006200:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006204:	e003      	b.n	800620e <HAL_TIM_IC_Start+0x13e>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2202      	movs	r2, #2
 800620a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2201      	movs	r2, #1
 8006214:	6839      	ldr	r1, [r7, #0]
 8006216:	4618      	mov	r0, r3
 8006218:	f001 f9be 	bl	8007598 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a22      	ldr	r2, [pc, #136]	; (80062ac <HAL_TIM_IC_Start+0x1dc>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d01d      	beq.n	8006262 <HAL_TIM_IC_Start+0x192>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800622e:	d018      	beq.n	8006262 <HAL_TIM_IC_Start+0x192>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a1e      	ldr	r2, [pc, #120]	; (80062b0 <HAL_TIM_IC_Start+0x1e0>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d013      	beq.n	8006262 <HAL_TIM_IC_Start+0x192>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a1d      	ldr	r2, [pc, #116]	; (80062b4 <HAL_TIM_IC_Start+0x1e4>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d00e      	beq.n	8006262 <HAL_TIM_IC_Start+0x192>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a1b      	ldr	r2, [pc, #108]	; (80062b8 <HAL_TIM_IC_Start+0x1e8>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d009      	beq.n	8006262 <HAL_TIM_IC_Start+0x192>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a1a      	ldr	r2, [pc, #104]	; (80062bc <HAL_TIM_IC_Start+0x1ec>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d004      	beq.n	8006262 <HAL_TIM_IC_Start+0x192>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a18      	ldr	r2, [pc, #96]	; (80062c0 <HAL_TIM_IC_Start+0x1f0>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d115      	bne.n	800628e <HAL_TIM_IC_Start+0x1be>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	689a      	ldr	r2, [r3, #8]
 8006268:	4b16      	ldr	r3, [pc, #88]	; (80062c4 <HAL_TIM_IC_Start+0x1f4>)
 800626a:	4013      	ands	r3, r2
 800626c:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	2b06      	cmp	r3, #6
 8006272:	d015      	beq.n	80062a0 <HAL_TIM_IC_Start+0x1d0>
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800627a:	d011      	beq.n	80062a0 <HAL_TIM_IC_Start+0x1d0>
    {
      __HAL_TIM_ENABLE(htim);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f042 0201 	orr.w	r2, r2, #1
 800628a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800628c:	e008      	b.n	80062a0 <HAL_TIM_IC_Start+0x1d0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f042 0201 	orr.w	r2, r2, #1
 800629c:	601a      	str	r2, [r3, #0]
 800629e:	e000      	b.n	80062a2 <HAL_TIM_IC_Start+0x1d2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	40012c00 	.word	0x40012c00
 80062b0:	40000400 	.word	0x40000400
 80062b4:	40000800 	.word	0x40000800
 80062b8:	40013400 	.word	0x40013400
 80062bc:	40014000 	.word	0x40014000
 80062c0:	40015000 	.word	0x40015000
 80062c4:	00010007 	.word	0x00010007

080062c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	f003 0302 	and.w	r3, r3, #2
 80062da:	2b02      	cmp	r3, #2
 80062dc:	d122      	bne.n	8006324 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	f003 0302 	and.w	r3, r3, #2
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d11b      	bne.n	8006324 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f06f 0202 	mvn.w	r2, #2
 80062f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2201      	movs	r2, #1
 80062fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	f003 0303 	and.w	r3, r3, #3
 8006306:	2b00      	cmp	r3, #0
 8006308:	d003      	beq.n	8006312 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f7fa fc74 	bl	8000bf8 <HAL_TIM_IC_CaptureCallback>
 8006310:	e005      	b.n	800631e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 fbc0 	bl	8006a98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 fbc7 	bl	8006aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	f003 0304 	and.w	r3, r3, #4
 800632e:	2b04      	cmp	r3, #4
 8006330:	d122      	bne.n	8006378 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	f003 0304 	and.w	r3, r3, #4
 800633c:	2b04      	cmp	r3, #4
 800633e:	d11b      	bne.n	8006378 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f06f 0204 	mvn.w	r2, #4
 8006348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2202      	movs	r2, #2
 800634e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800635a:	2b00      	cmp	r3, #0
 800635c:	d003      	beq.n	8006366 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f7fa fc4a 	bl	8000bf8 <HAL_TIM_IC_CaptureCallback>
 8006364:	e005      	b.n	8006372 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 fb96 	bl	8006a98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 fb9d 	bl	8006aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	f003 0308 	and.w	r3, r3, #8
 8006382:	2b08      	cmp	r3, #8
 8006384:	d122      	bne.n	80063cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	f003 0308 	and.w	r3, r3, #8
 8006390:	2b08      	cmp	r3, #8
 8006392:	d11b      	bne.n	80063cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f06f 0208 	mvn.w	r2, #8
 800639c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2204      	movs	r2, #4
 80063a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	69db      	ldr	r3, [r3, #28]
 80063aa:	f003 0303 	and.w	r3, r3, #3
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d003      	beq.n	80063ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f7fa fc20 	bl	8000bf8 <HAL_TIM_IC_CaptureCallback>
 80063b8:	e005      	b.n	80063c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 fb6c 	bl	8006a98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 fb73 	bl	8006aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	f003 0310 	and.w	r3, r3, #16
 80063d6:	2b10      	cmp	r3, #16
 80063d8:	d122      	bne.n	8006420 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	f003 0310 	and.w	r3, r3, #16
 80063e4:	2b10      	cmp	r3, #16
 80063e6:	d11b      	bne.n	8006420 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f06f 0210 	mvn.w	r2, #16
 80063f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2208      	movs	r2, #8
 80063f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	69db      	ldr	r3, [r3, #28]
 80063fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006402:	2b00      	cmp	r3, #0
 8006404:	d003      	beq.n	800640e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f7fa fbf6 	bl	8000bf8 <HAL_TIM_IC_CaptureCallback>
 800640c:	e005      	b.n	800641a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 fb42 	bl	8006a98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 fb49 	bl	8006aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	f003 0301 	and.w	r3, r3, #1
 800642a:	2b01      	cmp	r3, #1
 800642c:	d10e      	bne.n	800644c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	f003 0301 	and.w	r3, r3, #1
 8006438:	2b01      	cmp	r3, #1
 800643a:	d107      	bne.n	800644c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f06f 0201 	mvn.w	r2, #1
 8006444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 fb1c 	bl	8006a84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006456:	2b80      	cmp	r3, #128	; 0x80
 8006458:	d10e      	bne.n	8006478 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006464:	2b80      	cmp	r3, #128	; 0x80
 8006466:	d107      	bne.n	8006478 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f001 f9d2 	bl	800781c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006486:	d10e      	bne.n	80064a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006492:	2b80      	cmp	r3, #128	; 0x80
 8006494:	d107      	bne.n	80064a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800649e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f001 f9c5 	bl	8007830 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b0:	2b40      	cmp	r3, #64	; 0x40
 80064b2:	d10e      	bne.n	80064d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064be:	2b40      	cmp	r3, #64	; 0x40
 80064c0:	d107      	bne.n	80064d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80064ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 faf7 	bl	8006ac0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	f003 0320 	and.w	r3, r3, #32
 80064dc:	2b20      	cmp	r3, #32
 80064de:	d10e      	bne.n	80064fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	f003 0320 	and.w	r3, r3, #32
 80064ea:	2b20      	cmp	r3, #32
 80064ec:	d107      	bne.n	80064fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f06f 0220 	mvn.w	r2, #32
 80064f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f001 f985 	bl	8007808 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064fe:	bf00      	nop
 8006500:	3708      	adds	r7, #8
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006506:	b580      	push	{r7, lr}
 8006508:	b086      	sub	sp, #24
 800650a:	af00      	add	r7, sp, #0
 800650c:	60f8      	str	r0, [r7, #12]
 800650e:	60b9      	str	r1, [r7, #8]
 8006510:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006512:	2300      	movs	r3, #0
 8006514:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800651c:	2b01      	cmp	r3, #1
 800651e:	d101      	bne.n	8006524 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006520:	2302      	movs	r3, #2
 8006522:	e088      	b.n	8006636 <HAL_TIM_IC_ConfigChannel+0x130>
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d11b      	bne.n	800656a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006542:	f000 fe6b 	bl	800721c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	699a      	ldr	r2, [r3, #24]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f022 020c 	bic.w	r2, r2, #12
 8006554:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	6999      	ldr	r1, [r3, #24]
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	689a      	ldr	r2, [r3, #8]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	430a      	orrs	r2, r1
 8006566:	619a      	str	r2, [r3, #24]
 8006568:	e060      	b.n	800662c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b04      	cmp	r3, #4
 800656e:	d11c      	bne.n	80065aa <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006580:	f000 fee9 	bl	8007356 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	699a      	ldr	r2, [r3, #24]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006592:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6999      	ldr	r1, [r3, #24]
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	021a      	lsls	r2, r3, #8
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	430a      	orrs	r2, r1
 80065a6:	619a      	str	r2, [r3, #24]
 80065a8:	e040      	b.n	800662c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2b08      	cmp	r3, #8
 80065ae:	d11b      	bne.n	80065e8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80065c0:	f000 ff36 	bl	8007430 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	69da      	ldr	r2, [r3, #28]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f022 020c 	bic.w	r2, r2, #12
 80065d2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	69d9      	ldr	r1, [r3, #28]
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	689a      	ldr	r2, [r3, #8]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	430a      	orrs	r2, r1
 80065e4:	61da      	str	r2, [r3, #28]
 80065e6:	e021      	b.n	800662c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2b0c      	cmp	r3, #12
 80065ec:	d11c      	bne.n	8006628 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80065fe:	f000 ff53 	bl	80074a8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	69da      	ldr	r2, [r3, #28]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006610:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	69d9      	ldr	r1, [r3, #28]
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	021a      	lsls	r2, r3, #8
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	430a      	orrs	r2, r1
 8006624:	61da      	str	r2, [r3, #28]
 8006626:	e001      	b.n	800662c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006634:	7dfb      	ldrb	r3, [r7, #23]
}
 8006636:	4618      	mov	r0, r3
 8006638:	3718      	adds	r7, #24
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
	...

08006640 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b086      	sub	sp, #24
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800664c:	2300      	movs	r3, #0
 800664e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006656:	2b01      	cmp	r3, #1
 8006658:	d101      	bne.n	800665e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800665a:	2302      	movs	r3, #2
 800665c:	e0ff      	b.n	800685e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2201      	movs	r2, #1
 8006662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2b14      	cmp	r3, #20
 800666a:	f200 80f0 	bhi.w	800684e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800666e:	a201      	add	r2, pc, #4	; (adr r2, 8006674 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006674:	080066c9 	.word	0x080066c9
 8006678:	0800684f 	.word	0x0800684f
 800667c:	0800684f 	.word	0x0800684f
 8006680:	0800684f 	.word	0x0800684f
 8006684:	08006709 	.word	0x08006709
 8006688:	0800684f 	.word	0x0800684f
 800668c:	0800684f 	.word	0x0800684f
 8006690:	0800684f 	.word	0x0800684f
 8006694:	0800674b 	.word	0x0800674b
 8006698:	0800684f 	.word	0x0800684f
 800669c:	0800684f 	.word	0x0800684f
 80066a0:	0800684f 	.word	0x0800684f
 80066a4:	0800678b 	.word	0x0800678b
 80066a8:	0800684f 	.word	0x0800684f
 80066ac:	0800684f 	.word	0x0800684f
 80066b0:	0800684f 	.word	0x0800684f
 80066b4:	080067cd 	.word	0x080067cd
 80066b8:	0800684f 	.word	0x0800684f
 80066bc:	0800684f 	.word	0x0800684f
 80066c0:	0800684f 	.word	0x0800684f
 80066c4:	0800680d 	.word	0x0800680d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68b9      	ldr	r1, [r7, #8]
 80066ce:	4618      	mov	r0, r3
 80066d0:	f000 fa9e 	bl	8006c10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	699a      	ldr	r2, [r3, #24]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f042 0208 	orr.w	r2, r2, #8
 80066e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	699a      	ldr	r2, [r3, #24]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f022 0204 	bic.w	r2, r2, #4
 80066f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	6999      	ldr	r1, [r3, #24]
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	691a      	ldr	r2, [r3, #16]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	430a      	orrs	r2, r1
 8006704:	619a      	str	r2, [r3, #24]
      break;
 8006706:	e0a5      	b.n	8006854 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68b9      	ldr	r1, [r7, #8]
 800670e:	4618      	mov	r0, r3
 8006710:	f000 fb18 	bl	8006d44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	699a      	ldr	r2, [r3, #24]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006722:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	699a      	ldr	r2, [r3, #24]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006732:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6999      	ldr	r1, [r3, #24]
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	021a      	lsls	r2, r3, #8
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	430a      	orrs	r2, r1
 8006746:	619a      	str	r2, [r3, #24]
      break;
 8006748:	e084      	b.n	8006854 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68b9      	ldr	r1, [r7, #8]
 8006750:	4618      	mov	r0, r3
 8006752:	f000 fb8b 	bl	8006e6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	69da      	ldr	r2, [r3, #28]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f042 0208 	orr.w	r2, r2, #8
 8006764:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	69da      	ldr	r2, [r3, #28]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f022 0204 	bic.w	r2, r2, #4
 8006774:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	69d9      	ldr	r1, [r3, #28]
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	691a      	ldr	r2, [r3, #16]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	430a      	orrs	r2, r1
 8006786:	61da      	str	r2, [r3, #28]
      break;
 8006788:	e064      	b.n	8006854 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68b9      	ldr	r1, [r7, #8]
 8006790:	4618      	mov	r0, r3
 8006792:	f000 fbfd 	bl	8006f90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	69da      	ldr	r2, [r3, #28]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	69da      	ldr	r2, [r3, #28]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	69d9      	ldr	r1, [r3, #28]
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	021a      	lsls	r2, r3, #8
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	430a      	orrs	r2, r1
 80067c8:	61da      	str	r2, [r3, #28]
      break;
 80067ca:	e043      	b.n	8006854 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68b9      	ldr	r1, [r7, #8]
 80067d2:	4618      	mov	r0, r3
 80067d4:	f000 fc4c 	bl	8007070 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f042 0208 	orr.w	r2, r2, #8
 80067e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f022 0204 	bic.w	r2, r2, #4
 80067f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	691a      	ldr	r2, [r3, #16]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	430a      	orrs	r2, r1
 8006808:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800680a:	e023      	b.n	8006854 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68b9      	ldr	r1, [r7, #8]
 8006812:	4618      	mov	r0, r3
 8006814:	f000 fc96 	bl	8007144 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006826:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006836:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	021a      	lsls	r2, r3, #8
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	430a      	orrs	r2, r1
 800684a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800684c:	e002      	b.n	8006854 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	75fb      	strb	r3, [r7, #23]
      break;
 8006852:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2200      	movs	r2, #0
 8006858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800685c:	7dfb      	ldrb	r3, [r7, #23]
}
 800685e:	4618      	mov	r0, r3
 8006860:	3718      	adds	r7, #24
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop

08006868 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006872:	2300      	movs	r3, #0
 8006874:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800687c:	2b01      	cmp	r3, #1
 800687e:	d101      	bne.n	8006884 <HAL_TIM_ConfigClockSource+0x1c>
 8006880:	2302      	movs	r3, #2
 8006882:	e0b6      	b.n	80069f2 <HAL_TIM_ConfigClockSource+0x18a>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2202      	movs	r2, #2
 8006890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80068a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68ba      	ldr	r2, [r7, #8]
 80068b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068c0:	d03e      	beq.n	8006940 <HAL_TIM_ConfigClockSource+0xd8>
 80068c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068c6:	f200 8087 	bhi.w	80069d8 <HAL_TIM_ConfigClockSource+0x170>
 80068ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ce:	f000 8086 	beq.w	80069de <HAL_TIM_ConfigClockSource+0x176>
 80068d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068d6:	d87f      	bhi.n	80069d8 <HAL_TIM_ConfigClockSource+0x170>
 80068d8:	2b70      	cmp	r3, #112	; 0x70
 80068da:	d01a      	beq.n	8006912 <HAL_TIM_ConfigClockSource+0xaa>
 80068dc:	2b70      	cmp	r3, #112	; 0x70
 80068de:	d87b      	bhi.n	80069d8 <HAL_TIM_ConfigClockSource+0x170>
 80068e0:	2b60      	cmp	r3, #96	; 0x60
 80068e2:	d050      	beq.n	8006986 <HAL_TIM_ConfigClockSource+0x11e>
 80068e4:	2b60      	cmp	r3, #96	; 0x60
 80068e6:	d877      	bhi.n	80069d8 <HAL_TIM_ConfigClockSource+0x170>
 80068e8:	2b50      	cmp	r3, #80	; 0x50
 80068ea:	d03c      	beq.n	8006966 <HAL_TIM_ConfigClockSource+0xfe>
 80068ec:	2b50      	cmp	r3, #80	; 0x50
 80068ee:	d873      	bhi.n	80069d8 <HAL_TIM_ConfigClockSource+0x170>
 80068f0:	2b40      	cmp	r3, #64	; 0x40
 80068f2:	d058      	beq.n	80069a6 <HAL_TIM_ConfigClockSource+0x13e>
 80068f4:	2b40      	cmp	r3, #64	; 0x40
 80068f6:	d86f      	bhi.n	80069d8 <HAL_TIM_ConfigClockSource+0x170>
 80068f8:	2b30      	cmp	r3, #48	; 0x30
 80068fa:	d064      	beq.n	80069c6 <HAL_TIM_ConfigClockSource+0x15e>
 80068fc:	2b30      	cmp	r3, #48	; 0x30
 80068fe:	d86b      	bhi.n	80069d8 <HAL_TIM_ConfigClockSource+0x170>
 8006900:	2b20      	cmp	r3, #32
 8006902:	d060      	beq.n	80069c6 <HAL_TIM_ConfigClockSource+0x15e>
 8006904:	2b20      	cmp	r3, #32
 8006906:	d867      	bhi.n	80069d8 <HAL_TIM_ConfigClockSource+0x170>
 8006908:	2b00      	cmp	r3, #0
 800690a:	d05c      	beq.n	80069c6 <HAL_TIM_ConfigClockSource+0x15e>
 800690c:	2b10      	cmp	r3, #16
 800690e:	d05a      	beq.n	80069c6 <HAL_TIM_ConfigClockSource+0x15e>
 8006910:	e062      	b.n	80069d8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006922:	f000 fe19 	bl	8007558 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006934:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68ba      	ldr	r2, [r7, #8]
 800693c:	609a      	str	r2, [r3, #8]
      break;
 800693e:	e04f      	b.n	80069e0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006950:	f000 fe02 	bl	8007558 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	689a      	ldr	r2, [r3, #8]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006962:	609a      	str	r2, [r3, #8]
      break;
 8006964:	e03c      	b.n	80069e0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006972:	461a      	mov	r2, r3
 8006974:	f000 fcc0 	bl	80072f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2150      	movs	r1, #80	; 0x50
 800697e:	4618      	mov	r0, r3
 8006980:	f000 fdcf 	bl	8007522 <TIM_ITRx_SetConfig>
      break;
 8006984:	e02c      	b.n	80069e0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006992:	461a      	mov	r2, r3
 8006994:	f000 fd1c 	bl	80073d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2160      	movs	r1, #96	; 0x60
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 fdbf 	bl	8007522 <TIM_ITRx_SetConfig>
      break;
 80069a4:	e01c      	b.n	80069e0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069b2:	461a      	mov	r2, r3
 80069b4:	f000 fca0 	bl	80072f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2140      	movs	r1, #64	; 0x40
 80069be:	4618      	mov	r0, r3
 80069c0:	f000 fdaf 	bl	8007522 <TIM_ITRx_SetConfig>
      break;
 80069c4:	e00c      	b.n	80069e0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4619      	mov	r1, r3
 80069d0:	4610      	mov	r0, r2
 80069d2:	f000 fda6 	bl	8007522 <TIM_ITRx_SetConfig>
      break;
 80069d6:	e003      	b.n	80069e0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	73fb      	strb	r3, [r7, #15]
      break;
 80069dc:	e000      	b.n	80069e0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80069de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3710      	adds	r7, #16
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
	...

080069fc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b085      	sub	sp, #20
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006a06:	2300      	movs	r3, #0
 8006a08:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	2b0c      	cmp	r3, #12
 8006a0e:	d831      	bhi.n	8006a74 <HAL_TIM_ReadCapturedValue+0x78>
 8006a10:	a201      	add	r2, pc, #4	; (adr r2, 8006a18 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a16:	bf00      	nop
 8006a18:	08006a4d 	.word	0x08006a4d
 8006a1c:	08006a75 	.word	0x08006a75
 8006a20:	08006a75 	.word	0x08006a75
 8006a24:	08006a75 	.word	0x08006a75
 8006a28:	08006a57 	.word	0x08006a57
 8006a2c:	08006a75 	.word	0x08006a75
 8006a30:	08006a75 	.word	0x08006a75
 8006a34:	08006a75 	.word	0x08006a75
 8006a38:	08006a61 	.word	0x08006a61
 8006a3c:	08006a75 	.word	0x08006a75
 8006a40:	08006a75 	.word	0x08006a75
 8006a44:	08006a75 	.word	0x08006a75
 8006a48:	08006a6b 	.word	0x08006a6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a52:	60fb      	str	r3, [r7, #12]

      break;
 8006a54:	e00f      	b.n	8006a76 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5c:	60fb      	str	r3, [r7, #12]

      break;
 8006a5e:	e00a      	b.n	8006a76 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a66:	60fb      	str	r3, [r7, #12]

      break;
 8006a68:	e005      	b.n	8006a76 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a70:	60fb      	str	r3, [r7, #12]

      break;
 8006a72:	e000      	b.n	8006a76 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006a74:	bf00      	nop
  }

  return tmpreg;
 8006a76:	68fb      	ldr	r3, [r7, #12]
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3714      	adds	r7, #20
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006a8c:	bf00      	nop
 8006a8e:	370c      	adds	r7, #12
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006aa0:	bf00      	nop
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ab4:	bf00      	nop
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ac8:	bf00      	nop
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a42      	ldr	r2, [pc, #264]	; (8006bf0 <TIM_Base_SetConfig+0x11c>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d013      	beq.n	8006b14 <TIM_Base_SetConfig+0x40>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006af2:	d00f      	beq.n	8006b14 <TIM_Base_SetConfig+0x40>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a3f      	ldr	r2, [pc, #252]	; (8006bf4 <TIM_Base_SetConfig+0x120>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d00b      	beq.n	8006b14 <TIM_Base_SetConfig+0x40>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a3e      	ldr	r2, [pc, #248]	; (8006bf8 <TIM_Base_SetConfig+0x124>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d007      	beq.n	8006b14 <TIM_Base_SetConfig+0x40>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a3d      	ldr	r2, [pc, #244]	; (8006bfc <TIM_Base_SetConfig+0x128>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d003      	beq.n	8006b14 <TIM_Base_SetConfig+0x40>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a3c      	ldr	r2, [pc, #240]	; (8006c00 <TIM_Base_SetConfig+0x12c>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d108      	bne.n	8006b26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a31      	ldr	r2, [pc, #196]	; (8006bf0 <TIM_Base_SetConfig+0x11c>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d01f      	beq.n	8006b6e <TIM_Base_SetConfig+0x9a>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b34:	d01b      	beq.n	8006b6e <TIM_Base_SetConfig+0x9a>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a2e      	ldr	r2, [pc, #184]	; (8006bf4 <TIM_Base_SetConfig+0x120>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d017      	beq.n	8006b6e <TIM_Base_SetConfig+0x9a>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a2d      	ldr	r2, [pc, #180]	; (8006bf8 <TIM_Base_SetConfig+0x124>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d013      	beq.n	8006b6e <TIM_Base_SetConfig+0x9a>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a2c      	ldr	r2, [pc, #176]	; (8006bfc <TIM_Base_SetConfig+0x128>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d00f      	beq.n	8006b6e <TIM_Base_SetConfig+0x9a>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a2c      	ldr	r2, [pc, #176]	; (8006c04 <TIM_Base_SetConfig+0x130>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d00b      	beq.n	8006b6e <TIM_Base_SetConfig+0x9a>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a2b      	ldr	r2, [pc, #172]	; (8006c08 <TIM_Base_SetConfig+0x134>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d007      	beq.n	8006b6e <TIM_Base_SetConfig+0x9a>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a2a      	ldr	r2, [pc, #168]	; (8006c0c <TIM_Base_SetConfig+0x138>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d003      	beq.n	8006b6e <TIM_Base_SetConfig+0x9a>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a25      	ldr	r2, [pc, #148]	; (8006c00 <TIM_Base_SetConfig+0x12c>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d108      	bne.n	8006b80 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	695b      	ldr	r3, [r3, #20]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	689a      	ldr	r2, [r3, #8]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a12      	ldr	r2, [pc, #72]	; (8006bf0 <TIM_Base_SetConfig+0x11c>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d013      	beq.n	8006bd4 <TIM_Base_SetConfig+0x100>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a13      	ldr	r2, [pc, #76]	; (8006bfc <TIM_Base_SetConfig+0x128>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d00f      	beq.n	8006bd4 <TIM_Base_SetConfig+0x100>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a13      	ldr	r2, [pc, #76]	; (8006c04 <TIM_Base_SetConfig+0x130>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d00b      	beq.n	8006bd4 <TIM_Base_SetConfig+0x100>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a12      	ldr	r2, [pc, #72]	; (8006c08 <TIM_Base_SetConfig+0x134>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d007      	beq.n	8006bd4 <TIM_Base_SetConfig+0x100>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a11      	ldr	r2, [pc, #68]	; (8006c0c <TIM_Base_SetConfig+0x138>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d003      	beq.n	8006bd4 <TIM_Base_SetConfig+0x100>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a0c      	ldr	r2, [pc, #48]	; (8006c00 <TIM_Base_SetConfig+0x12c>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d103      	bne.n	8006bdc <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	691a      	ldr	r2, [r3, #16]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	615a      	str	r2, [r3, #20]
}
 8006be2:	bf00      	nop
 8006be4:	3714      	adds	r7, #20
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr
 8006bee:	bf00      	nop
 8006bf0:	40012c00 	.word	0x40012c00
 8006bf4:	40000400 	.word	0x40000400
 8006bf8:	40000800 	.word	0x40000800
 8006bfc:	40013400 	.word	0x40013400
 8006c00:	40015000 	.word	0x40015000
 8006c04:	40014000 	.word	0x40014000
 8006c08:	40014400 	.word	0x40014400
 8006c0c:	40014800 	.word	0x40014800

08006c10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b087      	sub	sp, #28
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a1b      	ldr	r3, [r3, #32]
 8006c1e:	f023 0201 	bic.w	r2, r3, #1
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a1b      	ldr	r3, [r3, #32]
 8006c2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f023 0303 	bic.w	r3, r3, #3
 8006c4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	f023 0302 	bic.w	r3, r3, #2
 8006c5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	697a      	ldr	r2, [r7, #20]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a30      	ldr	r2, [pc, #192]	; (8006d2c <TIM_OC1_SetConfig+0x11c>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d013      	beq.n	8006c98 <TIM_OC1_SetConfig+0x88>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a2f      	ldr	r2, [pc, #188]	; (8006d30 <TIM_OC1_SetConfig+0x120>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d00f      	beq.n	8006c98 <TIM_OC1_SetConfig+0x88>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a2e      	ldr	r2, [pc, #184]	; (8006d34 <TIM_OC1_SetConfig+0x124>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d00b      	beq.n	8006c98 <TIM_OC1_SetConfig+0x88>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a2d      	ldr	r2, [pc, #180]	; (8006d38 <TIM_OC1_SetConfig+0x128>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d007      	beq.n	8006c98 <TIM_OC1_SetConfig+0x88>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a2c      	ldr	r2, [pc, #176]	; (8006d3c <TIM_OC1_SetConfig+0x12c>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d003      	beq.n	8006c98 <TIM_OC1_SetConfig+0x88>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a2b      	ldr	r2, [pc, #172]	; (8006d40 <TIM_OC1_SetConfig+0x130>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d10c      	bne.n	8006cb2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	f023 0308 	bic.w	r3, r3, #8
 8006c9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	697a      	ldr	r2, [r7, #20]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	f023 0304 	bic.w	r3, r3, #4
 8006cb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a1d      	ldr	r2, [pc, #116]	; (8006d2c <TIM_OC1_SetConfig+0x11c>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d013      	beq.n	8006ce2 <TIM_OC1_SetConfig+0xd2>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a1c      	ldr	r2, [pc, #112]	; (8006d30 <TIM_OC1_SetConfig+0x120>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d00f      	beq.n	8006ce2 <TIM_OC1_SetConfig+0xd2>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a1b      	ldr	r2, [pc, #108]	; (8006d34 <TIM_OC1_SetConfig+0x124>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d00b      	beq.n	8006ce2 <TIM_OC1_SetConfig+0xd2>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a1a      	ldr	r2, [pc, #104]	; (8006d38 <TIM_OC1_SetConfig+0x128>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d007      	beq.n	8006ce2 <TIM_OC1_SetConfig+0xd2>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a19      	ldr	r2, [pc, #100]	; (8006d3c <TIM_OC1_SetConfig+0x12c>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d003      	beq.n	8006ce2 <TIM_OC1_SetConfig+0xd2>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a18      	ldr	r2, [pc, #96]	; (8006d40 <TIM_OC1_SetConfig+0x130>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d111      	bne.n	8006d06 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ce8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	695b      	ldr	r3, [r3, #20]
 8006cf6:	693a      	ldr	r2, [r7, #16]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	699b      	ldr	r3, [r3, #24]
 8006d00:	693a      	ldr	r2, [r7, #16]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	693a      	ldr	r2, [r7, #16]
 8006d0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	68fa      	ldr	r2, [r7, #12]
 8006d10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	685a      	ldr	r2, [r3, #4]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	697a      	ldr	r2, [r7, #20]
 8006d1e:	621a      	str	r2, [r3, #32]
}
 8006d20:	bf00      	nop
 8006d22:	371c      	adds	r7, #28
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr
 8006d2c:	40012c00 	.word	0x40012c00
 8006d30:	40013400 	.word	0x40013400
 8006d34:	40014000 	.word	0x40014000
 8006d38:	40014400 	.word	0x40014400
 8006d3c:	40014800 	.word	0x40014800
 8006d40:	40015000 	.word	0x40015000

08006d44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b087      	sub	sp, #28
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a1b      	ldr	r3, [r3, #32]
 8006d52:	f023 0210 	bic.w	r2, r3, #16
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a1b      	ldr	r3, [r3, #32]
 8006d5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	699b      	ldr	r3, [r3, #24]
 8006d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	021b      	lsls	r3, r3, #8
 8006d86:	68fa      	ldr	r2, [r7, #12]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	f023 0320 	bic.w	r3, r3, #32
 8006d92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	011b      	lsls	r3, r3, #4
 8006d9a:	697a      	ldr	r2, [r7, #20]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4a2c      	ldr	r2, [pc, #176]	; (8006e54 <TIM_OC2_SetConfig+0x110>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d007      	beq.n	8006db8 <TIM_OC2_SetConfig+0x74>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4a2b      	ldr	r2, [pc, #172]	; (8006e58 <TIM_OC2_SetConfig+0x114>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d003      	beq.n	8006db8 <TIM_OC2_SetConfig+0x74>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4a2a      	ldr	r2, [pc, #168]	; (8006e5c <TIM_OC2_SetConfig+0x118>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d10d      	bne.n	8006dd4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	011b      	lsls	r3, r3, #4
 8006dc6:	697a      	ldr	r2, [r7, #20]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dd2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a1f      	ldr	r2, [pc, #124]	; (8006e54 <TIM_OC2_SetConfig+0x110>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d013      	beq.n	8006e04 <TIM_OC2_SetConfig+0xc0>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a1e      	ldr	r2, [pc, #120]	; (8006e58 <TIM_OC2_SetConfig+0x114>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d00f      	beq.n	8006e04 <TIM_OC2_SetConfig+0xc0>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a1e      	ldr	r2, [pc, #120]	; (8006e60 <TIM_OC2_SetConfig+0x11c>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d00b      	beq.n	8006e04 <TIM_OC2_SetConfig+0xc0>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a1d      	ldr	r2, [pc, #116]	; (8006e64 <TIM_OC2_SetConfig+0x120>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d007      	beq.n	8006e04 <TIM_OC2_SetConfig+0xc0>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a1c      	ldr	r2, [pc, #112]	; (8006e68 <TIM_OC2_SetConfig+0x124>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d003      	beq.n	8006e04 <TIM_OC2_SetConfig+0xc0>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a17      	ldr	r2, [pc, #92]	; (8006e5c <TIM_OC2_SetConfig+0x118>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d113      	bne.n	8006e2c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e0a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e12:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	695b      	ldr	r3, [r3, #20]
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	693a      	ldr	r2, [r7, #16]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	699b      	ldr	r3, [r3, #24]
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	693a      	ldr	r2, [r7, #16]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	693a      	ldr	r2, [r7, #16]
 8006e30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	68fa      	ldr	r2, [r7, #12]
 8006e36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	685a      	ldr	r2, [r3, #4]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	697a      	ldr	r2, [r7, #20]
 8006e44:	621a      	str	r2, [r3, #32]
}
 8006e46:	bf00      	nop
 8006e48:	371c      	adds	r7, #28
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr
 8006e52:	bf00      	nop
 8006e54:	40012c00 	.word	0x40012c00
 8006e58:	40013400 	.word	0x40013400
 8006e5c:	40015000 	.word	0x40015000
 8006e60:	40014000 	.word	0x40014000
 8006e64:	40014400 	.word	0x40014400
 8006e68:	40014800 	.word	0x40014800

08006e6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b087      	sub	sp, #28
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a1b      	ldr	r3, [r3, #32]
 8006e7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a1b      	ldr	r3, [r3, #32]
 8006e86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	69db      	ldr	r3, [r3, #28]
 8006e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f023 0303 	bic.w	r3, r3, #3
 8006ea6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006eb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	021b      	lsls	r3, r3, #8
 8006ec0:	697a      	ldr	r2, [r7, #20]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4a2b      	ldr	r2, [pc, #172]	; (8006f78 <TIM_OC3_SetConfig+0x10c>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d007      	beq.n	8006ede <TIM_OC3_SetConfig+0x72>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	4a2a      	ldr	r2, [pc, #168]	; (8006f7c <TIM_OC3_SetConfig+0x110>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d003      	beq.n	8006ede <TIM_OC3_SetConfig+0x72>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4a29      	ldr	r2, [pc, #164]	; (8006f80 <TIM_OC3_SetConfig+0x114>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d10d      	bne.n	8006efa <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ee4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	021b      	lsls	r3, r3, #8
 8006eec:	697a      	ldr	r2, [r7, #20]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ef8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a1e      	ldr	r2, [pc, #120]	; (8006f78 <TIM_OC3_SetConfig+0x10c>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d013      	beq.n	8006f2a <TIM_OC3_SetConfig+0xbe>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a1d      	ldr	r2, [pc, #116]	; (8006f7c <TIM_OC3_SetConfig+0x110>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d00f      	beq.n	8006f2a <TIM_OC3_SetConfig+0xbe>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a1d      	ldr	r2, [pc, #116]	; (8006f84 <TIM_OC3_SetConfig+0x118>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d00b      	beq.n	8006f2a <TIM_OC3_SetConfig+0xbe>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a1c      	ldr	r2, [pc, #112]	; (8006f88 <TIM_OC3_SetConfig+0x11c>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d007      	beq.n	8006f2a <TIM_OC3_SetConfig+0xbe>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a1b      	ldr	r2, [pc, #108]	; (8006f8c <TIM_OC3_SetConfig+0x120>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d003      	beq.n	8006f2a <TIM_OC3_SetConfig+0xbe>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a16      	ldr	r2, [pc, #88]	; (8006f80 <TIM_OC3_SetConfig+0x114>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d113      	bne.n	8006f52 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	695b      	ldr	r3, [r3, #20]
 8006f3e:	011b      	lsls	r3, r3, #4
 8006f40:	693a      	ldr	r2, [r7, #16]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	011b      	lsls	r3, r3, #4
 8006f4c:	693a      	ldr	r2, [r7, #16]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	693a      	ldr	r2, [r7, #16]
 8006f56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	685a      	ldr	r2, [r3, #4]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	697a      	ldr	r2, [r7, #20]
 8006f6a:	621a      	str	r2, [r3, #32]
}
 8006f6c:	bf00      	nop
 8006f6e:	371c      	adds	r7, #28
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr
 8006f78:	40012c00 	.word	0x40012c00
 8006f7c:	40013400 	.word	0x40013400
 8006f80:	40015000 	.word	0x40015000
 8006f84:	40014000 	.word	0x40014000
 8006f88:	40014400 	.word	0x40014400
 8006f8c:	40014800 	.word	0x40014800

08006f90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b087      	sub	sp, #28
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a1b      	ldr	r3, [r3, #32]
 8006f9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a1b      	ldr	r3, [r3, #32]
 8006faa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	69db      	ldr	r3, [r3, #28]
 8006fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006fbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	021b      	lsls	r3, r3, #8
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	031b      	lsls	r3, r3, #12
 8006fe6:	693a      	ldr	r2, [r7, #16]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	4a1a      	ldr	r2, [pc, #104]	; (8007058 <TIM_OC4_SetConfig+0xc8>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d013      	beq.n	800701c <TIM_OC4_SetConfig+0x8c>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	4a19      	ldr	r2, [pc, #100]	; (800705c <TIM_OC4_SetConfig+0xcc>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d00f      	beq.n	800701c <TIM_OC4_SetConfig+0x8c>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	4a18      	ldr	r2, [pc, #96]	; (8007060 <TIM_OC4_SetConfig+0xd0>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d00b      	beq.n	800701c <TIM_OC4_SetConfig+0x8c>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4a17      	ldr	r2, [pc, #92]	; (8007064 <TIM_OC4_SetConfig+0xd4>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d007      	beq.n	800701c <TIM_OC4_SetConfig+0x8c>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4a16      	ldr	r2, [pc, #88]	; (8007068 <TIM_OC4_SetConfig+0xd8>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d003      	beq.n	800701c <TIM_OC4_SetConfig+0x8c>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4a15      	ldr	r2, [pc, #84]	; (800706c <TIM_OC4_SetConfig+0xdc>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d109      	bne.n	8007030 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007022:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	695b      	ldr	r3, [r3, #20]
 8007028:	019b      	lsls	r3, r3, #6
 800702a:	697a      	ldr	r2, [r7, #20]
 800702c:	4313      	orrs	r3, r2
 800702e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	697a      	ldr	r2, [r7, #20]
 8007034:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	685a      	ldr	r2, [r3, #4]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	621a      	str	r2, [r3, #32]
}
 800704a:	bf00      	nop
 800704c:	371c      	adds	r7, #28
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	40012c00 	.word	0x40012c00
 800705c:	40013400 	.word	0x40013400
 8007060:	40014000 	.word	0x40014000
 8007064:	40014400 	.word	0x40014400
 8007068:	40014800 	.word	0x40014800
 800706c:	40015000 	.word	0x40015000

08007070 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007070:	b480      	push	{r7}
 8007072:	b087      	sub	sp, #28
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a1b      	ldr	r3, [r3, #32]
 800707e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a1b      	ldr	r3, [r3, #32]
 800708a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800709e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80070b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	041b      	lsls	r3, r3, #16
 80070bc:	693a      	ldr	r2, [r7, #16]
 80070be:	4313      	orrs	r3, r2
 80070c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a19      	ldr	r2, [pc, #100]	; (800712c <TIM_OC5_SetConfig+0xbc>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d013      	beq.n	80070f2 <TIM_OC5_SetConfig+0x82>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a18      	ldr	r2, [pc, #96]	; (8007130 <TIM_OC5_SetConfig+0xc0>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d00f      	beq.n	80070f2 <TIM_OC5_SetConfig+0x82>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a17      	ldr	r2, [pc, #92]	; (8007134 <TIM_OC5_SetConfig+0xc4>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d00b      	beq.n	80070f2 <TIM_OC5_SetConfig+0x82>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4a16      	ldr	r2, [pc, #88]	; (8007138 <TIM_OC5_SetConfig+0xc8>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d007      	beq.n	80070f2 <TIM_OC5_SetConfig+0x82>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a15      	ldr	r2, [pc, #84]	; (800713c <TIM_OC5_SetConfig+0xcc>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d003      	beq.n	80070f2 <TIM_OC5_SetConfig+0x82>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a14      	ldr	r2, [pc, #80]	; (8007140 <TIM_OC5_SetConfig+0xd0>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d109      	bne.n	8007106 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	695b      	ldr	r3, [r3, #20]
 80070fe:	021b      	lsls	r3, r3, #8
 8007100:	697a      	ldr	r2, [r7, #20]
 8007102:	4313      	orrs	r3, r2
 8007104:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	697a      	ldr	r2, [r7, #20]
 800710a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	68fa      	ldr	r2, [r7, #12]
 8007110:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	685a      	ldr	r2, [r3, #4]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	693a      	ldr	r2, [r7, #16]
 800711e:	621a      	str	r2, [r3, #32]
}
 8007120:	bf00      	nop
 8007122:	371c      	adds	r7, #28
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr
 800712c:	40012c00 	.word	0x40012c00
 8007130:	40013400 	.word	0x40013400
 8007134:	40014000 	.word	0x40014000
 8007138:	40014400 	.word	0x40014400
 800713c:	40014800 	.word	0x40014800
 8007140:	40015000 	.word	0x40015000

08007144 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007144:	b480      	push	{r7}
 8007146:	b087      	sub	sp, #28
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a1b      	ldr	r3, [r3, #32]
 8007152:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a1b      	ldr	r3, [r3, #32]
 800715e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800716a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007172:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007176:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	021b      	lsls	r3, r3, #8
 800717e:	68fa      	ldr	r2, [r7, #12]
 8007180:	4313      	orrs	r3, r2
 8007182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800718a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	051b      	lsls	r3, r3, #20
 8007192:	693a      	ldr	r2, [r7, #16]
 8007194:	4313      	orrs	r3, r2
 8007196:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a1a      	ldr	r2, [pc, #104]	; (8007204 <TIM_OC6_SetConfig+0xc0>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d013      	beq.n	80071c8 <TIM_OC6_SetConfig+0x84>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a19      	ldr	r2, [pc, #100]	; (8007208 <TIM_OC6_SetConfig+0xc4>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d00f      	beq.n	80071c8 <TIM_OC6_SetConfig+0x84>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a18      	ldr	r2, [pc, #96]	; (800720c <TIM_OC6_SetConfig+0xc8>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d00b      	beq.n	80071c8 <TIM_OC6_SetConfig+0x84>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a17      	ldr	r2, [pc, #92]	; (8007210 <TIM_OC6_SetConfig+0xcc>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d007      	beq.n	80071c8 <TIM_OC6_SetConfig+0x84>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a16      	ldr	r2, [pc, #88]	; (8007214 <TIM_OC6_SetConfig+0xd0>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d003      	beq.n	80071c8 <TIM_OC6_SetConfig+0x84>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a15      	ldr	r2, [pc, #84]	; (8007218 <TIM_OC6_SetConfig+0xd4>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d109      	bne.n	80071dc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	695b      	ldr	r3, [r3, #20]
 80071d4:	029b      	lsls	r3, r3, #10
 80071d6:	697a      	ldr	r2, [r7, #20]
 80071d8:	4313      	orrs	r3, r2
 80071da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	697a      	ldr	r2, [r7, #20]
 80071e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	68fa      	ldr	r2, [r7, #12]
 80071e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	685a      	ldr	r2, [r3, #4]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	693a      	ldr	r2, [r7, #16]
 80071f4:	621a      	str	r2, [r3, #32]
}
 80071f6:	bf00      	nop
 80071f8:	371c      	adds	r7, #28
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop
 8007204:	40012c00 	.word	0x40012c00
 8007208:	40013400 	.word	0x40013400
 800720c:	40014000 	.word	0x40014000
 8007210:	40014400 	.word	0x40014400
 8007214:	40014800 	.word	0x40014800
 8007218:	40015000 	.word	0x40015000

0800721c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800721c:	b480      	push	{r7}
 800721e:	b087      	sub	sp, #28
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	607a      	str	r2, [r7, #4]
 8007228:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6a1b      	ldr	r3, [r3, #32]
 800722e:	f023 0201 	bic.w	r2, r3, #1
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	699b      	ldr	r3, [r3, #24]
 800723a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6a1b      	ldr	r3, [r3, #32]
 8007240:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	4a26      	ldr	r2, [pc, #152]	; (80072e0 <TIM_TI1_SetConfig+0xc4>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d017      	beq.n	800727a <TIM_TI1_SetConfig+0x5e>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007250:	d013      	beq.n	800727a <TIM_TI1_SetConfig+0x5e>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	4a23      	ldr	r2, [pc, #140]	; (80072e4 <TIM_TI1_SetConfig+0xc8>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d00f      	beq.n	800727a <TIM_TI1_SetConfig+0x5e>
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	4a22      	ldr	r2, [pc, #136]	; (80072e8 <TIM_TI1_SetConfig+0xcc>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d00b      	beq.n	800727a <TIM_TI1_SetConfig+0x5e>
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	4a21      	ldr	r2, [pc, #132]	; (80072ec <TIM_TI1_SetConfig+0xd0>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d007      	beq.n	800727a <TIM_TI1_SetConfig+0x5e>
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	4a20      	ldr	r2, [pc, #128]	; (80072f0 <TIM_TI1_SetConfig+0xd4>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d003      	beq.n	800727a <TIM_TI1_SetConfig+0x5e>
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	4a1f      	ldr	r2, [pc, #124]	; (80072f4 <TIM_TI1_SetConfig+0xd8>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d101      	bne.n	800727e <TIM_TI1_SetConfig+0x62>
 800727a:	2301      	movs	r3, #1
 800727c:	e000      	b.n	8007280 <TIM_TI1_SetConfig+0x64>
 800727e:	2300      	movs	r3, #0
 8007280:	2b00      	cmp	r3, #0
 8007282:	d008      	beq.n	8007296 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	f023 0303 	bic.w	r3, r3, #3
 800728a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800728c:	697a      	ldr	r2, [r7, #20]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4313      	orrs	r3, r2
 8007292:	617b      	str	r3, [r7, #20]
 8007294:	e003      	b.n	800729e <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	f043 0301 	orr.w	r3, r3, #1
 800729c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	011b      	lsls	r3, r3, #4
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	697a      	ldr	r2, [r7, #20]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	f023 030a 	bic.w	r3, r3, #10
 80072b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	f003 030a 	and.w	r3, r3, #10
 80072c0:	693a      	ldr	r2, [r7, #16]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	697a      	ldr	r2, [r7, #20]
 80072ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	693a      	ldr	r2, [r7, #16]
 80072d0:	621a      	str	r2, [r3, #32]
}
 80072d2:	bf00      	nop
 80072d4:	371c      	adds	r7, #28
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop
 80072e0:	40012c00 	.word	0x40012c00
 80072e4:	40000400 	.word	0x40000400
 80072e8:	40000800 	.word	0x40000800
 80072ec:	40013400 	.word	0x40013400
 80072f0:	40014000 	.word	0x40014000
 80072f4:	40015000 	.word	0x40015000

080072f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b087      	sub	sp, #28
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6a1b      	ldr	r3, [r3, #32]
 8007308:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	6a1b      	ldr	r3, [r3, #32]
 800730e:	f023 0201 	bic.w	r2, r3, #1
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	699b      	ldr	r3, [r3, #24]
 800731a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007322:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	011b      	lsls	r3, r3, #4
 8007328:	693a      	ldr	r2, [r7, #16]
 800732a:	4313      	orrs	r3, r2
 800732c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	f023 030a 	bic.w	r3, r3, #10
 8007334:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007336:	697a      	ldr	r2, [r7, #20]
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	4313      	orrs	r3, r2
 800733c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	693a      	ldr	r2, [r7, #16]
 8007342:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	697a      	ldr	r2, [r7, #20]
 8007348:	621a      	str	r2, [r3, #32]
}
 800734a:	bf00      	nop
 800734c:	371c      	adds	r7, #28
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr

08007356 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007356:	b480      	push	{r7}
 8007358:	b087      	sub	sp, #28
 800735a:	af00      	add	r7, sp, #0
 800735c:	60f8      	str	r0, [r7, #12]
 800735e:	60b9      	str	r1, [r7, #8]
 8007360:	607a      	str	r2, [r7, #4]
 8007362:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6a1b      	ldr	r3, [r3, #32]
 8007368:	f023 0210 	bic.w	r2, r3, #16
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	699b      	ldr	r3, [r3, #24]
 8007374:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6a1b      	ldr	r3, [r3, #32]
 800737a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007382:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	021b      	lsls	r3, r3, #8
 8007388:	697a      	ldr	r2, [r7, #20]
 800738a:	4313      	orrs	r3, r2
 800738c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007394:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	031b      	lsls	r3, r3, #12
 800739a:	b29b      	uxth	r3, r3
 800739c:	697a      	ldr	r2, [r7, #20]
 800739e:	4313      	orrs	r3, r2
 80073a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80073a8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	011b      	lsls	r3, r3, #4
 80073ae:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80073b2:	693a      	ldr	r2, [r7, #16]
 80073b4:	4313      	orrs	r3, r2
 80073b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	697a      	ldr	r2, [r7, #20]
 80073bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	693a      	ldr	r2, [r7, #16]
 80073c2:	621a      	str	r2, [r3, #32]
}
 80073c4:	bf00      	nop
 80073c6:	371c      	adds	r7, #28
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b087      	sub	sp, #28
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6a1b      	ldr	r3, [r3, #32]
 80073e0:	f023 0210 	bic.w	r2, r3, #16
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	699b      	ldr	r3, [r3, #24]
 80073ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6a1b      	ldr	r3, [r3, #32]
 80073f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	031b      	lsls	r3, r3, #12
 8007400:	697a      	ldr	r2, [r7, #20]
 8007402:	4313      	orrs	r3, r2
 8007404:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800740c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	011b      	lsls	r3, r3, #4
 8007412:	693a      	ldr	r2, [r7, #16]
 8007414:	4313      	orrs	r3, r2
 8007416:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	697a      	ldr	r2, [r7, #20]
 800741c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	693a      	ldr	r2, [r7, #16]
 8007422:	621a      	str	r2, [r3, #32]
}
 8007424:	bf00      	nop
 8007426:	371c      	adds	r7, #28
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007430:	b480      	push	{r7}
 8007432:	b087      	sub	sp, #28
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	607a      	str	r2, [r7, #4]
 800743c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6a1b      	ldr	r3, [r3, #32]
 8007442:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	69db      	ldr	r3, [r3, #28]
 800744e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	6a1b      	ldr	r3, [r3, #32]
 8007454:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	f023 0303 	bic.w	r3, r3, #3
 800745c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800745e:	697a      	ldr	r2, [r7, #20]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4313      	orrs	r3, r2
 8007464:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800746c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	011b      	lsls	r3, r3, #4
 8007472:	b2db      	uxtb	r3, r3
 8007474:	697a      	ldr	r2, [r7, #20]
 8007476:	4313      	orrs	r3, r2
 8007478:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007480:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	021b      	lsls	r3, r3, #8
 8007486:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800748a:	693a      	ldr	r2, [r7, #16]
 800748c:	4313      	orrs	r3, r2
 800748e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	697a      	ldr	r2, [r7, #20]
 8007494:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	693a      	ldr	r2, [r7, #16]
 800749a:	621a      	str	r2, [r3, #32]
}
 800749c:	bf00      	nop
 800749e:	371c      	adds	r7, #28
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b087      	sub	sp, #28
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	607a      	str	r2, [r7, #4]
 80074b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6a1b      	ldr	r3, [r3, #32]
 80074ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	69db      	ldr	r3, [r3, #28]
 80074c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6a1b      	ldr	r3, [r3, #32]
 80074cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	021b      	lsls	r3, r3, #8
 80074da:	697a      	ldr	r2, [r7, #20]
 80074dc:	4313      	orrs	r3, r2
 80074de:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80074e6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	031b      	lsls	r3, r3, #12
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	697a      	ldr	r2, [r7, #20]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80074fa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	031b      	lsls	r3, r3, #12
 8007500:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007504:	693a      	ldr	r2, [r7, #16]
 8007506:	4313      	orrs	r3, r2
 8007508:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	697a      	ldr	r2, [r7, #20]
 800750e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	693a      	ldr	r2, [r7, #16]
 8007514:	621a      	str	r2, [r3, #32]
}
 8007516:	bf00      	nop
 8007518:	371c      	adds	r7, #28
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr

08007522 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007522:	b480      	push	{r7}
 8007524:	b085      	sub	sp, #20
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
 800752a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007538:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800753a:	683a      	ldr	r2, [r7, #0]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	4313      	orrs	r3, r2
 8007540:	f043 0307 	orr.w	r3, r3, #7
 8007544:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	609a      	str	r2, [r3, #8]
}
 800754c:	bf00      	nop
 800754e:	3714      	adds	r7, #20
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007558:	b480      	push	{r7}
 800755a:	b087      	sub	sp, #28
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	607a      	str	r2, [r7, #4]
 8007564:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007572:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	021a      	lsls	r2, r3, #8
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	431a      	orrs	r2, r3
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	4313      	orrs	r3, r2
 8007580:	697a      	ldr	r2, [r7, #20]
 8007582:	4313      	orrs	r3, r2
 8007584:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	697a      	ldr	r2, [r7, #20]
 800758a:	609a      	str	r2, [r3, #8]
}
 800758c:	bf00      	nop
 800758e:	371c      	adds	r7, #28
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007598:	b480      	push	{r7}
 800759a:	b087      	sub	sp, #28
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	f003 031f 	and.w	r3, r3, #31
 80075aa:	2201      	movs	r2, #1
 80075ac:	fa02 f303 	lsl.w	r3, r2, r3
 80075b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6a1a      	ldr	r2, [r3, #32]
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	43db      	mvns	r3, r3
 80075ba:	401a      	ands	r2, r3
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6a1a      	ldr	r2, [r3, #32]
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	f003 031f 	and.w	r3, r3, #31
 80075ca:	6879      	ldr	r1, [r7, #4]
 80075cc:	fa01 f303 	lsl.w	r3, r1, r3
 80075d0:	431a      	orrs	r2, r3
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	621a      	str	r2, [r3, #32]
}
 80075d6:	bf00      	nop
 80075d8:	371c      	adds	r7, #28
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
	...

080075e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b085      	sub	sp, #20
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d101      	bne.n	80075fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075f8:	2302      	movs	r3, #2
 80075fa:	e06d      	b.n	80076d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2202      	movs	r2, #2
 8007608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a30      	ldr	r2, [pc, #192]	; (80076e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d009      	beq.n	800763a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a2f      	ldr	r2, [pc, #188]	; (80076e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d004      	beq.n	800763a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a2d      	ldr	r2, [pc, #180]	; (80076ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d108      	bne.n	800764c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007640:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	68fa      	ldr	r2, [r7, #12]
 8007648:	4313      	orrs	r3, r2
 800764a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007652:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	68fa      	ldr	r2, [r7, #12]
 800765a:	4313      	orrs	r3, r2
 800765c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a1e      	ldr	r2, [pc, #120]	; (80076e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d01d      	beq.n	80076ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007678:	d018      	beq.n	80076ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a1c      	ldr	r2, [pc, #112]	; (80076f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d013      	beq.n	80076ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a1a      	ldr	r2, [pc, #104]	; (80076f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d00e      	beq.n	80076ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a15      	ldr	r2, [pc, #84]	; (80076e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d009      	beq.n	80076ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a16      	ldr	r2, [pc, #88]	; (80076f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d004      	beq.n	80076ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a11      	ldr	r2, [pc, #68]	; (80076ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d10c      	bne.n	80076c6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	68ba      	ldr	r2, [r7, #8]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68ba      	ldr	r2, [r7, #8]
 80076c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2201      	movs	r2, #1
 80076ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076d6:	2300      	movs	r3, #0
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3714      	adds	r7, #20
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr
 80076e4:	40012c00 	.word	0x40012c00
 80076e8:	40013400 	.word	0x40013400
 80076ec:	40015000 	.word	0x40015000
 80076f0:	40000400 	.word	0x40000400
 80076f4:	40000800 	.word	0x40000800
 80076f8:	40014000 	.word	0x40014000

080076fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b085      	sub	sp, #20
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007706:	2300      	movs	r3, #0
 8007708:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007710:	2b01      	cmp	r3, #1
 8007712:	d101      	bne.n	8007718 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007714:	2302      	movs	r3, #2
 8007716:	e06a      	b.n	80077ee <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	4313      	orrs	r3, r2
 800772c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	4313      	orrs	r3, r2
 800773a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	4313      	orrs	r3, r2
 8007748:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4313      	orrs	r3, r2
 8007756:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	4313      	orrs	r3, r2
 8007764:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	695b      	ldr	r3, [r3, #20]
 8007770:	4313      	orrs	r3, r2
 8007772:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800777e:	4313      	orrs	r3, r2
 8007780:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	699b      	ldr	r3, [r3, #24]
 800778c:	041b      	lsls	r3, r3, #16
 800778e:	4313      	orrs	r3, r2
 8007790:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a19      	ldr	r2, [pc, #100]	; (80077fc <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d009      	beq.n	80077b0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a17      	ldr	r2, [pc, #92]	; (8007800 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d004      	beq.n	80077b0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a16      	ldr	r2, [pc, #88]	; (8007804 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d115      	bne.n	80077dc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ba:	051b      	lsls	r3, r3, #20
 80077bc:	4313      	orrs	r3, r2
 80077be:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	69db      	ldr	r3, [r3, #28]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	6a1b      	ldr	r3, [r3, #32]
 80077d8:	4313      	orrs	r3, r2
 80077da:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68fa      	ldr	r2, [r7, #12]
 80077e2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3714      	adds	r7, #20
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop
 80077fc:	40012c00 	.word	0x40012c00
 8007800:	40013400 	.word	0x40013400
 8007804:	40015000 	.word	0x40015000

08007808 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007810:	bf00      	nop
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007824:	bf00      	nop
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007838:	bf00      	nop
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d101      	bne.n	8007856 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	e040      	b.n	80078d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800785a:	2b00      	cmp	r3, #0
 800785c:	d106      	bne.n	800786c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f7fa fa26 	bl	8001cb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2224      	movs	r2, #36	; 0x24
 8007870:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f022 0201 	bic.w	r2, r2, #1
 8007880:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 f8b6 	bl	80079f4 <UART_SetConfig>
 8007888:	4603      	mov	r3, r0
 800788a:	2b01      	cmp	r3, #1
 800788c:	d101      	bne.n	8007892 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e022      	b.n	80078d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007896:	2b00      	cmp	r3, #0
 8007898:	d002      	beq.n	80078a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 fa7e 	bl	8007d9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	685a      	ldr	r2, [r3, #4]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80078ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	689a      	ldr	r2, [r3, #8]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80078be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f042 0201 	orr.w	r2, r2, #1
 80078ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 fb05 	bl	8007ee0 <UART_CheckIdleState>
 80078d6:	4603      	mov	r3, r0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3708      	adds	r7, #8
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b08a      	sub	sp, #40	; 0x28
 80078e4:	af02      	add	r7, sp, #8
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	603b      	str	r3, [r7, #0]
 80078ec:	4613      	mov	r3, r2
 80078ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078f4:	2b20      	cmp	r3, #32
 80078f6:	d178      	bne.n	80079ea <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d002      	beq.n	8007904 <HAL_UART_Transmit+0x24>
 80078fe:	88fb      	ldrh	r3, [r7, #6]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d101      	bne.n	8007908 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	e071      	b.n	80079ec <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2200      	movs	r2, #0
 800790c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2221      	movs	r2, #33	; 0x21
 8007914:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007916:	f7fa fbad 	bl	8002074 <HAL_GetTick>
 800791a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	88fa      	ldrh	r2, [r7, #6]
 8007920:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	88fa      	ldrh	r2, [r7, #6]
 8007928:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007934:	d108      	bne.n	8007948 <HAL_UART_Transmit+0x68>
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d104      	bne.n	8007948 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800793e:	2300      	movs	r3, #0
 8007940:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	61bb      	str	r3, [r7, #24]
 8007946:	e003      	b.n	8007950 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800794c:	2300      	movs	r3, #0
 800794e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007950:	e030      	b.n	80079b4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	9300      	str	r3, [sp, #0]
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	2200      	movs	r2, #0
 800795a:	2180      	movs	r1, #128	; 0x80
 800795c:	68f8      	ldr	r0, [r7, #12]
 800795e:	f000 fb67 	bl	8008030 <UART_WaitOnFlagUntilTimeout>
 8007962:	4603      	mov	r3, r0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d004      	beq.n	8007972 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2220      	movs	r2, #32
 800796c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800796e:	2303      	movs	r3, #3
 8007970:	e03c      	b.n	80079ec <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d10b      	bne.n	8007990 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	881a      	ldrh	r2, [r3, #0]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007984:	b292      	uxth	r2, r2
 8007986:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	3302      	adds	r3, #2
 800798c:	61bb      	str	r3, [r7, #24]
 800798e:	e008      	b.n	80079a2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007990:	69fb      	ldr	r3, [r7, #28]
 8007992:	781a      	ldrb	r2, [r3, #0]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	b292      	uxth	r2, r2
 800799a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	3301      	adds	r3, #1
 80079a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	3b01      	subs	r3, #1
 80079ac:	b29a      	uxth	r2, r3
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d1c8      	bne.n	8007952 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	9300      	str	r3, [sp, #0]
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	2200      	movs	r2, #0
 80079c8:	2140      	movs	r1, #64	; 0x40
 80079ca:	68f8      	ldr	r0, [r7, #12]
 80079cc:	f000 fb30 	bl	8008030 <UART_WaitOnFlagUntilTimeout>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d004      	beq.n	80079e0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2220      	movs	r2, #32
 80079da:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80079dc:	2303      	movs	r3, #3
 80079de:	e005      	b.n	80079ec <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2220      	movs	r2, #32
 80079e4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80079e6:	2300      	movs	r3, #0
 80079e8:	e000      	b.n	80079ec <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80079ea:	2302      	movs	r3, #2
  }
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3720      	adds	r7, #32
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b088      	sub	sp, #32
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80079fc:	2300      	movs	r3, #0
 80079fe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	689a      	ldr	r2, [r3, #8]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	691b      	ldr	r3, [r3, #16]
 8007a08:	431a      	orrs	r2, r3
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	695b      	ldr	r3, [r3, #20]
 8007a0e:	431a      	orrs	r2, r3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	69db      	ldr	r3, [r3, #28]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	4b92      	ldr	r3, [pc, #584]	; (8007c68 <UART_SetConfig+0x274>)
 8007a20:	4013      	ands	r3, r2
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	6812      	ldr	r2, [r2, #0]
 8007a26:	6979      	ldr	r1, [r7, #20]
 8007a28:	430b      	orrs	r3, r1
 8007a2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	68da      	ldr	r2, [r3, #12]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	430a      	orrs	r2, r1
 8007a40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	699b      	ldr	r3, [r3, #24]
 8007a46:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6a1b      	ldr	r3, [r3, #32]
 8007a4c:	697a      	ldr	r2, [r7, #20]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	697a      	ldr	r2, [r7, #20]
 8007a62:	430a      	orrs	r2, r1
 8007a64:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a80      	ldr	r2, [pc, #512]	; (8007c6c <UART_SetConfig+0x278>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d120      	bne.n	8007ab2 <UART_SetConfig+0xbe>
 8007a70:	4b7f      	ldr	r3, [pc, #508]	; (8007c70 <UART_SetConfig+0x27c>)
 8007a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a74:	f003 0303 	and.w	r3, r3, #3
 8007a78:	2b03      	cmp	r3, #3
 8007a7a:	d817      	bhi.n	8007aac <UART_SetConfig+0xb8>
 8007a7c:	a201      	add	r2, pc, #4	; (adr r2, 8007a84 <UART_SetConfig+0x90>)
 8007a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a82:	bf00      	nop
 8007a84:	08007a95 	.word	0x08007a95
 8007a88:	08007aa1 	.word	0x08007aa1
 8007a8c:	08007aa7 	.word	0x08007aa7
 8007a90:	08007a9b 	.word	0x08007a9b
 8007a94:	2301      	movs	r3, #1
 8007a96:	77fb      	strb	r3, [r7, #31]
 8007a98:	e0b5      	b.n	8007c06 <UART_SetConfig+0x212>
 8007a9a:	2302      	movs	r3, #2
 8007a9c:	77fb      	strb	r3, [r7, #31]
 8007a9e:	e0b2      	b.n	8007c06 <UART_SetConfig+0x212>
 8007aa0:	2304      	movs	r3, #4
 8007aa2:	77fb      	strb	r3, [r7, #31]
 8007aa4:	e0af      	b.n	8007c06 <UART_SetConfig+0x212>
 8007aa6:	2308      	movs	r3, #8
 8007aa8:	77fb      	strb	r3, [r7, #31]
 8007aaa:	e0ac      	b.n	8007c06 <UART_SetConfig+0x212>
 8007aac:	2310      	movs	r3, #16
 8007aae:	77fb      	strb	r3, [r7, #31]
 8007ab0:	e0a9      	b.n	8007c06 <UART_SetConfig+0x212>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a6f      	ldr	r2, [pc, #444]	; (8007c74 <UART_SetConfig+0x280>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d124      	bne.n	8007b06 <UART_SetConfig+0x112>
 8007abc:	4b6c      	ldr	r3, [pc, #432]	; (8007c70 <UART_SetConfig+0x27c>)
 8007abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ac0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007ac4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007ac8:	d011      	beq.n	8007aee <UART_SetConfig+0xfa>
 8007aca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007ace:	d817      	bhi.n	8007b00 <UART_SetConfig+0x10c>
 8007ad0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ad4:	d011      	beq.n	8007afa <UART_SetConfig+0x106>
 8007ad6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ada:	d811      	bhi.n	8007b00 <UART_SetConfig+0x10c>
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d003      	beq.n	8007ae8 <UART_SetConfig+0xf4>
 8007ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ae4:	d006      	beq.n	8007af4 <UART_SetConfig+0x100>
 8007ae6:	e00b      	b.n	8007b00 <UART_SetConfig+0x10c>
 8007ae8:	2300      	movs	r3, #0
 8007aea:	77fb      	strb	r3, [r7, #31]
 8007aec:	e08b      	b.n	8007c06 <UART_SetConfig+0x212>
 8007aee:	2302      	movs	r3, #2
 8007af0:	77fb      	strb	r3, [r7, #31]
 8007af2:	e088      	b.n	8007c06 <UART_SetConfig+0x212>
 8007af4:	2304      	movs	r3, #4
 8007af6:	77fb      	strb	r3, [r7, #31]
 8007af8:	e085      	b.n	8007c06 <UART_SetConfig+0x212>
 8007afa:	2308      	movs	r3, #8
 8007afc:	77fb      	strb	r3, [r7, #31]
 8007afe:	e082      	b.n	8007c06 <UART_SetConfig+0x212>
 8007b00:	2310      	movs	r3, #16
 8007b02:	77fb      	strb	r3, [r7, #31]
 8007b04:	e07f      	b.n	8007c06 <UART_SetConfig+0x212>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a5b      	ldr	r2, [pc, #364]	; (8007c78 <UART_SetConfig+0x284>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d124      	bne.n	8007b5a <UART_SetConfig+0x166>
 8007b10:	4b57      	ldr	r3, [pc, #348]	; (8007c70 <UART_SetConfig+0x27c>)
 8007b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b14:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007b18:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007b1c:	d011      	beq.n	8007b42 <UART_SetConfig+0x14e>
 8007b1e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007b22:	d817      	bhi.n	8007b54 <UART_SetConfig+0x160>
 8007b24:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007b28:	d011      	beq.n	8007b4e <UART_SetConfig+0x15a>
 8007b2a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007b2e:	d811      	bhi.n	8007b54 <UART_SetConfig+0x160>
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d003      	beq.n	8007b3c <UART_SetConfig+0x148>
 8007b34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007b38:	d006      	beq.n	8007b48 <UART_SetConfig+0x154>
 8007b3a:	e00b      	b.n	8007b54 <UART_SetConfig+0x160>
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	77fb      	strb	r3, [r7, #31]
 8007b40:	e061      	b.n	8007c06 <UART_SetConfig+0x212>
 8007b42:	2302      	movs	r3, #2
 8007b44:	77fb      	strb	r3, [r7, #31]
 8007b46:	e05e      	b.n	8007c06 <UART_SetConfig+0x212>
 8007b48:	2304      	movs	r3, #4
 8007b4a:	77fb      	strb	r3, [r7, #31]
 8007b4c:	e05b      	b.n	8007c06 <UART_SetConfig+0x212>
 8007b4e:	2308      	movs	r3, #8
 8007b50:	77fb      	strb	r3, [r7, #31]
 8007b52:	e058      	b.n	8007c06 <UART_SetConfig+0x212>
 8007b54:	2310      	movs	r3, #16
 8007b56:	77fb      	strb	r3, [r7, #31]
 8007b58:	e055      	b.n	8007c06 <UART_SetConfig+0x212>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a47      	ldr	r2, [pc, #284]	; (8007c7c <UART_SetConfig+0x288>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d124      	bne.n	8007bae <UART_SetConfig+0x1ba>
 8007b64:	4b42      	ldr	r3, [pc, #264]	; (8007c70 <UART_SetConfig+0x27c>)
 8007b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b68:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007b6c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b70:	d011      	beq.n	8007b96 <UART_SetConfig+0x1a2>
 8007b72:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b76:	d817      	bhi.n	8007ba8 <UART_SetConfig+0x1b4>
 8007b78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b7c:	d011      	beq.n	8007ba2 <UART_SetConfig+0x1ae>
 8007b7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b82:	d811      	bhi.n	8007ba8 <UART_SetConfig+0x1b4>
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d003      	beq.n	8007b90 <UART_SetConfig+0x19c>
 8007b88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b8c:	d006      	beq.n	8007b9c <UART_SetConfig+0x1a8>
 8007b8e:	e00b      	b.n	8007ba8 <UART_SetConfig+0x1b4>
 8007b90:	2300      	movs	r3, #0
 8007b92:	77fb      	strb	r3, [r7, #31]
 8007b94:	e037      	b.n	8007c06 <UART_SetConfig+0x212>
 8007b96:	2302      	movs	r3, #2
 8007b98:	77fb      	strb	r3, [r7, #31]
 8007b9a:	e034      	b.n	8007c06 <UART_SetConfig+0x212>
 8007b9c:	2304      	movs	r3, #4
 8007b9e:	77fb      	strb	r3, [r7, #31]
 8007ba0:	e031      	b.n	8007c06 <UART_SetConfig+0x212>
 8007ba2:	2308      	movs	r3, #8
 8007ba4:	77fb      	strb	r3, [r7, #31]
 8007ba6:	e02e      	b.n	8007c06 <UART_SetConfig+0x212>
 8007ba8:	2310      	movs	r3, #16
 8007baa:	77fb      	strb	r3, [r7, #31]
 8007bac:	e02b      	b.n	8007c06 <UART_SetConfig+0x212>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a33      	ldr	r2, [pc, #204]	; (8007c80 <UART_SetConfig+0x28c>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d124      	bne.n	8007c02 <UART_SetConfig+0x20e>
 8007bb8:	4b2d      	ldr	r3, [pc, #180]	; (8007c70 <UART_SetConfig+0x27c>)
 8007bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bbc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007bc0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007bc4:	d011      	beq.n	8007bea <UART_SetConfig+0x1f6>
 8007bc6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007bca:	d817      	bhi.n	8007bfc <UART_SetConfig+0x208>
 8007bcc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007bd0:	d011      	beq.n	8007bf6 <UART_SetConfig+0x202>
 8007bd2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007bd6:	d811      	bhi.n	8007bfc <UART_SetConfig+0x208>
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d003      	beq.n	8007be4 <UART_SetConfig+0x1f0>
 8007bdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007be0:	d006      	beq.n	8007bf0 <UART_SetConfig+0x1fc>
 8007be2:	e00b      	b.n	8007bfc <UART_SetConfig+0x208>
 8007be4:	2300      	movs	r3, #0
 8007be6:	77fb      	strb	r3, [r7, #31]
 8007be8:	e00d      	b.n	8007c06 <UART_SetConfig+0x212>
 8007bea:	2302      	movs	r3, #2
 8007bec:	77fb      	strb	r3, [r7, #31]
 8007bee:	e00a      	b.n	8007c06 <UART_SetConfig+0x212>
 8007bf0:	2304      	movs	r3, #4
 8007bf2:	77fb      	strb	r3, [r7, #31]
 8007bf4:	e007      	b.n	8007c06 <UART_SetConfig+0x212>
 8007bf6:	2308      	movs	r3, #8
 8007bf8:	77fb      	strb	r3, [r7, #31]
 8007bfa:	e004      	b.n	8007c06 <UART_SetConfig+0x212>
 8007bfc:	2310      	movs	r3, #16
 8007bfe:	77fb      	strb	r3, [r7, #31]
 8007c00:	e001      	b.n	8007c06 <UART_SetConfig+0x212>
 8007c02:	2310      	movs	r3, #16
 8007c04:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	69db      	ldr	r3, [r3, #28]
 8007c0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c0e:	d16b      	bne.n	8007ce8 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8007c10:	7ffb      	ldrb	r3, [r7, #31]
 8007c12:	2b08      	cmp	r3, #8
 8007c14:	d838      	bhi.n	8007c88 <UART_SetConfig+0x294>
 8007c16:	a201      	add	r2, pc, #4	; (adr r2, 8007c1c <UART_SetConfig+0x228>)
 8007c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c1c:	08007c41 	.word	0x08007c41
 8007c20:	08007c49 	.word	0x08007c49
 8007c24:	08007c51 	.word	0x08007c51
 8007c28:	08007c89 	.word	0x08007c89
 8007c2c:	08007c57 	.word	0x08007c57
 8007c30:	08007c89 	.word	0x08007c89
 8007c34:	08007c89 	.word	0x08007c89
 8007c38:	08007c89 	.word	0x08007c89
 8007c3c:	08007c5f 	.word	0x08007c5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c40:	f7fd fd54 	bl	80056ec <HAL_RCC_GetPCLK1Freq>
 8007c44:	61b8      	str	r0, [r7, #24]
        break;
 8007c46:	e024      	b.n	8007c92 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c48:	f7fd fd72 	bl	8005730 <HAL_RCC_GetPCLK2Freq>
 8007c4c:	61b8      	str	r0, [r7, #24]
        break;
 8007c4e:	e020      	b.n	8007c92 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c50:	4b0c      	ldr	r3, [pc, #48]	; (8007c84 <UART_SetConfig+0x290>)
 8007c52:	61bb      	str	r3, [r7, #24]
        break;
 8007c54:	e01d      	b.n	8007c92 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c56:	f7fd fcd3 	bl	8005600 <HAL_RCC_GetSysClockFreq>
 8007c5a:	61b8      	str	r0, [r7, #24]
        break;
 8007c5c:	e019      	b.n	8007c92 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c62:	61bb      	str	r3, [r7, #24]
        break;
 8007c64:	e015      	b.n	8007c92 <UART_SetConfig+0x29e>
 8007c66:	bf00      	nop
 8007c68:	efff69f3 	.word	0xefff69f3
 8007c6c:	40013800 	.word	0x40013800
 8007c70:	40021000 	.word	0x40021000
 8007c74:	40004400 	.word	0x40004400
 8007c78:	40004800 	.word	0x40004800
 8007c7c:	40004c00 	.word	0x40004c00
 8007c80:	40005000 	.word	0x40005000
 8007c84:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	77bb      	strb	r3, [r7, #30]
        break;
 8007c90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d073      	beq.n	8007d80 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	005a      	lsls	r2, r3, #1
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	085b      	lsrs	r3, r3, #1
 8007ca2:	441a      	add	r2, r3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	2b0f      	cmp	r3, #15
 8007cb2:	d916      	bls.n	8007ce2 <UART_SetConfig+0x2ee>
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cba:	d212      	bcs.n	8007ce2 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	f023 030f 	bic.w	r3, r3, #15
 8007cc4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	085b      	lsrs	r3, r3, #1
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	f003 0307 	and.w	r3, r3, #7
 8007cd0:	b29a      	uxth	r2, r3
 8007cd2:	89fb      	ldrh	r3, [r7, #14]
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	89fa      	ldrh	r2, [r7, #14]
 8007cde:	60da      	str	r2, [r3, #12]
 8007ce0:	e04e      	b.n	8007d80 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	77bb      	strb	r3, [r7, #30]
 8007ce6:	e04b      	b.n	8007d80 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ce8:	7ffb      	ldrb	r3, [r7, #31]
 8007cea:	2b08      	cmp	r3, #8
 8007cec:	d827      	bhi.n	8007d3e <UART_SetConfig+0x34a>
 8007cee:	a201      	add	r2, pc, #4	; (adr r2, 8007cf4 <UART_SetConfig+0x300>)
 8007cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf4:	08007d19 	.word	0x08007d19
 8007cf8:	08007d21 	.word	0x08007d21
 8007cfc:	08007d29 	.word	0x08007d29
 8007d00:	08007d3f 	.word	0x08007d3f
 8007d04:	08007d2f 	.word	0x08007d2f
 8007d08:	08007d3f 	.word	0x08007d3f
 8007d0c:	08007d3f 	.word	0x08007d3f
 8007d10:	08007d3f 	.word	0x08007d3f
 8007d14:	08007d37 	.word	0x08007d37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d18:	f7fd fce8 	bl	80056ec <HAL_RCC_GetPCLK1Freq>
 8007d1c:	61b8      	str	r0, [r7, #24]
        break;
 8007d1e:	e013      	b.n	8007d48 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d20:	f7fd fd06 	bl	8005730 <HAL_RCC_GetPCLK2Freq>
 8007d24:	61b8      	str	r0, [r7, #24]
        break;
 8007d26:	e00f      	b.n	8007d48 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d28:	4b1b      	ldr	r3, [pc, #108]	; (8007d98 <UART_SetConfig+0x3a4>)
 8007d2a:	61bb      	str	r3, [r7, #24]
        break;
 8007d2c:	e00c      	b.n	8007d48 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d2e:	f7fd fc67 	bl	8005600 <HAL_RCC_GetSysClockFreq>
 8007d32:	61b8      	str	r0, [r7, #24]
        break;
 8007d34:	e008      	b.n	8007d48 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d3a:	61bb      	str	r3, [r7, #24]
        break;
 8007d3c:	e004      	b.n	8007d48 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	77bb      	strb	r3, [r7, #30]
        break;
 8007d46:	bf00      	nop
    }

    if (pclk != 0U)
 8007d48:	69bb      	ldr	r3, [r7, #24]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d018      	beq.n	8007d80 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	085a      	lsrs	r2, r3, #1
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	441a      	add	r2, r3
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d60:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	2b0f      	cmp	r3, #15
 8007d66:	d909      	bls.n	8007d7c <UART_SetConfig+0x388>
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d6e:	d205      	bcs.n	8007d7c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	b29a      	uxth	r2, r3
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	60da      	str	r2, [r3, #12]
 8007d7a:	e001      	b.n	8007d80 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007d8c:	7fbb      	ldrb	r3, [r7, #30]
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3720      	adds	r7, #32
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
 8007d96:	bf00      	nop
 8007d98:	007a1200 	.word	0x007a1200

08007d9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da8:	f003 0301 	and.w	r3, r3, #1
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d00a      	beq.n	8007dc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	430a      	orrs	r2, r1
 8007dc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dca:	f003 0302 	and.w	r3, r3, #2
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d00a      	beq.n	8007de8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	430a      	orrs	r2, r1
 8007de6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dec:	f003 0304 	and.w	r3, r3, #4
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d00a      	beq.n	8007e0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	430a      	orrs	r2, r1
 8007e08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0e:	f003 0308 	and.w	r3, r3, #8
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d00a      	beq.n	8007e2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	430a      	orrs	r2, r1
 8007e2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e30:	f003 0310 	and.w	r3, r3, #16
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d00a      	beq.n	8007e4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	430a      	orrs	r2, r1
 8007e4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e52:	f003 0320 	and.w	r3, r3, #32
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d00a      	beq.n	8007e70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	430a      	orrs	r2, r1
 8007e6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d01a      	beq.n	8007eb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	430a      	orrs	r2, r1
 8007e90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e9a:	d10a      	bne.n	8007eb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	430a      	orrs	r2, r1
 8007eb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d00a      	beq.n	8007ed4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	430a      	orrs	r2, r1
 8007ed2:	605a      	str	r2, [r3, #4]
  }
}
 8007ed4:	bf00      	nop
 8007ed6:	370c      	adds	r7, #12
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b098      	sub	sp, #96	; 0x60
 8007ee4:	af02      	add	r7, sp, #8
 8007ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ef0:	f7fa f8c0 	bl	8002074 <HAL_GetTick>
 8007ef4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f003 0308 	and.w	r3, r3, #8
 8007f00:	2b08      	cmp	r3, #8
 8007f02:	d12e      	bne.n	8007f62 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f08:	9300      	str	r3, [sp, #0]
 8007f0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 f88c 	bl	8008030 <UART_WaitOnFlagUntilTimeout>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d021      	beq.n	8007f62 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f26:	e853 3f00 	ldrex	r3, [r3]
 8007f2a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f32:	653b      	str	r3, [r7, #80]	; 0x50
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	461a      	mov	r2, r3
 8007f3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f3c:	647b      	str	r3, [r7, #68]	; 0x44
 8007f3e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f44:	e841 2300 	strex	r3, r2, [r1]
 8007f48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d1e6      	bne.n	8007f1e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2220      	movs	r2, #32
 8007f54:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	e062      	b.n	8008028 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f003 0304 	and.w	r3, r3, #4
 8007f6c:	2b04      	cmp	r3, #4
 8007f6e:	d149      	bne.n	8008004 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f74:	9300      	str	r3, [sp, #0]
 8007f76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 f856 	bl	8008030 <UART_WaitOnFlagUntilTimeout>
 8007f84:	4603      	mov	r3, r0
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d03c      	beq.n	8008004 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f92:	e853 3f00 	ldrex	r3, [r3]
 8007f96:	623b      	str	r3, [r7, #32]
   return(result);
 8007f98:	6a3b      	ldr	r3, [r7, #32]
 8007f9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fa8:	633b      	str	r3, [r7, #48]	; 0x30
 8007faa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fb0:	e841 2300 	strex	r3, r2, [r1]
 8007fb4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d1e6      	bne.n	8007f8a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	3308      	adds	r3, #8
 8007fc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	e853 3f00 	ldrex	r3, [r3]
 8007fca:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f023 0301 	bic.w	r3, r3, #1
 8007fd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	3308      	adds	r3, #8
 8007fda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fdc:	61fa      	str	r2, [r7, #28]
 8007fde:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe0:	69b9      	ldr	r1, [r7, #24]
 8007fe2:	69fa      	ldr	r2, [r7, #28]
 8007fe4:	e841 2300 	strex	r3, r2, [r1]
 8007fe8:	617b      	str	r3, [r7, #20]
   return(result);
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d1e5      	bne.n	8007fbc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2220      	movs	r2, #32
 8007ff4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008000:	2303      	movs	r3, #3
 8008002:	e011      	b.n	8008028 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2220      	movs	r2, #32
 8008008:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2220      	movs	r2, #32
 800800e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	3758      	adds	r7, #88	; 0x58
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	60b9      	str	r1, [r7, #8]
 800803a:	603b      	str	r3, [r7, #0]
 800803c:	4613      	mov	r3, r2
 800803e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008040:	e049      	b.n	80080d6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008048:	d045      	beq.n	80080d6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800804a:	f7fa f813 	bl	8002074 <HAL_GetTick>
 800804e:	4602      	mov	r2, r0
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	1ad3      	subs	r3, r2, r3
 8008054:	69ba      	ldr	r2, [r7, #24]
 8008056:	429a      	cmp	r2, r3
 8008058:	d302      	bcc.n	8008060 <UART_WaitOnFlagUntilTimeout+0x30>
 800805a:	69bb      	ldr	r3, [r7, #24]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d101      	bne.n	8008064 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008060:	2303      	movs	r3, #3
 8008062:	e048      	b.n	80080f6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f003 0304 	and.w	r3, r3, #4
 800806e:	2b00      	cmp	r3, #0
 8008070:	d031      	beq.n	80080d6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	69db      	ldr	r3, [r3, #28]
 8008078:	f003 0308 	and.w	r3, r3, #8
 800807c:	2b08      	cmp	r3, #8
 800807e:	d110      	bne.n	80080a2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2208      	movs	r2, #8
 8008086:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008088:	68f8      	ldr	r0, [r7, #12]
 800808a:	f000 f838 	bl	80080fe <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2208      	movs	r2, #8
 8008092:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2200      	movs	r2, #0
 800809a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800809e:	2301      	movs	r3, #1
 80080a0:	e029      	b.n	80080f6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	69db      	ldr	r3, [r3, #28]
 80080a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080b0:	d111      	bne.n	80080d6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80080ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80080bc:	68f8      	ldr	r0, [r7, #12]
 80080be:	f000 f81e 	bl	80080fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2220      	movs	r2, #32
 80080c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2200      	movs	r2, #0
 80080ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80080d2:	2303      	movs	r3, #3
 80080d4:	e00f      	b.n	80080f6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	69da      	ldr	r2, [r3, #28]
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	4013      	ands	r3, r2
 80080e0:	68ba      	ldr	r2, [r7, #8]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	bf0c      	ite	eq
 80080e6:	2301      	moveq	r3, #1
 80080e8:	2300      	movne	r3, #0
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	461a      	mov	r2, r3
 80080ee:	79fb      	ldrb	r3, [r7, #7]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d0a6      	beq.n	8008042 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080f4:	2300      	movs	r3, #0
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3710      	adds	r7, #16
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}

080080fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80080fe:	b480      	push	{r7}
 8008100:	b095      	sub	sp, #84	; 0x54
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800810e:	e853 3f00 	ldrex	r3, [r3]
 8008112:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008116:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800811a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	461a      	mov	r2, r3
 8008122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008124:	643b      	str	r3, [r7, #64]	; 0x40
 8008126:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008128:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800812a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800812c:	e841 2300 	strex	r3, r2, [r1]
 8008130:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008134:	2b00      	cmp	r3, #0
 8008136:	d1e6      	bne.n	8008106 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	3308      	adds	r3, #8
 800813e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008140:	6a3b      	ldr	r3, [r7, #32]
 8008142:	e853 3f00 	ldrex	r3, [r3]
 8008146:	61fb      	str	r3, [r7, #28]
   return(result);
 8008148:	69fb      	ldr	r3, [r7, #28]
 800814a:	f023 0301 	bic.w	r3, r3, #1
 800814e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	3308      	adds	r3, #8
 8008156:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008158:	62fa      	str	r2, [r7, #44]	; 0x2c
 800815a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800815e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008160:	e841 2300 	strex	r3, r2, [r1]
 8008164:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008168:	2b00      	cmp	r3, #0
 800816a:	d1e5      	bne.n	8008138 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008170:	2b01      	cmp	r3, #1
 8008172:	d118      	bne.n	80081a6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	e853 3f00 	ldrex	r3, [r3]
 8008180:	60bb      	str	r3, [r7, #8]
   return(result);
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	f023 0310 	bic.w	r3, r3, #16
 8008188:	647b      	str	r3, [r7, #68]	; 0x44
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	461a      	mov	r2, r3
 8008190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008192:	61bb      	str	r3, [r7, #24]
 8008194:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008196:	6979      	ldr	r1, [r7, #20]
 8008198:	69ba      	ldr	r2, [r7, #24]
 800819a:	e841 2300 	strex	r3, r2, [r1]
 800819e:	613b      	str	r3, [r7, #16]
   return(result);
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d1e6      	bne.n	8008174 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2220      	movs	r2, #32
 80081aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80081ba:	bf00      	nop
 80081bc:	3754      	adds	r7, #84	; 0x54
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr

080081c6 <__cvt>:
 80081c6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081ca:	ec55 4b10 	vmov	r4, r5, d0
 80081ce:	2d00      	cmp	r5, #0
 80081d0:	460e      	mov	r6, r1
 80081d2:	4619      	mov	r1, r3
 80081d4:	462b      	mov	r3, r5
 80081d6:	bfbb      	ittet	lt
 80081d8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80081dc:	461d      	movlt	r5, r3
 80081de:	2300      	movge	r3, #0
 80081e0:	232d      	movlt	r3, #45	; 0x2d
 80081e2:	700b      	strb	r3, [r1, #0]
 80081e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081e6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80081ea:	4691      	mov	r9, r2
 80081ec:	f023 0820 	bic.w	r8, r3, #32
 80081f0:	bfbc      	itt	lt
 80081f2:	4622      	movlt	r2, r4
 80081f4:	4614      	movlt	r4, r2
 80081f6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80081fa:	d005      	beq.n	8008208 <__cvt+0x42>
 80081fc:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008200:	d100      	bne.n	8008204 <__cvt+0x3e>
 8008202:	3601      	adds	r6, #1
 8008204:	2102      	movs	r1, #2
 8008206:	e000      	b.n	800820a <__cvt+0x44>
 8008208:	2103      	movs	r1, #3
 800820a:	ab03      	add	r3, sp, #12
 800820c:	9301      	str	r3, [sp, #4]
 800820e:	ab02      	add	r3, sp, #8
 8008210:	9300      	str	r3, [sp, #0]
 8008212:	ec45 4b10 	vmov	d0, r4, r5
 8008216:	4653      	mov	r3, sl
 8008218:	4632      	mov	r2, r6
 800821a:	f000 fe5d 	bl	8008ed8 <_dtoa_r>
 800821e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008222:	4607      	mov	r7, r0
 8008224:	d102      	bne.n	800822c <__cvt+0x66>
 8008226:	f019 0f01 	tst.w	r9, #1
 800822a:	d022      	beq.n	8008272 <__cvt+0xac>
 800822c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008230:	eb07 0906 	add.w	r9, r7, r6
 8008234:	d110      	bne.n	8008258 <__cvt+0x92>
 8008236:	783b      	ldrb	r3, [r7, #0]
 8008238:	2b30      	cmp	r3, #48	; 0x30
 800823a:	d10a      	bne.n	8008252 <__cvt+0x8c>
 800823c:	2200      	movs	r2, #0
 800823e:	2300      	movs	r3, #0
 8008240:	4620      	mov	r0, r4
 8008242:	4629      	mov	r1, r5
 8008244:	f7f8 fc48 	bl	8000ad8 <__aeabi_dcmpeq>
 8008248:	b918      	cbnz	r0, 8008252 <__cvt+0x8c>
 800824a:	f1c6 0601 	rsb	r6, r6, #1
 800824e:	f8ca 6000 	str.w	r6, [sl]
 8008252:	f8da 3000 	ldr.w	r3, [sl]
 8008256:	4499      	add	r9, r3
 8008258:	2200      	movs	r2, #0
 800825a:	2300      	movs	r3, #0
 800825c:	4620      	mov	r0, r4
 800825e:	4629      	mov	r1, r5
 8008260:	f7f8 fc3a 	bl	8000ad8 <__aeabi_dcmpeq>
 8008264:	b108      	cbz	r0, 800826a <__cvt+0xa4>
 8008266:	f8cd 900c 	str.w	r9, [sp, #12]
 800826a:	2230      	movs	r2, #48	; 0x30
 800826c:	9b03      	ldr	r3, [sp, #12]
 800826e:	454b      	cmp	r3, r9
 8008270:	d307      	bcc.n	8008282 <__cvt+0xbc>
 8008272:	9b03      	ldr	r3, [sp, #12]
 8008274:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008276:	1bdb      	subs	r3, r3, r7
 8008278:	4638      	mov	r0, r7
 800827a:	6013      	str	r3, [r2, #0]
 800827c:	b004      	add	sp, #16
 800827e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008282:	1c59      	adds	r1, r3, #1
 8008284:	9103      	str	r1, [sp, #12]
 8008286:	701a      	strb	r2, [r3, #0]
 8008288:	e7f0      	b.n	800826c <__cvt+0xa6>

0800828a <__exponent>:
 800828a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800828c:	4603      	mov	r3, r0
 800828e:	2900      	cmp	r1, #0
 8008290:	bfb8      	it	lt
 8008292:	4249      	neglt	r1, r1
 8008294:	f803 2b02 	strb.w	r2, [r3], #2
 8008298:	bfb4      	ite	lt
 800829a:	222d      	movlt	r2, #45	; 0x2d
 800829c:	222b      	movge	r2, #43	; 0x2b
 800829e:	2909      	cmp	r1, #9
 80082a0:	7042      	strb	r2, [r0, #1]
 80082a2:	dd2a      	ble.n	80082fa <__exponent+0x70>
 80082a4:	f10d 0207 	add.w	r2, sp, #7
 80082a8:	4617      	mov	r7, r2
 80082aa:	260a      	movs	r6, #10
 80082ac:	4694      	mov	ip, r2
 80082ae:	fb91 f5f6 	sdiv	r5, r1, r6
 80082b2:	fb06 1415 	mls	r4, r6, r5, r1
 80082b6:	3430      	adds	r4, #48	; 0x30
 80082b8:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80082bc:	460c      	mov	r4, r1
 80082be:	2c63      	cmp	r4, #99	; 0x63
 80082c0:	f102 32ff 	add.w	r2, r2, #4294967295
 80082c4:	4629      	mov	r1, r5
 80082c6:	dcf1      	bgt.n	80082ac <__exponent+0x22>
 80082c8:	3130      	adds	r1, #48	; 0x30
 80082ca:	f1ac 0402 	sub.w	r4, ip, #2
 80082ce:	f802 1c01 	strb.w	r1, [r2, #-1]
 80082d2:	1c41      	adds	r1, r0, #1
 80082d4:	4622      	mov	r2, r4
 80082d6:	42ba      	cmp	r2, r7
 80082d8:	d30a      	bcc.n	80082f0 <__exponent+0x66>
 80082da:	f10d 0209 	add.w	r2, sp, #9
 80082de:	eba2 020c 	sub.w	r2, r2, ip
 80082e2:	42bc      	cmp	r4, r7
 80082e4:	bf88      	it	hi
 80082e6:	2200      	movhi	r2, #0
 80082e8:	4413      	add	r3, r2
 80082ea:	1a18      	subs	r0, r3, r0
 80082ec:	b003      	add	sp, #12
 80082ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082f0:	f812 5b01 	ldrb.w	r5, [r2], #1
 80082f4:	f801 5f01 	strb.w	r5, [r1, #1]!
 80082f8:	e7ed      	b.n	80082d6 <__exponent+0x4c>
 80082fa:	2330      	movs	r3, #48	; 0x30
 80082fc:	3130      	adds	r1, #48	; 0x30
 80082fe:	7083      	strb	r3, [r0, #2]
 8008300:	70c1      	strb	r1, [r0, #3]
 8008302:	1d03      	adds	r3, r0, #4
 8008304:	e7f1      	b.n	80082ea <__exponent+0x60>
	...

08008308 <_printf_float>:
 8008308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800830c:	ed2d 8b02 	vpush	{d8}
 8008310:	b08d      	sub	sp, #52	; 0x34
 8008312:	460c      	mov	r4, r1
 8008314:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008318:	4616      	mov	r6, r2
 800831a:	461f      	mov	r7, r3
 800831c:	4605      	mov	r5, r0
 800831e:	f000 fcd9 	bl	8008cd4 <_localeconv_r>
 8008322:	f8d0 a000 	ldr.w	sl, [r0]
 8008326:	4650      	mov	r0, sl
 8008328:	f7f7 ffaa 	bl	8000280 <strlen>
 800832c:	2300      	movs	r3, #0
 800832e:	930a      	str	r3, [sp, #40]	; 0x28
 8008330:	6823      	ldr	r3, [r4, #0]
 8008332:	9305      	str	r3, [sp, #20]
 8008334:	f8d8 3000 	ldr.w	r3, [r8]
 8008338:	f894 b018 	ldrb.w	fp, [r4, #24]
 800833c:	3307      	adds	r3, #7
 800833e:	f023 0307 	bic.w	r3, r3, #7
 8008342:	f103 0208 	add.w	r2, r3, #8
 8008346:	f8c8 2000 	str.w	r2, [r8]
 800834a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800834e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008352:	9307      	str	r3, [sp, #28]
 8008354:	f8cd 8018 	str.w	r8, [sp, #24]
 8008358:	ee08 0a10 	vmov	s16, r0
 800835c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008360:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008364:	4b9e      	ldr	r3, [pc, #632]	; (80085e0 <_printf_float+0x2d8>)
 8008366:	f04f 32ff 	mov.w	r2, #4294967295
 800836a:	f7f8 fbe7 	bl	8000b3c <__aeabi_dcmpun>
 800836e:	bb88      	cbnz	r0, 80083d4 <_printf_float+0xcc>
 8008370:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008374:	4b9a      	ldr	r3, [pc, #616]	; (80085e0 <_printf_float+0x2d8>)
 8008376:	f04f 32ff 	mov.w	r2, #4294967295
 800837a:	f7f8 fbc1 	bl	8000b00 <__aeabi_dcmple>
 800837e:	bb48      	cbnz	r0, 80083d4 <_printf_float+0xcc>
 8008380:	2200      	movs	r2, #0
 8008382:	2300      	movs	r3, #0
 8008384:	4640      	mov	r0, r8
 8008386:	4649      	mov	r1, r9
 8008388:	f7f8 fbb0 	bl	8000aec <__aeabi_dcmplt>
 800838c:	b110      	cbz	r0, 8008394 <_printf_float+0x8c>
 800838e:	232d      	movs	r3, #45	; 0x2d
 8008390:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008394:	4a93      	ldr	r2, [pc, #588]	; (80085e4 <_printf_float+0x2dc>)
 8008396:	4b94      	ldr	r3, [pc, #592]	; (80085e8 <_printf_float+0x2e0>)
 8008398:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800839c:	bf94      	ite	ls
 800839e:	4690      	movls	r8, r2
 80083a0:	4698      	movhi	r8, r3
 80083a2:	2303      	movs	r3, #3
 80083a4:	6123      	str	r3, [r4, #16]
 80083a6:	9b05      	ldr	r3, [sp, #20]
 80083a8:	f023 0304 	bic.w	r3, r3, #4
 80083ac:	6023      	str	r3, [r4, #0]
 80083ae:	f04f 0900 	mov.w	r9, #0
 80083b2:	9700      	str	r7, [sp, #0]
 80083b4:	4633      	mov	r3, r6
 80083b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80083b8:	4621      	mov	r1, r4
 80083ba:	4628      	mov	r0, r5
 80083bc:	f000 f9da 	bl	8008774 <_printf_common>
 80083c0:	3001      	adds	r0, #1
 80083c2:	f040 8090 	bne.w	80084e6 <_printf_float+0x1de>
 80083c6:	f04f 30ff 	mov.w	r0, #4294967295
 80083ca:	b00d      	add	sp, #52	; 0x34
 80083cc:	ecbd 8b02 	vpop	{d8}
 80083d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083d4:	4642      	mov	r2, r8
 80083d6:	464b      	mov	r3, r9
 80083d8:	4640      	mov	r0, r8
 80083da:	4649      	mov	r1, r9
 80083dc:	f7f8 fbae 	bl	8000b3c <__aeabi_dcmpun>
 80083e0:	b140      	cbz	r0, 80083f4 <_printf_float+0xec>
 80083e2:	464b      	mov	r3, r9
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	bfbc      	itt	lt
 80083e8:	232d      	movlt	r3, #45	; 0x2d
 80083ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80083ee:	4a7f      	ldr	r2, [pc, #508]	; (80085ec <_printf_float+0x2e4>)
 80083f0:	4b7f      	ldr	r3, [pc, #508]	; (80085f0 <_printf_float+0x2e8>)
 80083f2:	e7d1      	b.n	8008398 <_printf_float+0x90>
 80083f4:	6863      	ldr	r3, [r4, #4]
 80083f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80083fa:	9206      	str	r2, [sp, #24]
 80083fc:	1c5a      	adds	r2, r3, #1
 80083fe:	d13f      	bne.n	8008480 <_printf_float+0x178>
 8008400:	2306      	movs	r3, #6
 8008402:	6063      	str	r3, [r4, #4]
 8008404:	9b05      	ldr	r3, [sp, #20]
 8008406:	6861      	ldr	r1, [r4, #4]
 8008408:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800840c:	2300      	movs	r3, #0
 800840e:	9303      	str	r3, [sp, #12]
 8008410:	ab0a      	add	r3, sp, #40	; 0x28
 8008412:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008416:	ab09      	add	r3, sp, #36	; 0x24
 8008418:	ec49 8b10 	vmov	d0, r8, r9
 800841c:	9300      	str	r3, [sp, #0]
 800841e:	6022      	str	r2, [r4, #0]
 8008420:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008424:	4628      	mov	r0, r5
 8008426:	f7ff fece 	bl	80081c6 <__cvt>
 800842a:	9b06      	ldr	r3, [sp, #24]
 800842c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800842e:	2b47      	cmp	r3, #71	; 0x47
 8008430:	4680      	mov	r8, r0
 8008432:	d108      	bne.n	8008446 <_printf_float+0x13e>
 8008434:	1cc8      	adds	r0, r1, #3
 8008436:	db02      	blt.n	800843e <_printf_float+0x136>
 8008438:	6863      	ldr	r3, [r4, #4]
 800843a:	4299      	cmp	r1, r3
 800843c:	dd41      	ble.n	80084c2 <_printf_float+0x1ba>
 800843e:	f1ab 0302 	sub.w	r3, fp, #2
 8008442:	fa5f fb83 	uxtb.w	fp, r3
 8008446:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800844a:	d820      	bhi.n	800848e <_printf_float+0x186>
 800844c:	3901      	subs	r1, #1
 800844e:	465a      	mov	r2, fp
 8008450:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008454:	9109      	str	r1, [sp, #36]	; 0x24
 8008456:	f7ff ff18 	bl	800828a <__exponent>
 800845a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800845c:	1813      	adds	r3, r2, r0
 800845e:	2a01      	cmp	r2, #1
 8008460:	4681      	mov	r9, r0
 8008462:	6123      	str	r3, [r4, #16]
 8008464:	dc02      	bgt.n	800846c <_printf_float+0x164>
 8008466:	6822      	ldr	r2, [r4, #0]
 8008468:	07d2      	lsls	r2, r2, #31
 800846a:	d501      	bpl.n	8008470 <_printf_float+0x168>
 800846c:	3301      	adds	r3, #1
 800846e:	6123      	str	r3, [r4, #16]
 8008470:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008474:	2b00      	cmp	r3, #0
 8008476:	d09c      	beq.n	80083b2 <_printf_float+0xaa>
 8008478:	232d      	movs	r3, #45	; 0x2d
 800847a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800847e:	e798      	b.n	80083b2 <_printf_float+0xaa>
 8008480:	9a06      	ldr	r2, [sp, #24]
 8008482:	2a47      	cmp	r2, #71	; 0x47
 8008484:	d1be      	bne.n	8008404 <_printf_float+0xfc>
 8008486:	2b00      	cmp	r3, #0
 8008488:	d1bc      	bne.n	8008404 <_printf_float+0xfc>
 800848a:	2301      	movs	r3, #1
 800848c:	e7b9      	b.n	8008402 <_printf_float+0xfa>
 800848e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008492:	d118      	bne.n	80084c6 <_printf_float+0x1be>
 8008494:	2900      	cmp	r1, #0
 8008496:	6863      	ldr	r3, [r4, #4]
 8008498:	dd0b      	ble.n	80084b2 <_printf_float+0x1aa>
 800849a:	6121      	str	r1, [r4, #16]
 800849c:	b913      	cbnz	r3, 80084a4 <_printf_float+0x19c>
 800849e:	6822      	ldr	r2, [r4, #0]
 80084a0:	07d0      	lsls	r0, r2, #31
 80084a2:	d502      	bpl.n	80084aa <_printf_float+0x1a2>
 80084a4:	3301      	adds	r3, #1
 80084a6:	440b      	add	r3, r1
 80084a8:	6123      	str	r3, [r4, #16]
 80084aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80084ac:	f04f 0900 	mov.w	r9, #0
 80084b0:	e7de      	b.n	8008470 <_printf_float+0x168>
 80084b2:	b913      	cbnz	r3, 80084ba <_printf_float+0x1b2>
 80084b4:	6822      	ldr	r2, [r4, #0]
 80084b6:	07d2      	lsls	r2, r2, #31
 80084b8:	d501      	bpl.n	80084be <_printf_float+0x1b6>
 80084ba:	3302      	adds	r3, #2
 80084bc:	e7f4      	b.n	80084a8 <_printf_float+0x1a0>
 80084be:	2301      	movs	r3, #1
 80084c0:	e7f2      	b.n	80084a8 <_printf_float+0x1a0>
 80084c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80084c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084c8:	4299      	cmp	r1, r3
 80084ca:	db05      	blt.n	80084d8 <_printf_float+0x1d0>
 80084cc:	6823      	ldr	r3, [r4, #0]
 80084ce:	6121      	str	r1, [r4, #16]
 80084d0:	07d8      	lsls	r0, r3, #31
 80084d2:	d5ea      	bpl.n	80084aa <_printf_float+0x1a2>
 80084d4:	1c4b      	adds	r3, r1, #1
 80084d6:	e7e7      	b.n	80084a8 <_printf_float+0x1a0>
 80084d8:	2900      	cmp	r1, #0
 80084da:	bfd4      	ite	le
 80084dc:	f1c1 0202 	rsble	r2, r1, #2
 80084e0:	2201      	movgt	r2, #1
 80084e2:	4413      	add	r3, r2
 80084e4:	e7e0      	b.n	80084a8 <_printf_float+0x1a0>
 80084e6:	6823      	ldr	r3, [r4, #0]
 80084e8:	055a      	lsls	r2, r3, #21
 80084ea:	d407      	bmi.n	80084fc <_printf_float+0x1f4>
 80084ec:	6923      	ldr	r3, [r4, #16]
 80084ee:	4642      	mov	r2, r8
 80084f0:	4631      	mov	r1, r6
 80084f2:	4628      	mov	r0, r5
 80084f4:	47b8      	blx	r7
 80084f6:	3001      	adds	r0, #1
 80084f8:	d12c      	bne.n	8008554 <_printf_float+0x24c>
 80084fa:	e764      	b.n	80083c6 <_printf_float+0xbe>
 80084fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008500:	f240 80e0 	bls.w	80086c4 <_printf_float+0x3bc>
 8008504:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008508:	2200      	movs	r2, #0
 800850a:	2300      	movs	r3, #0
 800850c:	f7f8 fae4 	bl	8000ad8 <__aeabi_dcmpeq>
 8008510:	2800      	cmp	r0, #0
 8008512:	d034      	beq.n	800857e <_printf_float+0x276>
 8008514:	4a37      	ldr	r2, [pc, #220]	; (80085f4 <_printf_float+0x2ec>)
 8008516:	2301      	movs	r3, #1
 8008518:	4631      	mov	r1, r6
 800851a:	4628      	mov	r0, r5
 800851c:	47b8      	blx	r7
 800851e:	3001      	adds	r0, #1
 8008520:	f43f af51 	beq.w	80083c6 <_printf_float+0xbe>
 8008524:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008528:	429a      	cmp	r2, r3
 800852a:	db02      	blt.n	8008532 <_printf_float+0x22a>
 800852c:	6823      	ldr	r3, [r4, #0]
 800852e:	07d8      	lsls	r0, r3, #31
 8008530:	d510      	bpl.n	8008554 <_printf_float+0x24c>
 8008532:	ee18 3a10 	vmov	r3, s16
 8008536:	4652      	mov	r2, sl
 8008538:	4631      	mov	r1, r6
 800853a:	4628      	mov	r0, r5
 800853c:	47b8      	blx	r7
 800853e:	3001      	adds	r0, #1
 8008540:	f43f af41 	beq.w	80083c6 <_printf_float+0xbe>
 8008544:	f04f 0800 	mov.w	r8, #0
 8008548:	f104 091a 	add.w	r9, r4, #26
 800854c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800854e:	3b01      	subs	r3, #1
 8008550:	4543      	cmp	r3, r8
 8008552:	dc09      	bgt.n	8008568 <_printf_float+0x260>
 8008554:	6823      	ldr	r3, [r4, #0]
 8008556:	079b      	lsls	r3, r3, #30
 8008558:	f100 8107 	bmi.w	800876a <_printf_float+0x462>
 800855c:	68e0      	ldr	r0, [r4, #12]
 800855e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008560:	4298      	cmp	r0, r3
 8008562:	bfb8      	it	lt
 8008564:	4618      	movlt	r0, r3
 8008566:	e730      	b.n	80083ca <_printf_float+0xc2>
 8008568:	2301      	movs	r3, #1
 800856a:	464a      	mov	r2, r9
 800856c:	4631      	mov	r1, r6
 800856e:	4628      	mov	r0, r5
 8008570:	47b8      	blx	r7
 8008572:	3001      	adds	r0, #1
 8008574:	f43f af27 	beq.w	80083c6 <_printf_float+0xbe>
 8008578:	f108 0801 	add.w	r8, r8, #1
 800857c:	e7e6      	b.n	800854c <_printf_float+0x244>
 800857e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008580:	2b00      	cmp	r3, #0
 8008582:	dc39      	bgt.n	80085f8 <_printf_float+0x2f0>
 8008584:	4a1b      	ldr	r2, [pc, #108]	; (80085f4 <_printf_float+0x2ec>)
 8008586:	2301      	movs	r3, #1
 8008588:	4631      	mov	r1, r6
 800858a:	4628      	mov	r0, r5
 800858c:	47b8      	blx	r7
 800858e:	3001      	adds	r0, #1
 8008590:	f43f af19 	beq.w	80083c6 <_printf_float+0xbe>
 8008594:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008598:	4313      	orrs	r3, r2
 800859a:	d102      	bne.n	80085a2 <_printf_float+0x29a>
 800859c:	6823      	ldr	r3, [r4, #0]
 800859e:	07d9      	lsls	r1, r3, #31
 80085a0:	d5d8      	bpl.n	8008554 <_printf_float+0x24c>
 80085a2:	ee18 3a10 	vmov	r3, s16
 80085a6:	4652      	mov	r2, sl
 80085a8:	4631      	mov	r1, r6
 80085aa:	4628      	mov	r0, r5
 80085ac:	47b8      	blx	r7
 80085ae:	3001      	adds	r0, #1
 80085b0:	f43f af09 	beq.w	80083c6 <_printf_float+0xbe>
 80085b4:	f04f 0900 	mov.w	r9, #0
 80085b8:	f104 0a1a 	add.w	sl, r4, #26
 80085bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085be:	425b      	negs	r3, r3
 80085c0:	454b      	cmp	r3, r9
 80085c2:	dc01      	bgt.n	80085c8 <_printf_float+0x2c0>
 80085c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085c6:	e792      	b.n	80084ee <_printf_float+0x1e6>
 80085c8:	2301      	movs	r3, #1
 80085ca:	4652      	mov	r2, sl
 80085cc:	4631      	mov	r1, r6
 80085ce:	4628      	mov	r0, r5
 80085d0:	47b8      	blx	r7
 80085d2:	3001      	adds	r0, #1
 80085d4:	f43f aef7 	beq.w	80083c6 <_printf_float+0xbe>
 80085d8:	f109 0901 	add.w	r9, r9, #1
 80085dc:	e7ee      	b.n	80085bc <_printf_float+0x2b4>
 80085de:	bf00      	nop
 80085e0:	7fefffff 	.word	0x7fefffff
 80085e4:	0800abdc 	.word	0x0800abdc
 80085e8:	0800abe0 	.word	0x0800abe0
 80085ec:	0800abe4 	.word	0x0800abe4
 80085f0:	0800abe8 	.word	0x0800abe8
 80085f4:	0800abec 	.word	0x0800abec
 80085f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80085fc:	429a      	cmp	r2, r3
 80085fe:	bfa8      	it	ge
 8008600:	461a      	movge	r2, r3
 8008602:	2a00      	cmp	r2, #0
 8008604:	4691      	mov	r9, r2
 8008606:	dc37      	bgt.n	8008678 <_printf_float+0x370>
 8008608:	f04f 0b00 	mov.w	fp, #0
 800860c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008610:	f104 021a 	add.w	r2, r4, #26
 8008614:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008616:	9305      	str	r3, [sp, #20]
 8008618:	eba3 0309 	sub.w	r3, r3, r9
 800861c:	455b      	cmp	r3, fp
 800861e:	dc33      	bgt.n	8008688 <_printf_float+0x380>
 8008620:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008624:	429a      	cmp	r2, r3
 8008626:	db3b      	blt.n	80086a0 <_printf_float+0x398>
 8008628:	6823      	ldr	r3, [r4, #0]
 800862a:	07da      	lsls	r2, r3, #31
 800862c:	d438      	bmi.n	80086a0 <_printf_float+0x398>
 800862e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008632:	eba2 0903 	sub.w	r9, r2, r3
 8008636:	9b05      	ldr	r3, [sp, #20]
 8008638:	1ad2      	subs	r2, r2, r3
 800863a:	4591      	cmp	r9, r2
 800863c:	bfa8      	it	ge
 800863e:	4691      	movge	r9, r2
 8008640:	f1b9 0f00 	cmp.w	r9, #0
 8008644:	dc35      	bgt.n	80086b2 <_printf_float+0x3aa>
 8008646:	f04f 0800 	mov.w	r8, #0
 800864a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800864e:	f104 0a1a 	add.w	sl, r4, #26
 8008652:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008656:	1a9b      	subs	r3, r3, r2
 8008658:	eba3 0309 	sub.w	r3, r3, r9
 800865c:	4543      	cmp	r3, r8
 800865e:	f77f af79 	ble.w	8008554 <_printf_float+0x24c>
 8008662:	2301      	movs	r3, #1
 8008664:	4652      	mov	r2, sl
 8008666:	4631      	mov	r1, r6
 8008668:	4628      	mov	r0, r5
 800866a:	47b8      	blx	r7
 800866c:	3001      	adds	r0, #1
 800866e:	f43f aeaa 	beq.w	80083c6 <_printf_float+0xbe>
 8008672:	f108 0801 	add.w	r8, r8, #1
 8008676:	e7ec      	b.n	8008652 <_printf_float+0x34a>
 8008678:	4613      	mov	r3, r2
 800867a:	4631      	mov	r1, r6
 800867c:	4642      	mov	r2, r8
 800867e:	4628      	mov	r0, r5
 8008680:	47b8      	blx	r7
 8008682:	3001      	adds	r0, #1
 8008684:	d1c0      	bne.n	8008608 <_printf_float+0x300>
 8008686:	e69e      	b.n	80083c6 <_printf_float+0xbe>
 8008688:	2301      	movs	r3, #1
 800868a:	4631      	mov	r1, r6
 800868c:	4628      	mov	r0, r5
 800868e:	9205      	str	r2, [sp, #20]
 8008690:	47b8      	blx	r7
 8008692:	3001      	adds	r0, #1
 8008694:	f43f ae97 	beq.w	80083c6 <_printf_float+0xbe>
 8008698:	9a05      	ldr	r2, [sp, #20]
 800869a:	f10b 0b01 	add.w	fp, fp, #1
 800869e:	e7b9      	b.n	8008614 <_printf_float+0x30c>
 80086a0:	ee18 3a10 	vmov	r3, s16
 80086a4:	4652      	mov	r2, sl
 80086a6:	4631      	mov	r1, r6
 80086a8:	4628      	mov	r0, r5
 80086aa:	47b8      	blx	r7
 80086ac:	3001      	adds	r0, #1
 80086ae:	d1be      	bne.n	800862e <_printf_float+0x326>
 80086b0:	e689      	b.n	80083c6 <_printf_float+0xbe>
 80086b2:	9a05      	ldr	r2, [sp, #20]
 80086b4:	464b      	mov	r3, r9
 80086b6:	4442      	add	r2, r8
 80086b8:	4631      	mov	r1, r6
 80086ba:	4628      	mov	r0, r5
 80086bc:	47b8      	blx	r7
 80086be:	3001      	adds	r0, #1
 80086c0:	d1c1      	bne.n	8008646 <_printf_float+0x33e>
 80086c2:	e680      	b.n	80083c6 <_printf_float+0xbe>
 80086c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086c6:	2a01      	cmp	r2, #1
 80086c8:	dc01      	bgt.n	80086ce <_printf_float+0x3c6>
 80086ca:	07db      	lsls	r3, r3, #31
 80086cc:	d53a      	bpl.n	8008744 <_printf_float+0x43c>
 80086ce:	2301      	movs	r3, #1
 80086d0:	4642      	mov	r2, r8
 80086d2:	4631      	mov	r1, r6
 80086d4:	4628      	mov	r0, r5
 80086d6:	47b8      	blx	r7
 80086d8:	3001      	adds	r0, #1
 80086da:	f43f ae74 	beq.w	80083c6 <_printf_float+0xbe>
 80086de:	ee18 3a10 	vmov	r3, s16
 80086e2:	4652      	mov	r2, sl
 80086e4:	4631      	mov	r1, r6
 80086e6:	4628      	mov	r0, r5
 80086e8:	47b8      	blx	r7
 80086ea:	3001      	adds	r0, #1
 80086ec:	f43f ae6b 	beq.w	80083c6 <_printf_float+0xbe>
 80086f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80086f4:	2200      	movs	r2, #0
 80086f6:	2300      	movs	r3, #0
 80086f8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80086fc:	f7f8 f9ec 	bl	8000ad8 <__aeabi_dcmpeq>
 8008700:	b9d8      	cbnz	r0, 800873a <_printf_float+0x432>
 8008702:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008706:	f108 0201 	add.w	r2, r8, #1
 800870a:	4631      	mov	r1, r6
 800870c:	4628      	mov	r0, r5
 800870e:	47b8      	blx	r7
 8008710:	3001      	adds	r0, #1
 8008712:	d10e      	bne.n	8008732 <_printf_float+0x42a>
 8008714:	e657      	b.n	80083c6 <_printf_float+0xbe>
 8008716:	2301      	movs	r3, #1
 8008718:	4652      	mov	r2, sl
 800871a:	4631      	mov	r1, r6
 800871c:	4628      	mov	r0, r5
 800871e:	47b8      	blx	r7
 8008720:	3001      	adds	r0, #1
 8008722:	f43f ae50 	beq.w	80083c6 <_printf_float+0xbe>
 8008726:	f108 0801 	add.w	r8, r8, #1
 800872a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800872c:	3b01      	subs	r3, #1
 800872e:	4543      	cmp	r3, r8
 8008730:	dcf1      	bgt.n	8008716 <_printf_float+0x40e>
 8008732:	464b      	mov	r3, r9
 8008734:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008738:	e6da      	b.n	80084f0 <_printf_float+0x1e8>
 800873a:	f04f 0800 	mov.w	r8, #0
 800873e:	f104 0a1a 	add.w	sl, r4, #26
 8008742:	e7f2      	b.n	800872a <_printf_float+0x422>
 8008744:	2301      	movs	r3, #1
 8008746:	4642      	mov	r2, r8
 8008748:	e7df      	b.n	800870a <_printf_float+0x402>
 800874a:	2301      	movs	r3, #1
 800874c:	464a      	mov	r2, r9
 800874e:	4631      	mov	r1, r6
 8008750:	4628      	mov	r0, r5
 8008752:	47b8      	blx	r7
 8008754:	3001      	adds	r0, #1
 8008756:	f43f ae36 	beq.w	80083c6 <_printf_float+0xbe>
 800875a:	f108 0801 	add.w	r8, r8, #1
 800875e:	68e3      	ldr	r3, [r4, #12]
 8008760:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008762:	1a5b      	subs	r3, r3, r1
 8008764:	4543      	cmp	r3, r8
 8008766:	dcf0      	bgt.n	800874a <_printf_float+0x442>
 8008768:	e6f8      	b.n	800855c <_printf_float+0x254>
 800876a:	f04f 0800 	mov.w	r8, #0
 800876e:	f104 0919 	add.w	r9, r4, #25
 8008772:	e7f4      	b.n	800875e <_printf_float+0x456>

08008774 <_printf_common>:
 8008774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008778:	4616      	mov	r6, r2
 800877a:	4699      	mov	r9, r3
 800877c:	688a      	ldr	r2, [r1, #8]
 800877e:	690b      	ldr	r3, [r1, #16]
 8008780:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008784:	4293      	cmp	r3, r2
 8008786:	bfb8      	it	lt
 8008788:	4613      	movlt	r3, r2
 800878a:	6033      	str	r3, [r6, #0]
 800878c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008790:	4607      	mov	r7, r0
 8008792:	460c      	mov	r4, r1
 8008794:	b10a      	cbz	r2, 800879a <_printf_common+0x26>
 8008796:	3301      	adds	r3, #1
 8008798:	6033      	str	r3, [r6, #0]
 800879a:	6823      	ldr	r3, [r4, #0]
 800879c:	0699      	lsls	r1, r3, #26
 800879e:	bf42      	ittt	mi
 80087a0:	6833      	ldrmi	r3, [r6, #0]
 80087a2:	3302      	addmi	r3, #2
 80087a4:	6033      	strmi	r3, [r6, #0]
 80087a6:	6825      	ldr	r5, [r4, #0]
 80087a8:	f015 0506 	ands.w	r5, r5, #6
 80087ac:	d106      	bne.n	80087bc <_printf_common+0x48>
 80087ae:	f104 0a19 	add.w	sl, r4, #25
 80087b2:	68e3      	ldr	r3, [r4, #12]
 80087b4:	6832      	ldr	r2, [r6, #0]
 80087b6:	1a9b      	subs	r3, r3, r2
 80087b8:	42ab      	cmp	r3, r5
 80087ba:	dc26      	bgt.n	800880a <_printf_common+0x96>
 80087bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80087c0:	1e13      	subs	r3, r2, #0
 80087c2:	6822      	ldr	r2, [r4, #0]
 80087c4:	bf18      	it	ne
 80087c6:	2301      	movne	r3, #1
 80087c8:	0692      	lsls	r2, r2, #26
 80087ca:	d42b      	bmi.n	8008824 <_printf_common+0xb0>
 80087cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80087d0:	4649      	mov	r1, r9
 80087d2:	4638      	mov	r0, r7
 80087d4:	47c0      	blx	r8
 80087d6:	3001      	adds	r0, #1
 80087d8:	d01e      	beq.n	8008818 <_printf_common+0xa4>
 80087da:	6823      	ldr	r3, [r4, #0]
 80087dc:	6922      	ldr	r2, [r4, #16]
 80087de:	f003 0306 	and.w	r3, r3, #6
 80087e2:	2b04      	cmp	r3, #4
 80087e4:	bf02      	ittt	eq
 80087e6:	68e5      	ldreq	r5, [r4, #12]
 80087e8:	6833      	ldreq	r3, [r6, #0]
 80087ea:	1aed      	subeq	r5, r5, r3
 80087ec:	68a3      	ldr	r3, [r4, #8]
 80087ee:	bf0c      	ite	eq
 80087f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087f4:	2500      	movne	r5, #0
 80087f6:	4293      	cmp	r3, r2
 80087f8:	bfc4      	itt	gt
 80087fa:	1a9b      	subgt	r3, r3, r2
 80087fc:	18ed      	addgt	r5, r5, r3
 80087fe:	2600      	movs	r6, #0
 8008800:	341a      	adds	r4, #26
 8008802:	42b5      	cmp	r5, r6
 8008804:	d11a      	bne.n	800883c <_printf_common+0xc8>
 8008806:	2000      	movs	r0, #0
 8008808:	e008      	b.n	800881c <_printf_common+0xa8>
 800880a:	2301      	movs	r3, #1
 800880c:	4652      	mov	r2, sl
 800880e:	4649      	mov	r1, r9
 8008810:	4638      	mov	r0, r7
 8008812:	47c0      	blx	r8
 8008814:	3001      	adds	r0, #1
 8008816:	d103      	bne.n	8008820 <_printf_common+0xac>
 8008818:	f04f 30ff 	mov.w	r0, #4294967295
 800881c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008820:	3501      	adds	r5, #1
 8008822:	e7c6      	b.n	80087b2 <_printf_common+0x3e>
 8008824:	18e1      	adds	r1, r4, r3
 8008826:	1c5a      	adds	r2, r3, #1
 8008828:	2030      	movs	r0, #48	; 0x30
 800882a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800882e:	4422      	add	r2, r4
 8008830:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008834:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008838:	3302      	adds	r3, #2
 800883a:	e7c7      	b.n	80087cc <_printf_common+0x58>
 800883c:	2301      	movs	r3, #1
 800883e:	4622      	mov	r2, r4
 8008840:	4649      	mov	r1, r9
 8008842:	4638      	mov	r0, r7
 8008844:	47c0      	blx	r8
 8008846:	3001      	adds	r0, #1
 8008848:	d0e6      	beq.n	8008818 <_printf_common+0xa4>
 800884a:	3601      	adds	r6, #1
 800884c:	e7d9      	b.n	8008802 <_printf_common+0x8e>
	...

08008850 <_printf_i>:
 8008850:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008854:	7e0f      	ldrb	r7, [r1, #24]
 8008856:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008858:	2f78      	cmp	r7, #120	; 0x78
 800885a:	4691      	mov	r9, r2
 800885c:	4680      	mov	r8, r0
 800885e:	460c      	mov	r4, r1
 8008860:	469a      	mov	sl, r3
 8008862:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008866:	d807      	bhi.n	8008878 <_printf_i+0x28>
 8008868:	2f62      	cmp	r7, #98	; 0x62
 800886a:	d80a      	bhi.n	8008882 <_printf_i+0x32>
 800886c:	2f00      	cmp	r7, #0
 800886e:	f000 80d4 	beq.w	8008a1a <_printf_i+0x1ca>
 8008872:	2f58      	cmp	r7, #88	; 0x58
 8008874:	f000 80c0 	beq.w	80089f8 <_printf_i+0x1a8>
 8008878:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800887c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008880:	e03a      	b.n	80088f8 <_printf_i+0xa8>
 8008882:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008886:	2b15      	cmp	r3, #21
 8008888:	d8f6      	bhi.n	8008878 <_printf_i+0x28>
 800888a:	a101      	add	r1, pc, #4	; (adr r1, 8008890 <_printf_i+0x40>)
 800888c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008890:	080088e9 	.word	0x080088e9
 8008894:	080088fd 	.word	0x080088fd
 8008898:	08008879 	.word	0x08008879
 800889c:	08008879 	.word	0x08008879
 80088a0:	08008879 	.word	0x08008879
 80088a4:	08008879 	.word	0x08008879
 80088a8:	080088fd 	.word	0x080088fd
 80088ac:	08008879 	.word	0x08008879
 80088b0:	08008879 	.word	0x08008879
 80088b4:	08008879 	.word	0x08008879
 80088b8:	08008879 	.word	0x08008879
 80088bc:	08008a01 	.word	0x08008a01
 80088c0:	08008929 	.word	0x08008929
 80088c4:	080089bb 	.word	0x080089bb
 80088c8:	08008879 	.word	0x08008879
 80088cc:	08008879 	.word	0x08008879
 80088d0:	08008a23 	.word	0x08008a23
 80088d4:	08008879 	.word	0x08008879
 80088d8:	08008929 	.word	0x08008929
 80088dc:	08008879 	.word	0x08008879
 80088e0:	08008879 	.word	0x08008879
 80088e4:	080089c3 	.word	0x080089c3
 80088e8:	682b      	ldr	r3, [r5, #0]
 80088ea:	1d1a      	adds	r2, r3, #4
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	602a      	str	r2, [r5, #0]
 80088f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80088f8:	2301      	movs	r3, #1
 80088fa:	e09f      	b.n	8008a3c <_printf_i+0x1ec>
 80088fc:	6820      	ldr	r0, [r4, #0]
 80088fe:	682b      	ldr	r3, [r5, #0]
 8008900:	0607      	lsls	r7, r0, #24
 8008902:	f103 0104 	add.w	r1, r3, #4
 8008906:	6029      	str	r1, [r5, #0]
 8008908:	d501      	bpl.n	800890e <_printf_i+0xbe>
 800890a:	681e      	ldr	r6, [r3, #0]
 800890c:	e003      	b.n	8008916 <_printf_i+0xc6>
 800890e:	0646      	lsls	r6, r0, #25
 8008910:	d5fb      	bpl.n	800890a <_printf_i+0xba>
 8008912:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008916:	2e00      	cmp	r6, #0
 8008918:	da03      	bge.n	8008922 <_printf_i+0xd2>
 800891a:	232d      	movs	r3, #45	; 0x2d
 800891c:	4276      	negs	r6, r6
 800891e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008922:	485a      	ldr	r0, [pc, #360]	; (8008a8c <_printf_i+0x23c>)
 8008924:	230a      	movs	r3, #10
 8008926:	e012      	b.n	800894e <_printf_i+0xfe>
 8008928:	682b      	ldr	r3, [r5, #0]
 800892a:	6820      	ldr	r0, [r4, #0]
 800892c:	1d19      	adds	r1, r3, #4
 800892e:	6029      	str	r1, [r5, #0]
 8008930:	0605      	lsls	r5, r0, #24
 8008932:	d501      	bpl.n	8008938 <_printf_i+0xe8>
 8008934:	681e      	ldr	r6, [r3, #0]
 8008936:	e002      	b.n	800893e <_printf_i+0xee>
 8008938:	0641      	lsls	r1, r0, #25
 800893a:	d5fb      	bpl.n	8008934 <_printf_i+0xe4>
 800893c:	881e      	ldrh	r6, [r3, #0]
 800893e:	4853      	ldr	r0, [pc, #332]	; (8008a8c <_printf_i+0x23c>)
 8008940:	2f6f      	cmp	r7, #111	; 0x6f
 8008942:	bf0c      	ite	eq
 8008944:	2308      	moveq	r3, #8
 8008946:	230a      	movne	r3, #10
 8008948:	2100      	movs	r1, #0
 800894a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800894e:	6865      	ldr	r5, [r4, #4]
 8008950:	60a5      	str	r5, [r4, #8]
 8008952:	2d00      	cmp	r5, #0
 8008954:	bfa2      	ittt	ge
 8008956:	6821      	ldrge	r1, [r4, #0]
 8008958:	f021 0104 	bicge.w	r1, r1, #4
 800895c:	6021      	strge	r1, [r4, #0]
 800895e:	b90e      	cbnz	r6, 8008964 <_printf_i+0x114>
 8008960:	2d00      	cmp	r5, #0
 8008962:	d04b      	beq.n	80089fc <_printf_i+0x1ac>
 8008964:	4615      	mov	r5, r2
 8008966:	fbb6 f1f3 	udiv	r1, r6, r3
 800896a:	fb03 6711 	mls	r7, r3, r1, r6
 800896e:	5dc7      	ldrb	r7, [r0, r7]
 8008970:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008974:	4637      	mov	r7, r6
 8008976:	42bb      	cmp	r3, r7
 8008978:	460e      	mov	r6, r1
 800897a:	d9f4      	bls.n	8008966 <_printf_i+0x116>
 800897c:	2b08      	cmp	r3, #8
 800897e:	d10b      	bne.n	8008998 <_printf_i+0x148>
 8008980:	6823      	ldr	r3, [r4, #0]
 8008982:	07de      	lsls	r6, r3, #31
 8008984:	d508      	bpl.n	8008998 <_printf_i+0x148>
 8008986:	6923      	ldr	r3, [r4, #16]
 8008988:	6861      	ldr	r1, [r4, #4]
 800898a:	4299      	cmp	r1, r3
 800898c:	bfde      	ittt	le
 800898e:	2330      	movle	r3, #48	; 0x30
 8008990:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008994:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008998:	1b52      	subs	r2, r2, r5
 800899a:	6122      	str	r2, [r4, #16]
 800899c:	f8cd a000 	str.w	sl, [sp]
 80089a0:	464b      	mov	r3, r9
 80089a2:	aa03      	add	r2, sp, #12
 80089a4:	4621      	mov	r1, r4
 80089a6:	4640      	mov	r0, r8
 80089a8:	f7ff fee4 	bl	8008774 <_printf_common>
 80089ac:	3001      	adds	r0, #1
 80089ae:	d14a      	bne.n	8008a46 <_printf_i+0x1f6>
 80089b0:	f04f 30ff 	mov.w	r0, #4294967295
 80089b4:	b004      	add	sp, #16
 80089b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089ba:	6823      	ldr	r3, [r4, #0]
 80089bc:	f043 0320 	orr.w	r3, r3, #32
 80089c0:	6023      	str	r3, [r4, #0]
 80089c2:	4833      	ldr	r0, [pc, #204]	; (8008a90 <_printf_i+0x240>)
 80089c4:	2778      	movs	r7, #120	; 0x78
 80089c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80089ca:	6823      	ldr	r3, [r4, #0]
 80089cc:	6829      	ldr	r1, [r5, #0]
 80089ce:	061f      	lsls	r7, r3, #24
 80089d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80089d4:	d402      	bmi.n	80089dc <_printf_i+0x18c>
 80089d6:	065f      	lsls	r7, r3, #25
 80089d8:	bf48      	it	mi
 80089da:	b2b6      	uxthmi	r6, r6
 80089dc:	07df      	lsls	r7, r3, #31
 80089de:	bf48      	it	mi
 80089e0:	f043 0320 	orrmi.w	r3, r3, #32
 80089e4:	6029      	str	r1, [r5, #0]
 80089e6:	bf48      	it	mi
 80089e8:	6023      	strmi	r3, [r4, #0]
 80089ea:	b91e      	cbnz	r6, 80089f4 <_printf_i+0x1a4>
 80089ec:	6823      	ldr	r3, [r4, #0]
 80089ee:	f023 0320 	bic.w	r3, r3, #32
 80089f2:	6023      	str	r3, [r4, #0]
 80089f4:	2310      	movs	r3, #16
 80089f6:	e7a7      	b.n	8008948 <_printf_i+0xf8>
 80089f8:	4824      	ldr	r0, [pc, #144]	; (8008a8c <_printf_i+0x23c>)
 80089fa:	e7e4      	b.n	80089c6 <_printf_i+0x176>
 80089fc:	4615      	mov	r5, r2
 80089fe:	e7bd      	b.n	800897c <_printf_i+0x12c>
 8008a00:	682b      	ldr	r3, [r5, #0]
 8008a02:	6826      	ldr	r6, [r4, #0]
 8008a04:	6961      	ldr	r1, [r4, #20]
 8008a06:	1d18      	adds	r0, r3, #4
 8008a08:	6028      	str	r0, [r5, #0]
 8008a0a:	0635      	lsls	r5, r6, #24
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	d501      	bpl.n	8008a14 <_printf_i+0x1c4>
 8008a10:	6019      	str	r1, [r3, #0]
 8008a12:	e002      	b.n	8008a1a <_printf_i+0x1ca>
 8008a14:	0670      	lsls	r0, r6, #25
 8008a16:	d5fb      	bpl.n	8008a10 <_printf_i+0x1c0>
 8008a18:	8019      	strh	r1, [r3, #0]
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	6123      	str	r3, [r4, #16]
 8008a1e:	4615      	mov	r5, r2
 8008a20:	e7bc      	b.n	800899c <_printf_i+0x14c>
 8008a22:	682b      	ldr	r3, [r5, #0]
 8008a24:	1d1a      	adds	r2, r3, #4
 8008a26:	602a      	str	r2, [r5, #0]
 8008a28:	681d      	ldr	r5, [r3, #0]
 8008a2a:	6862      	ldr	r2, [r4, #4]
 8008a2c:	2100      	movs	r1, #0
 8008a2e:	4628      	mov	r0, r5
 8008a30:	f7f7 fbd6 	bl	80001e0 <memchr>
 8008a34:	b108      	cbz	r0, 8008a3a <_printf_i+0x1ea>
 8008a36:	1b40      	subs	r0, r0, r5
 8008a38:	6060      	str	r0, [r4, #4]
 8008a3a:	6863      	ldr	r3, [r4, #4]
 8008a3c:	6123      	str	r3, [r4, #16]
 8008a3e:	2300      	movs	r3, #0
 8008a40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a44:	e7aa      	b.n	800899c <_printf_i+0x14c>
 8008a46:	6923      	ldr	r3, [r4, #16]
 8008a48:	462a      	mov	r2, r5
 8008a4a:	4649      	mov	r1, r9
 8008a4c:	4640      	mov	r0, r8
 8008a4e:	47d0      	blx	sl
 8008a50:	3001      	adds	r0, #1
 8008a52:	d0ad      	beq.n	80089b0 <_printf_i+0x160>
 8008a54:	6823      	ldr	r3, [r4, #0]
 8008a56:	079b      	lsls	r3, r3, #30
 8008a58:	d413      	bmi.n	8008a82 <_printf_i+0x232>
 8008a5a:	68e0      	ldr	r0, [r4, #12]
 8008a5c:	9b03      	ldr	r3, [sp, #12]
 8008a5e:	4298      	cmp	r0, r3
 8008a60:	bfb8      	it	lt
 8008a62:	4618      	movlt	r0, r3
 8008a64:	e7a6      	b.n	80089b4 <_printf_i+0x164>
 8008a66:	2301      	movs	r3, #1
 8008a68:	4632      	mov	r2, r6
 8008a6a:	4649      	mov	r1, r9
 8008a6c:	4640      	mov	r0, r8
 8008a6e:	47d0      	blx	sl
 8008a70:	3001      	adds	r0, #1
 8008a72:	d09d      	beq.n	80089b0 <_printf_i+0x160>
 8008a74:	3501      	adds	r5, #1
 8008a76:	68e3      	ldr	r3, [r4, #12]
 8008a78:	9903      	ldr	r1, [sp, #12]
 8008a7a:	1a5b      	subs	r3, r3, r1
 8008a7c:	42ab      	cmp	r3, r5
 8008a7e:	dcf2      	bgt.n	8008a66 <_printf_i+0x216>
 8008a80:	e7eb      	b.n	8008a5a <_printf_i+0x20a>
 8008a82:	2500      	movs	r5, #0
 8008a84:	f104 0619 	add.w	r6, r4, #25
 8008a88:	e7f5      	b.n	8008a76 <_printf_i+0x226>
 8008a8a:	bf00      	nop
 8008a8c:	0800abee 	.word	0x0800abee
 8008a90:	0800abff 	.word	0x0800abff

08008a94 <std>:
 8008a94:	2300      	movs	r3, #0
 8008a96:	b510      	push	{r4, lr}
 8008a98:	4604      	mov	r4, r0
 8008a9a:	e9c0 3300 	strd	r3, r3, [r0]
 8008a9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008aa2:	6083      	str	r3, [r0, #8]
 8008aa4:	8181      	strh	r1, [r0, #12]
 8008aa6:	6643      	str	r3, [r0, #100]	; 0x64
 8008aa8:	81c2      	strh	r2, [r0, #14]
 8008aaa:	6183      	str	r3, [r0, #24]
 8008aac:	4619      	mov	r1, r3
 8008aae:	2208      	movs	r2, #8
 8008ab0:	305c      	adds	r0, #92	; 0x5c
 8008ab2:	f000 f906 	bl	8008cc2 <memset>
 8008ab6:	4b0d      	ldr	r3, [pc, #52]	; (8008aec <std+0x58>)
 8008ab8:	6263      	str	r3, [r4, #36]	; 0x24
 8008aba:	4b0d      	ldr	r3, [pc, #52]	; (8008af0 <std+0x5c>)
 8008abc:	62a3      	str	r3, [r4, #40]	; 0x28
 8008abe:	4b0d      	ldr	r3, [pc, #52]	; (8008af4 <std+0x60>)
 8008ac0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008ac2:	4b0d      	ldr	r3, [pc, #52]	; (8008af8 <std+0x64>)
 8008ac4:	6323      	str	r3, [r4, #48]	; 0x30
 8008ac6:	4b0d      	ldr	r3, [pc, #52]	; (8008afc <std+0x68>)
 8008ac8:	6224      	str	r4, [r4, #32]
 8008aca:	429c      	cmp	r4, r3
 8008acc:	d006      	beq.n	8008adc <std+0x48>
 8008ace:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008ad2:	4294      	cmp	r4, r2
 8008ad4:	d002      	beq.n	8008adc <std+0x48>
 8008ad6:	33d0      	adds	r3, #208	; 0xd0
 8008ad8:	429c      	cmp	r4, r3
 8008ada:	d105      	bne.n	8008ae8 <std+0x54>
 8008adc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ae4:	f000 b96a 	b.w	8008dbc <__retarget_lock_init_recursive>
 8008ae8:	bd10      	pop	{r4, pc}
 8008aea:	bf00      	nop
 8008aec:	08008c3d 	.word	0x08008c3d
 8008af0:	08008c5f 	.word	0x08008c5f
 8008af4:	08008c97 	.word	0x08008c97
 8008af8:	08008cbb 	.word	0x08008cbb
 8008afc:	20000498 	.word	0x20000498

08008b00 <stdio_exit_handler>:
 8008b00:	4a02      	ldr	r2, [pc, #8]	; (8008b0c <stdio_exit_handler+0xc>)
 8008b02:	4903      	ldr	r1, [pc, #12]	; (8008b10 <stdio_exit_handler+0x10>)
 8008b04:	4803      	ldr	r0, [pc, #12]	; (8008b14 <stdio_exit_handler+0x14>)
 8008b06:	f000 b869 	b.w	8008bdc <_fwalk_sglue>
 8008b0a:	bf00      	nop
 8008b0c:	2000000c 	.word	0x2000000c
 8008b10:	0800a749 	.word	0x0800a749
 8008b14:	20000018 	.word	0x20000018

08008b18 <cleanup_stdio>:
 8008b18:	6841      	ldr	r1, [r0, #4]
 8008b1a:	4b0c      	ldr	r3, [pc, #48]	; (8008b4c <cleanup_stdio+0x34>)
 8008b1c:	4299      	cmp	r1, r3
 8008b1e:	b510      	push	{r4, lr}
 8008b20:	4604      	mov	r4, r0
 8008b22:	d001      	beq.n	8008b28 <cleanup_stdio+0x10>
 8008b24:	f001 fe10 	bl	800a748 <_fflush_r>
 8008b28:	68a1      	ldr	r1, [r4, #8]
 8008b2a:	4b09      	ldr	r3, [pc, #36]	; (8008b50 <cleanup_stdio+0x38>)
 8008b2c:	4299      	cmp	r1, r3
 8008b2e:	d002      	beq.n	8008b36 <cleanup_stdio+0x1e>
 8008b30:	4620      	mov	r0, r4
 8008b32:	f001 fe09 	bl	800a748 <_fflush_r>
 8008b36:	68e1      	ldr	r1, [r4, #12]
 8008b38:	4b06      	ldr	r3, [pc, #24]	; (8008b54 <cleanup_stdio+0x3c>)
 8008b3a:	4299      	cmp	r1, r3
 8008b3c:	d004      	beq.n	8008b48 <cleanup_stdio+0x30>
 8008b3e:	4620      	mov	r0, r4
 8008b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b44:	f001 be00 	b.w	800a748 <_fflush_r>
 8008b48:	bd10      	pop	{r4, pc}
 8008b4a:	bf00      	nop
 8008b4c:	20000498 	.word	0x20000498
 8008b50:	20000500 	.word	0x20000500
 8008b54:	20000568 	.word	0x20000568

08008b58 <global_stdio_init.part.0>:
 8008b58:	b510      	push	{r4, lr}
 8008b5a:	4b0b      	ldr	r3, [pc, #44]	; (8008b88 <global_stdio_init.part.0+0x30>)
 8008b5c:	4c0b      	ldr	r4, [pc, #44]	; (8008b8c <global_stdio_init.part.0+0x34>)
 8008b5e:	4a0c      	ldr	r2, [pc, #48]	; (8008b90 <global_stdio_init.part.0+0x38>)
 8008b60:	601a      	str	r2, [r3, #0]
 8008b62:	4620      	mov	r0, r4
 8008b64:	2200      	movs	r2, #0
 8008b66:	2104      	movs	r1, #4
 8008b68:	f7ff ff94 	bl	8008a94 <std>
 8008b6c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008b70:	2201      	movs	r2, #1
 8008b72:	2109      	movs	r1, #9
 8008b74:	f7ff ff8e 	bl	8008a94 <std>
 8008b78:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008b7c:	2202      	movs	r2, #2
 8008b7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b82:	2112      	movs	r1, #18
 8008b84:	f7ff bf86 	b.w	8008a94 <std>
 8008b88:	200005d0 	.word	0x200005d0
 8008b8c:	20000498 	.word	0x20000498
 8008b90:	08008b01 	.word	0x08008b01

08008b94 <__sfp_lock_acquire>:
 8008b94:	4801      	ldr	r0, [pc, #4]	; (8008b9c <__sfp_lock_acquire+0x8>)
 8008b96:	f000 b912 	b.w	8008dbe <__retarget_lock_acquire_recursive>
 8008b9a:	bf00      	nop
 8008b9c:	200005d9 	.word	0x200005d9

08008ba0 <__sfp_lock_release>:
 8008ba0:	4801      	ldr	r0, [pc, #4]	; (8008ba8 <__sfp_lock_release+0x8>)
 8008ba2:	f000 b90d 	b.w	8008dc0 <__retarget_lock_release_recursive>
 8008ba6:	bf00      	nop
 8008ba8:	200005d9 	.word	0x200005d9

08008bac <__sinit>:
 8008bac:	b510      	push	{r4, lr}
 8008bae:	4604      	mov	r4, r0
 8008bb0:	f7ff fff0 	bl	8008b94 <__sfp_lock_acquire>
 8008bb4:	6a23      	ldr	r3, [r4, #32]
 8008bb6:	b11b      	cbz	r3, 8008bc0 <__sinit+0x14>
 8008bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bbc:	f7ff bff0 	b.w	8008ba0 <__sfp_lock_release>
 8008bc0:	4b04      	ldr	r3, [pc, #16]	; (8008bd4 <__sinit+0x28>)
 8008bc2:	6223      	str	r3, [r4, #32]
 8008bc4:	4b04      	ldr	r3, [pc, #16]	; (8008bd8 <__sinit+0x2c>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d1f5      	bne.n	8008bb8 <__sinit+0xc>
 8008bcc:	f7ff ffc4 	bl	8008b58 <global_stdio_init.part.0>
 8008bd0:	e7f2      	b.n	8008bb8 <__sinit+0xc>
 8008bd2:	bf00      	nop
 8008bd4:	08008b19 	.word	0x08008b19
 8008bd8:	200005d0 	.word	0x200005d0

08008bdc <_fwalk_sglue>:
 8008bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008be0:	4607      	mov	r7, r0
 8008be2:	4688      	mov	r8, r1
 8008be4:	4614      	mov	r4, r2
 8008be6:	2600      	movs	r6, #0
 8008be8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008bec:	f1b9 0901 	subs.w	r9, r9, #1
 8008bf0:	d505      	bpl.n	8008bfe <_fwalk_sglue+0x22>
 8008bf2:	6824      	ldr	r4, [r4, #0]
 8008bf4:	2c00      	cmp	r4, #0
 8008bf6:	d1f7      	bne.n	8008be8 <_fwalk_sglue+0xc>
 8008bf8:	4630      	mov	r0, r6
 8008bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bfe:	89ab      	ldrh	r3, [r5, #12]
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d907      	bls.n	8008c14 <_fwalk_sglue+0x38>
 8008c04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	d003      	beq.n	8008c14 <_fwalk_sglue+0x38>
 8008c0c:	4629      	mov	r1, r5
 8008c0e:	4638      	mov	r0, r7
 8008c10:	47c0      	blx	r8
 8008c12:	4306      	orrs	r6, r0
 8008c14:	3568      	adds	r5, #104	; 0x68
 8008c16:	e7e9      	b.n	8008bec <_fwalk_sglue+0x10>

08008c18 <iprintf>:
 8008c18:	b40f      	push	{r0, r1, r2, r3}
 8008c1a:	b507      	push	{r0, r1, r2, lr}
 8008c1c:	4906      	ldr	r1, [pc, #24]	; (8008c38 <iprintf+0x20>)
 8008c1e:	ab04      	add	r3, sp, #16
 8008c20:	6808      	ldr	r0, [r1, #0]
 8008c22:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c26:	6881      	ldr	r1, [r0, #8]
 8008c28:	9301      	str	r3, [sp, #4]
 8008c2a:	f001 fbed 	bl	800a408 <_vfiprintf_r>
 8008c2e:	b003      	add	sp, #12
 8008c30:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c34:	b004      	add	sp, #16
 8008c36:	4770      	bx	lr
 8008c38:	20000064 	.word	0x20000064

08008c3c <__sread>:
 8008c3c:	b510      	push	{r4, lr}
 8008c3e:	460c      	mov	r4, r1
 8008c40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c44:	f000 f86c 	bl	8008d20 <_read_r>
 8008c48:	2800      	cmp	r0, #0
 8008c4a:	bfab      	itete	ge
 8008c4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008c4e:	89a3      	ldrhlt	r3, [r4, #12]
 8008c50:	181b      	addge	r3, r3, r0
 8008c52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c56:	bfac      	ite	ge
 8008c58:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c5a:	81a3      	strhlt	r3, [r4, #12]
 8008c5c:	bd10      	pop	{r4, pc}

08008c5e <__swrite>:
 8008c5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c62:	461f      	mov	r7, r3
 8008c64:	898b      	ldrh	r3, [r1, #12]
 8008c66:	05db      	lsls	r3, r3, #23
 8008c68:	4605      	mov	r5, r0
 8008c6a:	460c      	mov	r4, r1
 8008c6c:	4616      	mov	r6, r2
 8008c6e:	d505      	bpl.n	8008c7c <__swrite+0x1e>
 8008c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c74:	2302      	movs	r3, #2
 8008c76:	2200      	movs	r2, #0
 8008c78:	f000 f840 	bl	8008cfc <_lseek_r>
 8008c7c:	89a3      	ldrh	r3, [r4, #12]
 8008c7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c86:	81a3      	strh	r3, [r4, #12]
 8008c88:	4632      	mov	r2, r6
 8008c8a:	463b      	mov	r3, r7
 8008c8c:	4628      	mov	r0, r5
 8008c8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c92:	f000 b857 	b.w	8008d44 <_write_r>

08008c96 <__sseek>:
 8008c96:	b510      	push	{r4, lr}
 8008c98:	460c      	mov	r4, r1
 8008c9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c9e:	f000 f82d 	bl	8008cfc <_lseek_r>
 8008ca2:	1c43      	adds	r3, r0, #1
 8008ca4:	89a3      	ldrh	r3, [r4, #12]
 8008ca6:	bf15      	itete	ne
 8008ca8:	6560      	strne	r0, [r4, #84]	; 0x54
 8008caa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008cae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008cb2:	81a3      	strheq	r3, [r4, #12]
 8008cb4:	bf18      	it	ne
 8008cb6:	81a3      	strhne	r3, [r4, #12]
 8008cb8:	bd10      	pop	{r4, pc}

08008cba <__sclose>:
 8008cba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cbe:	f000 b80d 	b.w	8008cdc <_close_r>

08008cc2 <memset>:
 8008cc2:	4402      	add	r2, r0
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d100      	bne.n	8008ccc <memset+0xa>
 8008cca:	4770      	bx	lr
 8008ccc:	f803 1b01 	strb.w	r1, [r3], #1
 8008cd0:	e7f9      	b.n	8008cc6 <memset+0x4>
	...

08008cd4 <_localeconv_r>:
 8008cd4:	4800      	ldr	r0, [pc, #0]	; (8008cd8 <_localeconv_r+0x4>)
 8008cd6:	4770      	bx	lr
 8008cd8:	20000158 	.word	0x20000158

08008cdc <_close_r>:
 8008cdc:	b538      	push	{r3, r4, r5, lr}
 8008cde:	4d06      	ldr	r5, [pc, #24]	; (8008cf8 <_close_r+0x1c>)
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	4604      	mov	r4, r0
 8008ce4:	4608      	mov	r0, r1
 8008ce6:	602b      	str	r3, [r5, #0]
 8008ce8:	f001 ff40 	bl	800ab6c <_close>
 8008cec:	1c43      	adds	r3, r0, #1
 8008cee:	d102      	bne.n	8008cf6 <_close_r+0x1a>
 8008cf0:	682b      	ldr	r3, [r5, #0]
 8008cf2:	b103      	cbz	r3, 8008cf6 <_close_r+0x1a>
 8008cf4:	6023      	str	r3, [r4, #0]
 8008cf6:	bd38      	pop	{r3, r4, r5, pc}
 8008cf8:	200005d4 	.word	0x200005d4

08008cfc <_lseek_r>:
 8008cfc:	b538      	push	{r3, r4, r5, lr}
 8008cfe:	4d07      	ldr	r5, [pc, #28]	; (8008d1c <_lseek_r+0x20>)
 8008d00:	4604      	mov	r4, r0
 8008d02:	4608      	mov	r0, r1
 8008d04:	4611      	mov	r1, r2
 8008d06:	2200      	movs	r2, #0
 8008d08:	602a      	str	r2, [r5, #0]
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	f7f9 f8d8 	bl	8001ec0 <_lseek>
 8008d10:	1c43      	adds	r3, r0, #1
 8008d12:	d102      	bne.n	8008d1a <_lseek_r+0x1e>
 8008d14:	682b      	ldr	r3, [r5, #0]
 8008d16:	b103      	cbz	r3, 8008d1a <_lseek_r+0x1e>
 8008d18:	6023      	str	r3, [r4, #0]
 8008d1a:	bd38      	pop	{r3, r4, r5, pc}
 8008d1c:	200005d4 	.word	0x200005d4

08008d20 <_read_r>:
 8008d20:	b538      	push	{r3, r4, r5, lr}
 8008d22:	4d07      	ldr	r5, [pc, #28]	; (8008d40 <_read_r+0x20>)
 8008d24:	4604      	mov	r4, r0
 8008d26:	4608      	mov	r0, r1
 8008d28:	4611      	mov	r1, r2
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	602a      	str	r2, [r5, #0]
 8008d2e:	461a      	mov	r2, r3
 8008d30:	f7f9 f872 	bl	8001e18 <_read>
 8008d34:	1c43      	adds	r3, r0, #1
 8008d36:	d102      	bne.n	8008d3e <_read_r+0x1e>
 8008d38:	682b      	ldr	r3, [r5, #0]
 8008d3a:	b103      	cbz	r3, 8008d3e <_read_r+0x1e>
 8008d3c:	6023      	str	r3, [r4, #0]
 8008d3e:	bd38      	pop	{r3, r4, r5, pc}
 8008d40:	200005d4 	.word	0x200005d4

08008d44 <_write_r>:
 8008d44:	b538      	push	{r3, r4, r5, lr}
 8008d46:	4d07      	ldr	r5, [pc, #28]	; (8008d64 <_write_r+0x20>)
 8008d48:	4604      	mov	r4, r0
 8008d4a:	4608      	mov	r0, r1
 8008d4c:	4611      	mov	r1, r2
 8008d4e:	2200      	movs	r2, #0
 8008d50:	602a      	str	r2, [r5, #0]
 8008d52:	461a      	mov	r2, r3
 8008d54:	f7f9 f87d 	bl	8001e52 <_write>
 8008d58:	1c43      	adds	r3, r0, #1
 8008d5a:	d102      	bne.n	8008d62 <_write_r+0x1e>
 8008d5c:	682b      	ldr	r3, [r5, #0]
 8008d5e:	b103      	cbz	r3, 8008d62 <_write_r+0x1e>
 8008d60:	6023      	str	r3, [r4, #0]
 8008d62:	bd38      	pop	{r3, r4, r5, pc}
 8008d64:	200005d4 	.word	0x200005d4

08008d68 <__errno>:
 8008d68:	4b01      	ldr	r3, [pc, #4]	; (8008d70 <__errno+0x8>)
 8008d6a:	6818      	ldr	r0, [r3, #0]
 8008d6c:	4770      	bx	lr
 8008d6e:	bf00      	nop
 8008d70:	20000064 	.word	0x20000064

08008d74 <__libc_init_array>:
 8008d74:	b570      	push	{r4, r5, r6, lr}
 8008d76:	4d0d      	ldr	r5, [pc, #52]	; (8008dac <__libc_init_array+0x38>)
 8008d78:	4c0d      	ldr	r4, [pc, #52]	; (8008db0 <__libc_init_array+0x3c>)
 8008d7a:	1b64      	subs	r4, r4, r5
 8008d7c:	10a4      	asrs	r4, r4, #2
 8008d7e:	2600      	movs	r6, #0
 8008d80:	42a6      	cmp	r6, r4
 8008d82:	d109      	bne.n	8008d98 <__libc_init_array+0x24>
 8008d84:	4d0b      	ldr	r5, [pc, #44]	; (8008db4 <__libc_init_array+0x40>)
 8008d86:	4c0c      	ldr	r4, [pc, #48]	; (8008db8 <__libc_init_array+0x44>)
 8008d88:	f001 fef8 	bl	800ab7c <_init>
 8008d8c:	1b64      	subs	r4, r4, r5
 8008d8e:	10a4      	asrs	r4, r4, #2
 8008d90:	2600      	movs	r6, #0
 8008d92:	42a6      	cmp	r6, r4
 8008d94:	d105      	bne.n	8008da2 <__libc_init_array+0x2e>
 8008d96:	bd70      	pop	{r4, r5, r6, pc}
 8008d98:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d9c:	4798      	blx	r3
 8008d9e:	3601      	adds	r6, #1
 8008da0:	e7ee      	b.n	8008d80 <__libc_init_array+0xc>
 8008da2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008da6:	4798      	blx	r3
 8008da8:	3601      	adds	r6, #1
 8008daa:	e7f2      	b.n	8008d92 <__libc_init_array+0x1e>
 8008dac:	0800af4c 	.word	0x0800af4c
 8008db0:	0800af4c 	.word	0x0800af4c
 8008db4:	0800af4c 	.word	0x0800af4c
 8008db8:	0800af50 	.word	0x0800af50

08008dbc <__retarget_lock_init_recursive>:
 8008dbc:	4770      	bx	lr

08008dbe <__retarget_lock_acquire_recursive>:
 8008dbe:	4770      	bx	lr

08008dc0 <__retarget_lock_release_recursive>:
 8008dc0:	4770      	bx	lr

08008dc2 <quorem>:
 8008dc2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dc6:	6903      	ldr	r3, [r0, #16]
 8008dc8:	690c      	ldr	r4, [r1, #16]
 8008dca:	42a3      	cmp	r3, r4
 8008dcc:	4607      	mov	r7, r0
 8008dce:	db7e      	blt.n	8008ece <quorem+0x10c>
 8008dd0:	3c01      	subs	r4, #1
 8008dd2:	f101 0814 	add.w	r8, r1, #20
 8008dd6:	f100 0514 	add.w	r5, r0, #20
 8008dda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008dde:	9301      	str	r3, [sp, #4]
 8008de0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008de4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008de8:	3301      	adds	r3, #1
 8008dea:	429a      	cmp	r2, r3
 8008dec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008df0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008df4:	fbb2 f6f3 	udiv	r6, r2, r3
 8008df8:	d331      	bcc.n	8008e5e <quorem+0x9c>
 8008dfa:	f04f 0e00 	mov.w	lr, #0
 8008dfe:	4640      	mov	r0, r8
 8008e00:	46ac      	mov	ip, r5
 8008e02:	46f2      	mov	sl, lr
 8008e04:	f850 2b04 	ldr.w	r2, [r0], #4
 8008e08:	b293      	uxth	r3, r2
 8008e0a:	fb06 e303 	mla	r3, r6, r3, lr
 8008e0e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008e12:	0c1a      	lsrs	r2, r3, #16
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	ebaa 0303 	sub.w	r3, sl, r3
 8008e1a:	f8dc a000 	ldr.w	sl, [ip]
 8008e1e:	fa13 f38a 	uxtah	r3, r3, sl
 8008e22:	fb06 220e 	mla	r2, r6, lr, r2
 8008e26:	9300      	str	r3, [sp, #0]
 8008e28:	9b00      	ldr	r3, [sp, #0]
 8008e2a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008e2e:	b292      	uxth	r2, r2
 8008e30:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008e34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e38:	f8bd 3000 	ldrh.w	r3, [sp]
 8008e3c:	4581      	cmp	r9, r0
 8008e3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e42:	f84c 3b04 	str.w	r3, [ip], #4
 8008e46:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008e4a:	d2db      	bcs.n	8008e04 <quorem+0x42>
 8008e4c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008e50:	b92b      	cbnz	r3, 8008e5e <quorem+0x9c>
 8008e52:	9b01      	ldr	r3, [sp, #4]
 8008e54:	3b04      	subs	r3, #4
 8008e56:	429d      	cmp	r5, r3
 8008e58:	461a      	mov	r2, r3
 8008e5a:	d32c      	bcc.n	8008eb6 <quorem+0xf4>
 8008e5c:	613c      	str	r4, [r7, #16]
 8008e5e:	4638      	mov	r0, r7
 8008e60:	f001 f9a8 	bl	800a1b4 <__mcmp>
 8008e64:	2800      	cmp	r0, #0
 8008e66:	db22      	blt.n	8008eae <quorem+0xec>
 8008e68:	3601      	adds	r6, #1
 8008e6a:	4629      	mov	r1, r5
 8008e6c:	2000      	movs	r0, #0
 8008e6e:	f858 2b04 	ldr.w	r2, [r8], #4
 8008e72:	f8d1 c000 	ldr.w	ip, [r1]
 8008e76:	b293      	uxth	r3, r2
 8008e78:	1ac3      	subs	r3, r0, r3
 8008e7a:	0c12      	lsrs	r2, r2, #16
 8008e7c:	fa13 f38c 	uxtah	r3, r3, ip
 8008e80:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008e84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e88:	b29b      	uxth	r3, r3
 8008e8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e8e:	45c1      	cmp	r9, r8
 8008e90:	f841 3b04 	str.w	r3, [r1], #4
 8008e94:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008e98:	d2e9      	bcs.n	8008e6e <quorem+0xac>
 8008e9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ea2:	b922      	cbnz	r2, 8008eae <quorem+0xec>
 8008ea4:	3b04      	subs	r3, #4
 8008ea6:	429d      	cmp	r5, r3
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	d30a      	bcc.n	8008ec2 <quorem+0x100>
 8008eac:	613c      	str	r4, [r7, #16]
 8008eae:	4630      	mov	r0, r6
 8008eb0:	b003      	add	sp, #12
 8008eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eb6:	6812      	ldr	r2, [r2, #0]
 8008eb8:	3b04      	subs	r3, #4
 8008eba:	2a00      	cmp	r2, #0
 8008ebc:	d1ce      	bne.n	8008e5c <quorem+0x9a>
 8008ebe:	3c01      	subs	r4, #1
 8008ec0:	e7c9      	b.n	8008e56 <quorem+0x94>
 8008ec2:	6812      	ldr	r2, [r2, #0]
 8008ec4:	3b04      	subs	r3, #4
 8008ec6:	2a00      	cmp	r2, #0
 8008ec8:	d1f0      	bne.n	8008eac <quorem+0xea>
 8008eca:	3c01      	subs	r4, #1
 8008ecc:	e7eb      	b.n	8008ea6 <quorem+0xe4>
 8008ece:	2000      	movs	r0, #0
 8008ed0:	e7ee      	b.n	8008eb0 <quorem+0xee>
 8008ed2:	0000      	movs	r0, r0
 8008ed4:	0000      	movs	r0, r0
	...

08008ed8 <_dtoa_r>:
 8008ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008edc:	ed2d 8b04 	vpush	{d8-d9}
 8008ee0:	69c5      	ldr	r5, [r0, #28]
 8008ee2:	b093      	sub	sp, #76	; 0x4c
 8008ee4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008ee8:	ec57 6b10 	vmov	r6, r7, d0
 8008eec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008ef0:	9107      	str	r1, [sp, #28]
 8008ef2:	4604      	mov	r4, r0
 8008ef4:	920a      	str	r2, [sp, #40]	; 0x28
 8008ef6:	930d      	str	r3, [sp, #52]	; 0x34
 8008ef8:	b975      	cbnz	r5, 8008f18 <_dtoa_r+0x40>
 8008efa:	2010      	movs	r0, #16
 8008efc:	f000 fe2a 	bl	8009b54 <malloc>
 8008f00:	4602      	mov	r2, r0
 8008f02:	61e0      	str	r0, [r4, #28]
 8008f04:	b920      	cbnz	r0, 8008f10 <_dtoa_r+0x38>
 8008f06:	4bae      	ldr	r3, [pc, #696]	; (80091c0 <_dtoa_r+0x2e8>)
 8008f08:	21ef      	movs	r1, #239	; 0xef
 8008f0a:	48ae      	ldr	r0, [pc, #696]	; (80091c4 <_dtoa_r+0x2ec>)
 8008f0c:	f001 fcf8 	bl	800a900 <__assert_func>
 8008f10:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008f14:	6005      	str	r5, [r0, #0]
 8008f16:	60c5      	str	r5, [r0, #12]
 8008f18:	69e3      	ldr	r3, [r4, #28]
 8008f1a:	6819      	ldr	r1, [r3, #0]
 8008f1c:	b151      	cbz	r1, 8008f34 <_dtoa_r+0x5c>
 8008f1e:	685a      	ldr	r2, [r3, #4]
 8008f20:	604a      	str	r2, [r1, #4]
 8008f22:	2301      	movs	r3, #1
 8008f24:	4093      	lsls	r3, r2
 8008f26:	608b      	str	r3, [r1, #8]
 8008f28:	4620      	mov	r0, r4
 8008f2a:	f000 ff07 	bl	8009d3c <_Bfree>
 8008f2e:	69e3      	ldr	r3, [r4, #28]
 8008f30:	2200      	movs	r2, #0
 8008f32:	601a      	str	r2, [r3, #0]
 8008f34:	1e3b      	subs	r3, r7, #0
 8008f36:	bfbb      	ittet	lt
 8008f38:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008f3c:	9303      	strlt	r3, [sp, #12]
 8008f3e:	2300      	movge	r3, #0
 8008f40:	2201      	movlt	r2, #1
 8008f42:	bfac      	ite	ge
 8008f44:	f8c8 3000 	strge.w	r3, [r8]
 8008f48:	f8c8 2000 	strlt.w	r2, [r8]
 8008f4c:	4b9e      	ldr	r3, [pc, #632]	; (80091c8 <_dtoa_r+0x2f0>)
 8008f4e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008f52:	ea33 0308 	bics.w	r3, r3, r8
 8008f56:	d11b      	bne.n	8008f90 <_dtoa_r+0xb8>
 8008f58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f5a:	f242 730f 	movw	r3, #9999	; 0x270f
 8008f5e:	6013      	str	r3, [r2, #0]
 8008f60:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008f64:	4333      	orrs	r3, r6
 8008f66:	f000 8593 	beq.w	8009a90 <_dtoa_r+0xbb8>
 8008f6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f6c:	b963      	cbnz	r3, 8008f88 <_dtoa_r+0xb0>
 8008f6e:	4b97      	ldr	r3, [pc, #604]	; (80091cc <_dtoa_r+0x2f4>)
 8008f70:	e027      	b.n	8008fc2 <_dtoa_r+0xea>
 8008f72:	4b97      	ldr	r3, [pc, #604]	; (80091d0 <_dtoa_r+0x2f8>)
 8008f74:	9300      	str	r3, [sp, #0]
 8008f76:	3308      	adds	r3, #8
 8008f78:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008f7a:	6013      	str	r3, [r2, #0]
 8008f7c:	9800      	ldr	r0, [sp, #0]
 8008f7e:	b013      	add	sp, #76	; 0x4c
 8008f80:	ecbd 8b04 	vpop	{d8-d9}
 8008f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f88:	4b90      	ldr	r3, [pc, #576]	; (80091cc <_dtoa_r+0x2f4>)
 8008f8a:	9300      	str	r3, [sp, #0]
 8008f8c:	3303      	adds	r3, #3
 8008f8e:	e7f3      	b.n	8008f78 <_dtoa_r+0xa0>
 8008f90:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008f94:	2200      	movs	r2, #0
 8008f96:	ec51 0b17 	vmov	r0, r1, d7
 8008f9a:	eeb0 8a47 	vmov.f32	s16, s14
 8008f9e:	eef0 8a67 	vmov.f32	s17, s15
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	f7f7 fd98 	bl	8000ad8 <__aeabi_dcmpeq>
 8008fa8:	4681      	mov	r9, r0
 8008faa:	b160      	cbz	r0, 8008fc6 <_dtoa_r+0xee>
 8008fac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008fae:	2301      	movs	r3, #1
 8008fb0:	6013      	str	r3, [r2, #0]
 8008fb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	f000 8568 	beq.w	8009a8a <_dtoa_r+0xbb2>
 8008fba:	4b86      	ldr	r3, [pc, #536]	; (80091d4 <_dtoa_r+0x2fc>)
 8008fbc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008fbe:	6013      	str	r3, [r2, #0]
 8008fc0:	3b01      	subs	r3, #1
 8008fc2:	9300      	str	r3, [sp, #0]
 8008fc4:	e7da      	b.n	8008f7c <_dtoa_r+0xa4>
 8008fc6:	aa10      	add	r2, sp, #64	; 0x40
 8008fc8:	a911      	add	r1, sp, #68	; 0x44
 8008fca:	4620      	mov	r0, r4
 8008fcc:	eeb0 0a48 	vmov.f32	s0, s16
 8008fd0:	eef0 0a68 	vmov.f32	s1, s17
 8008fd4:	f001 f994 	bl	800a300 <__d2b>
 8008fd8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008fdc:	4682      	mov	sl, r0
 8008fde:	2d00      	cmp	r5, #0
 8008fe0:	d07f      	beq.n	80090e2 <_dtoa_r+0x20a>
 8008fe2:	ee18 3a90 	vmov	r3, s17
 8008fe6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008fea:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008fee:	ec51 0b18 	vmov	r0, r1, d8
 8008ff2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008ff6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008ffa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008ffe:	4619      	mov	r1, r3
 8009000:	2200      	movs	r2, #0
 8009002:	4b75      	ldr	r3, [pc, #468]	; (80091d8 <_dtoa_r+0x300>)
 8009004:	f7f7 f948 	bl	8000298 <__aeabi_dsub>
 8009008:	a367      	add	r3, pc, #412	; (adr r3, 80091a8 <_dtoa_r+0x2d0>)
 800900a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800900e:	f7f7 fafb 	bl	8000608 <__aeabi_dmul>
 8009012:	a367      	add	r3, pc, #412	; (adr r3, 80091b0 <_dtoa_r+0x2d8>)
 8009014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009018:	f7f7 f940 	bl	800029c <__adddf3>
 800901c:	4606      	mov	r6, r0
 800901e:	4628      	mov	r0, r5
 8009020:	460f      	mov	r7, r1
 8009022:	f7f7 fa87 	bl	8000534 <__aeabi_i2d>
 8009026:	a364      	add	r3, pc, #400	; (adr r3, 80091b8 <_dtoa_r+0x2e0>)
 8009028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902c:	f7f7 faec 	bl	8000608 <__aeabi_dmul>
 8009030:	4602      	mov	r2, r0
 8009032:	460b      	mov	r3, r1
 8009034:	4630      	mov	r0, r6
 8009036:	4639      	mov	r1, r7
 8009038:	f7f7 f930 	bl	800029c <__adddf3>
 800903c:	4606      	mov	r6, r0
 800903e:	460f      	mov	r7, r1
 8009040:	f7f7 fd92 	bl	8000b68 <__aeabi_d2iz>
 8009044:	2200      	movs	r2, #0
 8009046:	4683      	mov	fp, r0
 8009048:	2300      	movs	r3, #0
 800904a:	4630      	mov	r0, r6
 800904c:	4639      	mov	r1, r7
 800904e:	f7f7 fd4d 	bl	8000aec <__aeabi_dcmplt>
 8009052:	b148      	cbz	r0, 8009068 <_dtoa_r+0x190>
 8009054:	4658      	mov	r0, fp
 8009056:	f7f7 fa6d 	bl	8000534 <__aeabi_i2d>
 800905a:	4632      	mov	r2, r6
 800905c:	463b      	mov	r3, r7
 800905e:	f7f7 fd3b 	bl	8000ad8 <__aeabi_dcmpeq>
 8009062:	b908      	cbnz	r0, 8009068 <_dtoa_r+0x190>
 8009064:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009068:	f1bb 0f16 	cmp.w	fp, #22
 800906c:	d857      	bhi.n	800911e <_dtoa_r+0x246>
 800906e:	4b5b      	ldr	r3, [pc, #364]	; (80091dc <_dtoa_r+0x304>)
 8009070:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009078:	ec51 0b18 	vmov	r0, r1, d8
 800907c:	f7f7 fd36 	bl	8000aec <__aeabi_dcmplt>
 8009080:	2800      	cmp	r0, #0
 8009082:	d04e      	beq.n	8009122 <_dtoa_r+0x24a>
 8009084:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009088:	2300      	movs	r3, #0
 800908a:	930c      	str	r3, [sp, #48]	; 0x30
 800908c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800908e:	1b5b      	subs	r3, r3, r5
 8009090:	1e5a      	subs	r2, r3, #1
 8009092:	bf45      	ittet	mi
 8009094:	f1c3 0301 	rsbmi	r3, r3, #1
 8009098:	9305      	strmi	r3, [sp, #20]
 800909a:	2300      	movpl	r3, #0
 800909c:	2300      	movmi	r3, #0
 800909e:	9206      	str	r2, [sp, #24]
 80090a0:	bf54      	ite	pl
 80090a2:	9305      	strpl	r3, [sp, #20]
 80090a4:	9306      	strmi	r3, [sp, #24]
 80090a6:	f1bb 0f00 	cmp.w	fp, #0
 80090aa:	db3c      	blt.n	8009126 <_dtoa_r+0x24e>
 80090ac:	9b06      	ldr	r3, [sp, #24]
 80090ae:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80090b2:	445b      	add	r3, fp
 80090b4:	9306      	str	r3, [sp, #24]
 80090b6:	2300      	movs	r3, #0
 80090b8:	9308      	str	r3, [sp, #32]
 80090ba:	9b07      	ldr	r3, [sp, #28]
 80090bc:	2b09      	cmp	r3, #9
 80090be:	d868      	bhi.n	8009192 <_dtoa_r+0x2ba>
 80090c0:	2b05      	cmp	r3, #5
 80090c2:	bfc4      	itt	gt
 80090c4:	3b04      	subgt	r3, #4
 80090c6:	9307      	strgt	r3, [sp, #28]
 80090c8:	9b07      	ldr	r3, [sp, #28]
 80090ca:	f1a3 0302 	sub.w	r3, r3, #2
 80090ce:	bfcc      	ite	gt
 80090d0:	2500      	movgt	r5, #0
 80090d2:	2501      	movle	r5, #1
 80090d4:	2b03      	cmp	r3, #3
 80090d6:	f200 8085 	bhi.w	80091e4 <_dtoa_r+0x30c>
 80090da:	e8df f003 	tbb	[pc, r3]
 80090de:	3b2e      	.short	0x3b2e
 80090e0:	5839      	.short	0x5839
 80090e2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80090e6:	441d      	add	r5, r3
 80090e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80090ec:	2b20      	cmp	r3, #32
 80090ee:	bfc1      	itttt	gt
 80090f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80090f4:	fa08 f803 	lslgt.w	r8, r8, r3
 80090f8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80090fc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009100:	bfd6      	itet	le
 8009102:	f1c3 0320 	rsble	r3, r3, #32
 8009106:	ea48 0003 	orrgt.w	r0, r8, r3
 800910a:	fa06 f003 	lslle.w	r0, r6, r3
 800910e:	f7f7 fa01 	bl	8000514 <__aeabi_ui2d>
 8009112:	2201      	movs	r2, #1
 8009114:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009118:	3d01      	subs	r5, #1
 800911a:	920e      	str	r2, [sp, #56]	; 0x38
 800911c:	e76f      	b.n	8008ffe <_dtoa_r+0x126>
 800911e:	2301      	movs	r3, #1
 8009120:	e7b3      	b.n	800908a <_dtoa_r+0x1b2>
 8009122:	900c      	str	r0, [sp, #48]	; 0x30
 8009124:	e7b2      	b.n	800908c <_dtoa_r+0x1b4>
 8009126:	9b05      	ldr	r3, [sp, #20]
 8009128:	eba3 030b 	sub.w	r3, r3, fp
 800912c:	9305      	str	r3, [sp, #20]
 800912e:	f1cb 0300 	rsb	r3, fp, #0
 8009132:	9308      	str	r3, [sp, #32]
 8009134:	2300      	movs	r3, #0
 8009136:	930b      	str	r3, [sp, #44]	; 0x2c
 8009138:	e7bf      	b.n	80090ba <_dtoa_r+0x1e2>
 800913a:	2300      	movs	r3, #0
 800913c:	9309      	str	r3, [sp, #36]	; 0x24
 800913e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009140:	2b00      	cmp	r3, #0
 8009142:	dc52      	bgt.n	80091ea <_dtoa_r+0x312>
 8009144:	2301      	movs	r3, #1
 8009146:	9301      	str	r3, [sp, #4]
 8009148:	9304      	str	r3, [sp, #16]
 800914a:	461a      	mov	r2, r3
 800914c:	920a      	str	r2, [sp, #40]	; 0x28
 800914e:	e00b      	b.n	8009168 <_dtoa_r+0x290>
 8009150:	2301      	movs	r3, #1
 8009152:	e7f3      	b.n	800913c <_dtoa_r+0x264>
 8009154:	2300      	movs	r3, #0
 8009156:	9309      	str	r3, [sp, #36]	; 0x24
 8009158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800915a:	445b      	add	r3, fp
 800915c:	9301      	str	r3, [sp, #4]
 800915e:	3301      	adds	r3, #1
 8009160:	2b01      	cmp	r3, #1
 8009162:	9304      	str	r3, [sp, #16]
 8009164:	bfb8      	it	lt
 8009166:	2301      	movlt	r3, #1
 8009168:	69e0      	ldr	r0, [r4, #28]
 800916a:	2100      	movs	r1, #0
 800916c:	2204      	movs	r2, #4
 800916e:	f102 0614 	add.w	r6, r2, #20
 8009172:	429e      	cmp	r6, r3
 8009174:	d93d      	bls.n	80091f2 <_dtoa_r+0x31a>
 8009176:	6041      	str	r1, [r0, #4]
 8009178:	4620      	mov	r0, r4
 800917a:	f000 fd9f 	bl	8009cbc <_Balloc>
 800917e:	9000      	str	r0, [sp, #0]
 8009180:	2800      	cmp	r0, #0
 8009182:	d139      	bne.n	80091f8 <_dtoa_r+0x320>
 8009184:	4b16      	ldr	r3, [pc, #88]	; (80091e0 <_dtoa_r+0x308>)
 8009186:	4602      	mov	r2, r0
 8009188:	f240 11af 	movw	r1, #431	; 0x1af
 800918c:	e6bd      	b.n	8008f0a <_dtoa_r+0x32>
 800918e:	2301      	movs	r3, #1
 8009190:	e7e1      	b.n	8009156 <_dtoa_r+0x27e>
 8009192:	2501      	movs	r5, #1
 8009194:	2300      	movs	r3, #0
 8009196:	9307      	str	r3, [sp, #28]
 8009198:	9509      	str	r5, [sp, #36]	; 0x24
 800919a:	f04f 33ff 	mov.w	r3, #4294967295
 800919e:	9301      	str	r3, [sp, #4]
 80091a0:	9304      	str	r3, [sp, #16]
 80091a2:	2200      	movs	r2, #0
 80091a4:	2312      	movs	r3, #18
 80091a6:	e7d1      	b.n	800914c <_dtoa_r+0x274>
 80091a8:	636f4361 	.word	0x636f4361
 80091ac:	3fd287a7 	.word	0x3fd287a7
 80091b0:	8b60c8b3 	.word	0x8b60c8b3
 80091b4:	3fc68a28 	.word	0x3fc68a28
 80091b8:	509f79fb 	.word	0x509f79fb
 80091bc:	3fd34413 	.word	0x3fd34413
 80091c0:	0800ac1d 	.word	0x0800ac1d
 80091c4:	0800ac34 	.word	0x0800ac34
 80091c8:	7ff00000 	.word	0x7ff00000
 80091cc:	0800ac19 	.word	0x0800ac19
 80091d0:	0800ac10 	.word	0x0800ac10
 80091d4:	0800abed 	.word	0x0800abed
 80091d8:	3ff80000 	.word	0x3ff80000
 80091dc:	0800ad20 	.word	0x0800ad20
 80091e0:	0800ac8c 	.word	0x0800ac8c
 80091e4:	2301      	movs	r3, #1
 80091e6:	9309      	str	r3, [sp, #36]	; 0x24
 80091e8:	e7d7      	b.n	800919a <_dtoa_r+0x2c2>
 80091ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091ec:	9301      	str	r3, [sp, #4]
 80091ee:	9304      	str	r3, [sp, #16]
 80091f0:	e7ba      	b.n	8009168 <_dtoa_r+0x290>
 80091f2:	3101      	adds	r1, #1
 80091f4:	0052      	lsls	r2, r2, #1
 80091f6:	e7ba      	b.n	800916e <_dtoa_r+0x296>
 80091f8:	69e3      	ldr	r3, [r4, #28]
 80091fa:	9a00      	ldr	r2, [sp, #0]
 80091fc:	601a      	str	r2, [r3, #0]
 80091fe:	9b04      	ldr	r3, [sp, #16]
 8009200:	2b0e      	cmp	r3, #14
 8009202:	f200 80a8 	bhi.w	8009356 <_dtoa_r+0x47e>
 8009206:	2d00      	cmp	r5, #0
 8009208:	f000 80a5 	beq.w	8009356 <_dtoa_r+0x47e>
 800920c:	f1bb 0f00 	cmp.w	fp, #0
 8009210:	dd38      	ble.n	8009284 <_dtoa_r+0x3ac>
 8009212:	4bc0      	ldr	r3, [pc, #768]	; (8009514 <_dtoa_r+0x63c>)
 8009214:	f00b 020f 	and.w	r2, fp, #15
 8009218:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800921c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009220:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009224:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009228:	d019      	beq.n	800925e <_dtoa_r+0x386>
 800922a:	4bbb      	ldr	r3, [pc, #748]	; (8009518 <_dtoa_r+0x640>)
 800922c:	ec51 0b18 	vmov	r0, r1, d8
 8009230:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009234:	f7f7 fb12 	bl	800085c <__aeabi_ddiv>
 8009238:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800923c:	f008 080f 	and.w	r8, r8, #15
 8009240:	2503      	movs	r5, #3
 8009242:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009518 <_dtoa_r+0x640>
 8009246:	f1b8 0f00 	cmp.w	r8, #0
 800924a:	d10a      	bne.n	8009262 <_dtoa_r+0x38a>
 800924c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009250:	4632      	mov	r2, r6
 8009252:	463b      	mov	r3, r7
 8009254:	f7f7 fb02 	bl	800085c <__aeabi_ddiv>
 8009258:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800925c:	e02b      	b.n	80092b6 <_dtoa_r+0x3de>
 800925e:	2502      	movs	r5, #2
 8009260:	e7ef      	b.n	8009242 <_dtoa_r+0x36a>
 8009262:	f018 0f01 	tst.w	r8, #1
 8009266:	d008      	beq.n	800927a <_dtoa_r+0x3a2>
 8009268:	4630      	mov	r0, r6
 800926a:	4639      	mov	r1, r7
 800926c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009270:	f7f7 f9ca 	bl	8000608 <__aeabi_dmul>
 8009274:	3501      	adds	r5, #1
 8009276:	4606      	mov	r6, r0
 8009278:	460f      	mov	r7, r1
 800927a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800927e:	f109 0908 	add.w	r9, r9, #8
 8009282:	e7e0      	b.n	8009246 <_dtoa_r+0x36e>
 8009284:	f000 809f 	beq.w	80093c6 <_dtoa_r+0x4ee>
 8009288:	f1cb 0600 	rsb	r6, fp, #0
 800928c:	4ba1      	ldr	r3, [pc, #644]	; (8009514 <_dtoa_r+0x63c>)
 800928e:	4fa2      	ldr	r7, [pc, #648]	; (8009518 <_dtoa_r+0x640>)
 8009290:	f006 020f 	and.w	r2, r6, #15
 8009294:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929c:	ec51 0b18 	vmov	r0, r1, d8
 80092a0:	f7f7 f9b2 	bl	8000608 <__aeabi_dmul>
 80092a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092a8:	1136      	asrs	r6, r6, #4
 80092aa:	2300      	movs	r3, #0
 80092ac:	2502      	movs	r5, #2
 80092ae:	2e00      	cmp	r6, #0
 80092b0:	d17e      	bne.n	80093b0 <_dtoa_r+0x4d8>
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d1d0      	bne.n	8009258 <_dtoa_r+0x380>
 80092b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092b8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	f000 8084 	beq.w	80093ca <_dtoa_r+0x4f2>
 80092c2:	4b96      	ldr	r3, [pc, #600]	; (800951c <_dtoa_r+0x644>)
 80092c4:	2200      	movs	r2, #0
 80092c6:	4640      	mov	r0, r8
 80092c8:	4649      	mov	r1, r9
 80092ca:	f7f7 fc0f 	bl	8000aec <__aeabi_dcmplt>
 80092ce:	2800      	cmp	r0, #0
 80092d0:	d07b      	beq.n	80093ca <_dtoa_r+0x4f2>
 80092d2:	9b04      	ldr	r3, [sp, #16]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d078      	beq.n	80093ca <_dtoa_r+0x4f2>
 80092d8:	9b01      	ldr	r3, [sp, #4]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	dd39      	ble.n	8009352 <_dtoa_r+0x47a>
 80092de:	4b90      	ldr	r3, [pc, #576]	; (8009520 <_dtoa_r+0x648>)
 80092e0:	2200      	movs	r2, #0
 80092e2:	4640      	mov	r0, r8
 80092e4:	4649      	mov	r1, r9
 80092e6:	f7f7 f98f 	bl	8000608 <__aeabi_dmul>
 80092ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092ee:	9e01      	ldr	r6, [sp, #4]
 80092f0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80092f4:	3501      	adds	r5, #1
 80092f6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80092fa:	4628      	mov	r0, r5
 80092fc:	f7f7 f91a 	bl	8000534 <__aeabi_i2d>
 8009300:	4642      	mov	r2, r8
 8009302:	464b      	mov	r3, r9
 8009304:	f7f7 f980 	bl	8000608 <__aeabi_dmul>
 8009308:	4b86      	ldr	r3, [pc, #536]	; (8009524 <_dtoa_r+0x64c>)
 800930a:	2200      	movs	r2, #0
 800930c:	f7f6 ffc6 	bl	800029c <__adddf3>
 8009310:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009314:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009318:	9303      	str	r3, [sp, #12]
 800931a:	2e00      	cmp	r6, #0
 800931c:	d158      	bne.n	80093d0 <_dtoa_r+0x4f8>
 800931e:	4b82      	ldr	r3, [pc, #520]	; (8009528 <_dtoa_r+0x650>)
 8009320:	2200      	movs	r2, #0
 8009322:	4640      	mov	r0, r8
 8009324:	4649      	mov	r1, r9
 8009326:	f7f6 ffb7 	bl	8000298 <__aeabi_dsub>
 800932a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800932e:	4680      	mov	r8, r0
 8009330:	4689      	mov	r9, r1
 8009332:	f7f7 fbf9 	bl	8000b28 <__aeabi_dcmpgt>
 8009336:	2800      	cmp	r0, #0
 8009338:	f040 8296 	bne.w	8009868 <_dtoa_r+0x990>
 800933c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009340:	4640      	mov	r0, r8
 8009342:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009346:	4649      	mov	r1, r9
 8009348:	f7f7 fbd0 	bl	8000aec <__aeabi_dcmplt>
 800934c:	2800      	cmp	r0, #0
 800934e:	f040 8289 	bne.w	8009864 <_dtoa_r+0x98c>
 8009352:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009356:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009358:	2b00      	cmp	r3, #0
 800935a:	f2c0 814e 	blt.w	80095fa <_dtoa_r+0x722>
 800935e:	f1bb 0f0e 	cmp.w	fp, #14
 8009362:	f300 814a 	bgt.w	80095fa <_dtoa_r+0x722>
 8009366:	4b6b      	ldr	r3, [pc, #428]	; (8009514 <_dtoa_r+0x63c>)
 8009368:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800936c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009372:	2b00      	cmp	r3, #0
 8009374:	f280 80dc 	bge.w	8009530 <_dtoa_r+0x658>
 8009378:	9b04      	ldr	r3, [sp, #16]
 800937a:	2b00      	cmp	r3, #0
 800937c:	f300 80d8 	bgt.w	8009530 <_dtoa_r+0x658>
 8009380:	f040 826f 	bne.w	8009862 <_dtoa_r+0x98a>
 8009384:	4b68      	ldr	r3, [pc, #416]	; (8009528 <_dtoa_r+0x650>)
 8009386:	2200      	movs	r2, #0
 8009388:	4640      	mov	r0, r8
 800938a:	4649      	mov	r1, r9
 800938c:	f7f7 f93c 	bl	8000608 <__aeabi_dmul>
 8009390:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009394:	f7f7 fbbe 	bl	8000b14 <__aeabi_dcmpge>
 8009398:	9e04      	ldr	r6, [sp, #16]
 800939a:	4637      	mov	r7, r6
 800939c:	2800      	cmp	r0, #0
 800939e:	f040 8245 	bne.w	800982c <_dtoa_r+0x954>
 80093a2:	9d00      	ldr	r5, [sp, #0]
 80093a4:	2331      	movs	r3, #49	; 0x31
 80093a6:	f805 3b01 	strb.w	r3, [r5], #1
 80093aa:	f10b 0b01 	add.w	fp, fp, #1
 80093ae:	e241      	b.n	8009834 <_dtoa_r+0x95c>
 80093b0:	07f2      	lsls	r2, r6, #31
 80093b2:	d505      	bpl.n	80093c0 <_dtoa_r+0x4e8>
 80093b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093b8:	f7f7 f926 	bl	8000608 <__aeabi_dmul>
 80093bc:	3501      	adds	r5, #1
 80093be:	2301      	movs	r3, #1
 80093c0:	1076      	asrs	r6, r6, #1
 80093c2:	3708      	adds	r7, #8
 80093c4:	e773      	b.n	80092ae <_dtoa_r+0x3d6>
 80093c6:	2502      	movs	r5, #2
 80093c8:	e775      	b.n	80092b6 <_dtoa_r+0x3de>
 80093ca:	9e04      	ldr	r6, [sp, #16]
 80093cc:	465f      	mov	r7, fp
 80093ce:	e792      	b.n	80092f6 <_dtoa_r+0x41e>
 80093d0:	9900      	ldr	r1, [sp, #0]
 80093d2:	4b50      	ldr	r3, [pc, #320]	; (8009514 <_dtoa_r+0x63c>)
 80093d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80093d8:	4431      	add	r1, r6
 80093da:	9102      	str	r1, [sp, #8]
 80093dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80093de:	eeb0 9a47 	vmov.f32	s18, s14
 80093e2:	eef0 9a67 	vmov.f32	s19, s15
 80093e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80093ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80093ee:	2900      	cmp	r1, #0
 80093f0:	d044      	beq.n	800947c <_dtoa_r+0x5a4>
 80093f2:	494e      	ldr	r1, [pc, #312]	; (800952c <_dtoa_r+0x654>)
 80093f4:	2000      	movs	r0, #0
 80093f6:	f7f7 fa31 	bl	800085c <__aeabi_ddiv>
 80093fa:	ec53 2b19 	vmov	r2, r3, d9
 80093fe:	f7f6 ff4b 	bl	8000298 <__aeabi_dsub>
 8009402:	9d00      	ldr	r5, [sp, #0]
 8009404:	ec41 0b19 	vmov	d9, r0, r1
 8009408:	4649      	mov	r1, r9
 800940a:	4640      	mov	r0, r8
 800940c:	f7f7 fbac 	bl	8000b68 <__aeabi_d2iz>
 8009410:	4606      	mov	r6, r0
 8009412:	f7f7 f88f 	bl	8000534 <__aeabi_i2d>
 8009416:	4602      	mov	r2, r0
 8009418:	460b      	mov	r3, r1
 800941a:	4640      	mov	r0, r8
 800941c:	4649      	mov	r1, r9
 800941e:	f7f6 ff3b 	bl	8000298 <__aeabi_dsub>
 8009422:	3630      	adds	r6, #48	; 0x30
 8009424:	f805 6b01 	strb.w	r6, [r5], #1
 8009428:	ec53 2b19 	vmov	r2, r3, d9
 800942c:	4680      	mov	r8, r0
 800942e:	4689      	mov	r9, r1
 8009430:	f7f7 fb5c 	bl	8000aec <__aeabi_dcmplt>
 8009434:	2800      	cmp	r0, #0
 8009436:	d164      	bne.n	8009502 <_dtoa_r+0x62a>
 8009438:	4642      	mov	r2, r8
 800943a:	464b      	mov	r3, r9
 800943c:	4937      	ldr	r1, [pc, #220]	; (800951c <_dtoa_r+0x644>)
 800943e:	2000      	movs	r0, #0
 8009440:	f7f6 ff2a 	bl	8000298 <__aeabi_dsub>
 8009444:	ec53 2b19 	vmov	r2, r3, d9
 8009448:	f7f7 fb50 	bl	8000aec <__aeabi_dcmplt>
 800944c:	2800      	cmp	r0, #0
 800944e:	f040 80b6 	bne.w	80095be <_dtoa_r+0x6e6>
 8009452:	9b02      	ldr	r3, [sp, #8]
 8009454:	429d      	cmp	r5, r3
 8009456:	f43f af7c 	beq.w	8009352 <_dtoa_r+0x47a>
 800945a:	4b31      	ldr	r3, [pc, #196]	; (8009520 <_dtoa_r+0x648>)
 800945c:	ec51 0b19 	vmov	r0, r1, d9
 8009460:	2200      	movs	r2, #0
 8009462:	f7f7 f8d1 	bl	8000608 <__aeabi_dmul>
 8009466:	4b2e      	ldr	r3, [pc, #184]	; (8009520 <_dtoa_r+0x648>)
 8009468:	ec41 0b19 	vmov	d9, r0, r1
 800946c:	2200      	movs	r2, #0
 800946e:	4640      	mov	r0, r8
 8009470:	4649      	mov	r1, r9
 8009472:	f7f7 f8c9 	bl	8000608 <__aeabi_dmul>
 8009476:	4680      	mov	r8, r0
 8009478:	4689      	mov	r9, r1
 800947a:	e7c5      	b.n	8009408 <_dtoa_r+0x530>
 800947c:	ec51 0b17 	vmov	r0, r1, d7
 8009480:	f7f7 f8c2 	bl	8000608 <__aeabi_dmul>
 8009484:	9b02      	ldr	r3, [sp, #8]
 8009486:	9d00      	ldr	r5, [sp, #0]
 8009488:	930f      	str	r3, [sp, #60]	; 0x3c
 800948a:	ec41 0b19 	vmov	d9, r0, r1
 800948e:	4649      	mov	r1, r9
 8009490:	4640      	mov	r0, r8
 8009492:	f7f7 fb69 	bl	8000b68 <__aeabi_d2iz>
 8009496:	4606      	mov	r6, r0
 8009498:	f7f7 f84c 	bl	8000534 <__aeabi_i2d>
 800949c:	3630      	adds	r6, #48	; 0x30
 800949e:	4602      	mov	r2, r0
 80094a0:	460b      	mov	r3, r1
 80094a2:	4640      	mov	r0, r8
 80094a4:	4649      	mov	r1, r9
 80094a6:	f7f6 fef7 	bl	8000298 <__aeabi_dsub>
 80094aa:	f805 6b01 	strb.w	r6, [r5], #1
 80094ae:	9b02      	ldr	r3, [sp, #8]
 80094b0:	429d      	cmp	r5, r3
 80094b2:	4680      	mov	r8, r0
 80094b4:	4689      	mov	r9, r1
 80094b6:	f04f 0200 	mov.w	r2, #0
 80094ba:	d124      	bne.n	8009506 <_dtoa_r+0x62e>
 80094bc:	4b1b      	ldr	r3, [pc, #108]	; (800952c <_dtoa_r+0x654>)
 80094be:	ec51 0b19 	vmov	r0, r1, d9
 80094c2:	f7f6 feeb 	bl	800029c <__adddf3>
 80094c6:	4602      	mov	r2, r0
 80094c8:	460b      	mov	r3, r1
 80094ca:	4640      	mov	r0, r8
 80094cc:	4649      	mov	r1, r9
 80094ce:	f7f7 fb2b 	bl	8000b28 <__aeabi_dcmpgt>
 80094d2:	2800      	cmp	r0, #0
 80094d4:	d173      	bne.n	80095be <_dtoa_r+0x6e6>
 80094d6:	ec53 2b19 	vmov	r2, r3, d9
 80094da:	4914      	ldr	r1, [pc, #80]	; (800952c <_dtoa_r+0x654>)
 80094dc:	2000      	movs	r0, #0
 80094de:	f7f6 fedb 	bl	8000298 <__aeabi_dsub>
 80094e2:	4602      	mov	r2, r0
 80094e4:	460b      	mov	r3, r1
 80094e6:	4640      	mov	r0, r8
 80094e8:	4649      	mov	r1, r9
 80094ea:	f7f7 faff 	bl	8000aec <__aeabi_dcmplt>
 80094ee:	2800      	cmp	r0, #0
 80094f0:	f43f af2f 	beq.w	8009352 <_dtoa_r+0x47a>
 80094f4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80094f6:	1e6b      	subs	r3, r5, #1
 80094f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80094fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80094fe:	2b30      	cmp	r3, #48	; 0x30
 8009500:	d0f8      	beq.n	80094f4 <_dtoa_r+0x61c>
 8009502:	46bb      	mov	fp, r7
 8009504:	e04a      	b.n	800959c <_dtoa_r+0x6c4>
 8009506:	4b06      	ldr	r3, [pc, #24]	; (8009520 <_dtoa_r+0x648>)
 8009508:	f7f7 f87e 	bl	8000608 <__aeabi_dmul>
 800950c:	4680      	mov	r8, r0
 800950e:	4689      	mov	r9, r1
 8009510:	e7bd      	b.n	800948e <_dtoa_r+0x5b6>
 8009512:	bf00      	nop
 8009514:	0800ad20 	.word	0x0800ad20
 8009518:	0800acf8 	.word	0x0800acf8
 800951c:	3ff00000 	.word	0x3ff00000
 8009520:	40240000 	.word	0x40240000
 8009524:	401c0000 	.word	0x401c0000
 8009528:	40140000 	.word	0x40140000
 800952c:	3fe00000 	.word	0x3fe00000
 8009530:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009534:	9d00      	ldr	r5, [sp, #0]
 8009536:	4642      	mov	r2, r8
 8009538:	464b      	mov	r3, r9
 800953a:	4630      	mov	r0, r6
 800953c:	4639      	mov	r1, r7
 800953e:	f7f7 f98d 	bl	800085c <__aeabi_ddiv>
 8009542:	f7f7 fb11 	bl	8000b68 <__aeabi_d2iz>
 8009546:	9001      	str	r0, [sp, #4]
 8009548:	f7f6 fff4 	bl	8000534 <__aeabi_i2d>
 800954c:	4642      	mov	r2, r8
 800954e:	464b      	mov	r3, r9
 8009550:	f7f7 f85a 	bl	8000608 <__aeabi_dmul>
 8009554:	4602      	mov	r2, r0
 8009556:	460b      	mov	r3, r1
 8009558:	4630      	mov	r0, r6
 800955a:	4639      	mov	r1, r7
 800955c:	f7f6 fe9c 	bl	8000298 <__aeabi_dsub>
 8009560:	9e01      	ldr	r6, [sp, #4]
 8009562:	9f04      	ldr	r7, [sp, #16]
 8009564:	3630      	adds	r6, #48	; 0x30
 8009566:	f805 6b01 	strb.w	r6, [r5], #1
 800956a:	9e00      	ldr	r6, [sp, #0]
 800956c:	1bae      	subs	r6, r5, r6
 800956e:	42b7      	cmp	r7, r6
 8009570:	4602      	mov	r2, r0
 8009572:	460b      	mov	r3, r1
 8009574:	d134      	bne.n	80095e0 <_dtoa_r+0x708>
 8009576:	f7f6 fe91 	bl	800029c <__adddf3>
 800957a:	4642      	mov	r2, r8
 800957c:	464b      	mov	r3, r9
 800957e:	4606      	mov	r6, r0
 8009580:	460f      	mov	r7, r1
 8009582:	f7f7 fad1 	bl	8000b28 <__aeabi_dcmpgt>
 8009586:	b9c8      	cbnz	r0, 80095bc <_dtoa_r+0x6e4>
 8009588:	4642      	mov	r2, r8
 800958a:	464b      	mov	r3, r9
 800958c:	4630      	mov	r0, r6
 800958e:	4639      	mov	r1, r7
 8009590:	f7f7 faa2 	bl	8000ad8 <__aeabi_dcmpeq>
 8009594:	b110      	cbz	r0, 800959c <_dtoa_r+0x6c4>
 8009596:	9b01      	ldr	r3, [sp, #4]
 8009598:	07db      	lsls	r3, r3, #31
 800959a:	d40f      	bmi.n	80095bc <_dtoa_r+0x6e4>
 800959c:	4651      	mov	r1, sl
 800959e:	4620      	mov	r0, r4
 80095a0:	f000 fbcc 	bl	8009d3c <_Bfree>
 80095a4:	2300      	movs	r3, #0
 80095a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80095a8:	702b      	strb	r3, [r5, #0]
 80095aa:	f10b 0301 	add.w	r3, fp, #1
 80095ae:	6013      	str	r3, [r2, #0]
 80095b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	f43f ace2 	beq.w	8008f7c <_dtoa_r+0xa4>
 80095b8:	601d      	str	r5, [r3, #0]
 80095ba:	e4df      	b.n	8008f7c <_dtoa_r+0xa4>
 80095bc:	465f      	mov	r7, fp
 80095be:	462b      	mov	r3, r5
 80095c0:	461d      	mov	r5, r3
 80095c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80095c6:	2a39      	cmp	r2, #57	; 0x39
 80095c8:	d106      	bne.n	80095d8 <_dtoa_r+0x700>
 80095ca:	9a00      	ldr	r2, [sp, #0]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d1f7      	bne.n	80095c0 <_dtoa_r+0x6e8>
 80095d0:	9900      	ldr	r1, [sp, #0]
 80095d2:	2230      	movs	r2, #48	; 0x30
 80095d4:	3701      	adds	r7, #1
 80095d6:	700a      	strb	r2, [r1, #0]
 80095d8:	781a      	ldrb	r2, [r3, #0]
 80095da:	3201      	adds	r2, #1
 80095dc:	701a      	strb	r2, [r3, #0]
 80095de:	e790      	b.n	8009502 <_dtoa_r+0x62a>
 80095e0:	4ba3      	ldr	r3, [pc, #652]	; (8009870 <_dtoa_r+0x998>)
 80095e2:	2200      	movs	r2, #0
 80095e4:	f7f7 f810 	bl	8000608 <__aeabi_dmul>
 80095e8:	2200      	movs	r2, #0
 80095ea:	2300      	movs	r3, #0
 80095ec:	4606      	mov	r6, r0
 80095ee:	460f      	mov	r7, r1
 80095f0:	f7f7 fa72 	bl	8000ad8 <__aeabi_dcmpeq>
 80095f4:	2800      	cmp	r0, #0
 80095f6:	d09e      	beq.n	8009536 <_dtoa_r+0x65e>
 80095f8:	e7d0      	b.n	800959c <_dtoa_r+0x6c4>
 80095fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095fc:	2a00      	cmp	r2, #0
 80095fe:	f000 80ca 	beq.w	8009796 <_dtoa_r+0x8be>
 8009602:	9a07      	ldr	r2, [sp, #28]
 8009604:	2a01      	cmp	r2, #1
 8009606:	f300 80ad 	bgt.w	8009764 <_dtoa_r+0x88c>
 800960a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800960c:	2a00      	cmp	r2, #0
 800960e:	f000 80a5 	beq.w	800975c <_dtoa_r+0x884>
 8009612:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009616:	9e08      	ldr	r6, [sp, #32]
 8009618:	9d05      	ldr	r5, [sp, #20]
 800961a:	9a05      	ldr	r2, [sp, #20]
 800961c:	441a      	add	r2, r3
 800961e:	9205      	str	r2, [sp, #20]
 8009620:	9a06      	ldr	r2, [sp, #24]
 8009622:	2101      	movs	r1, #1
 8009624:	441a      	add	r2, r3
 8009626:	4620      	mov	r0, r4
 8009628:	9206      	str	r2, [sp, #24]
 800962a:	f000 fc3d 	bl	8009ea8 <__i2b>
 800962e:	4607      	mov	r7, r0
 8009630:	b165      	cbz	r5, 800964c <_dtoa_r+0x774>
 8009632:	9b06      	ldr	r3, [sp, #24]
 8009634:	2b00      	cmp	r3, #0
 8009636:	dd09      	ble.n	800964c <_dtoa_r+0x774>
 8009638:	42ab      	cmp	r3, r5
 800963a:	9a05      	ldr	r2, [sp, #20]
 800963c:	bfa8      	it	ge
 800963e:	462b      	movge	r3, r5
 8009640:	1ad2      	subs	r2, r2, r3
 8009642:	9205      	str	r2, [sp, #20]
 8009644:	9a06      	ldr	r2, [sp, #24]
 8009646:	1aed      	subs	r5, r5, r3
 8009648:	1ad3      	subs	r3, r2, r3
 800964a:	9306      	str	r3, [sp, #24]
 800964c:	9b08      	ldr	r3, [sp, #32]
 800964e:	b1f3      	cbz	r3, 800968e <_dtoa_r+0x7b6>
 8009650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009652:	2b00      	cmp	r3, #0
 8009654:	f000 80a3 	beq.w	800979e <_dtoa_r+0x8c6>
 8009658:	2e00      	cmp	r6, #0
 800965a:	dd10      	ble.n	800967e <_dtoa_r+0x7a6>
 800965c:	4639      	mov	r1, r7
 800965e:	4632      	mov	r2, r6
 8009660:	4620      	mov	r0, r4
 8009662:	f000 fce1 	bl	800a028 <__pow5mult>
 8009666:	4652      	mov	r2, sl
 8009668:	4601      	mov	r1, r0
 800966a:	4607      	mov	r7, r0
 800966c:	4620      	mov	r0, r4
 800966e:	f000 fc31 	bl	8009ed4 <__multiply>
 8009672:	4651      	mov	r1, sl
 8009674:	4680      	mov	r8, r0
 8009676:	4620      	mov	r0, r4
 8009678:	f000 fb60 	bl	8009d3c <_Bfree>
 800967c:	46c2      	mov	sl, r8
 800967e:	9b08      	ldr	r3, [sp, #32]
 8009680:	1b9a      	subs	r2, r3, r6
 8009682:	d004      	beq.n	800968e <_dtoa_r+0x7b6>
 8009684:	4651      	mov	r1, sl
 8009686:	4620      	mov	r0, r4
 8009688:	f000 fcce 	bl	800a028 <__pow5mult>
 800968c:	4682      	mov	sl, r0
 800968e:	2101      	movs	r1, #1
 8009690:	4620      	mov	r0, r4
 8009692:	f000 fc09 	bl	8009ea8 <__i2b>
 8009696:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009698:	2b00      	cmp	r3, #0
 800969a:	4606      	mov	r6, r0
 800969c:	f340 8081 	ble.w	80097a2 <_dtoa_r+0x8ca>
 80096a0:	461a      	mov	r2, r3
 80096a2:	4601      	mov	r1, r0
 80096a4:	4620      	mov	r0, r4
 80096a6:	f000 fcbf 	bl	800a028 <__pow5mult>
 80096aa:	9b07      	ldr	r3, [sp, #28]
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	4606      	mov	r6, r0
 80096b0:	dd7a      	ble.n	80097a8 <_dtoa_r+0x8d0>
 80096b2:	f04f 0800 	mov.w	r8, #0
 80096b6:	6933      	ldr	r3, [r6, #16]
 80096b8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80096bc:	6918      	ldr	r0, [r3, #16]
 80096be:	f000 fba5 	bl	8009e0c <__hi0bits>
 80096c2:	f1c0 0020 	rsb	r0, r0, #32
 80096c6:	9b06      	ldr	r3, [sp, #24]
 80096c8:	4418      	add	r0, r3
 80096ca:	f010 001f 	ands.w	r0, r0, #31
 80096ce:	f000 8094 	beq.w	80097fa <_dtoa_r+0x922>
 80096d2:	f1c0 0320 	rsb	r3, r0, #32
 80096d6:	2b04      	cmp	r3, #4
 80096d8:	f340 8085 	ble.w	80097e6 <_dtoa_r+0x90e>
 80096dc:	9b05      	ldr	r3, [sp, #20]
 80096de:	f1c0 001c 	rsb	r0, r0, #28
 80096e2:	4403      	add	r3, r0
 80096e4:	9305      	str	r3, [sp, #20]
 80096e6:	9b06      	ldr	r3, [sp, #24]
 80096e8:	4403      	add	r3, r0
 80096ea:	4405      	add	r5, r0
 80096ec:	9306      	str	r3, [sp, #24]
 80096ee:	9b05      	ldr	r3, [sp, #20]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	dd05      	ble.n	8009700 <_dtoa_r+0x828>
 80096f4:	4651      	mov	r1, sl
 80096f6:	461a      	mov	r2, r3
 80096f8:	4620      	mov	r0, r4
 80096fa:	f000 fcef 	bl	800a0dc <__lshift>
 80096fe:	4682      	mov	sl, r0
 8009700:	9b06      	ldr	r3, [sp, #24]
 8009702:	2b00      	cmp	r3, #0
 8009704:	dd05      	ble.n	8009712 <_dtoa_r+0x83a>
 8009706:	4631      	mov	r1, r6
 8009708:	461a      	mov	r2, r3
 800970a:	4620      	mov	r0, r4
 800970c:	f000 fce6 	bl	800a0dc <__lshift>
 8009710:	4606      	mov	r6, r0
 8009712:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009714:	2b00      	cmp	r3, #0
 8009716:	d072      	beq.n	80097fe <_dtoa_r+0x926>
 8009718:	4631      	mov	r1, r6
 800971a:	4650      	mov	r0, sl
 800971c:	f000 fd4a 	bl	800a1b4 <__mcmp>
 8009720:	2800      	cmp	r0, #0
 8009722:	da6c      	bge.n	80097fe <_dtoa_r+0x926>
 8009724:	2300      	movs	r3, #0
 8009726:	4651      	mov	r1, sl
 8009728:	220a      	movs	r2, #10
 800972a:	4620      	mov	r0, r4
 800972c:	f000 fb28 	bl	8009d80 <__multadd>
 8009730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009732:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009736:	4682      	mov	sl, r0
 8009738:	2b00      	cmp	r3, #0
 800973a:	f000 81b0 	beq.w	8009a9e <_dtoa_r+0xbc6>
 800973e:	2300      	movs	r3, #0
 8009740:	4639      	mov	r1, r7
 8009742:	220a      	movs	r2, #10
 8009744:	4620      	mov	r0, r4
 8009746:	f000 fb1b 	bl	8009d80 <__multadd>
 800974a:	9b01      	ldr	r3, [sp, #4]
 800974c:	2b00      	cmp	r3, #0
 800974e:	4607      	mov	r7, r0
 8009750:	f300 8096 	bgt.w	8009880 <_dtoa_r+0x9a8>
 8009754:	9b07      	ldr	r3, [sp, #28]
 8009756:	2b02      	cmp	r3, #2
 8009758:	dc59      	bgt.n	800980e <_dtoa_r+0x936>
 800975a:	e091      	b.n	8009880 <_dtoa_r+0x9a8>
 800975c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800975e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009762:	e758      	b.n	8009616 <_dtoa_r+0x73e>
 8009764:	9b04      	ldr	r3, [sp, #16]
 8009766:	1e5e      	subs	r6, r3, #1
 8009768:	9b08      	ldr	r3, [sp, #32]
 800976a:	42b3      	cmp	r3, r6
 800976c:	bfbf      	itttt	lt
 800976e:	9b08      	ldrlt	r3, [sp, #32]
 8009770:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009772:	9608      	strlt	r6, [sp, #32]
 8009774:	1af3      	sublt	r3, r6, r3
 8009776:	bfb4      	ite	lt
 8009778:	18d2      	addlt	r2, r2, r3
 800977a:	1b9e      	subge	r6, r3, r6
 800977c:	9b04      	ldr	r3, [sp, #16]
 800977e:	bfbc      	itt	lt
 8009780:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009782:	2600      	movlt	r6, #0
 8009784:	2b00      	cmp	r3, #0
 8009786:	bfb7      	itett	lt
 8009788:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800978c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009790:	1a9d      	sublt	r5, r3, r2
 8009792:	2300      	movlt	r3, #0
 8009794:	e741      	b.n	800961a <_dtoa_r+0x742>
 8009796:	9e08      	ldr	r6, [sp, #32]
 8009798:	9d05      	ldr	r5, [sp, #20]
 800979a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800979c:	e748      	b.n	8009630 <_dtoa_r+0x758>
 800979e:	9a08      	ldr	r2, [sp, #32]
 80097a0:	e770      	b.n	8009684 <_dtoa_r+0x7ac>
 80097a2:	9b07      	ldr	r3, [sp, #28]
 80097a4:	2b01      	cmp	r3, #1
 80097a6:	dc19      	bgt.n	80097dc <_dtoa_r+0x904>
 80097a8:	9b02      	ldr	r3, [sp, #8]
 80097aa:	b9bb      	cbnz	r3, 80097dc <_dtoa_r+0x904>
 80097ac:	9b03      	ldr	r3, [sp, #12]
 80097ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097b2:	b99b      	cbnz	r3, 80097dc <_dtoa_r+0x904>
 80097b4:	9b03      	ldr	r3, [sp, #12]
 80097b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80097ba:	0d1b      	lsrs	r3, r3, #20
 80097bc:	051b      	lsls	r3, r3, #20
 80097be:	b183      	cbz	r3, 80097e2 <_dtoa_r+0x90a>
 80097c0:	9b05      	ldr	r3, [sp, #20]
 80097c2:	3301      	adds	r3, #1
 80097c4:	9305      	str	r3, [sp, #20]
 80097c6:	9b06      	ldr	r3, [sp, #24]
 80097c8:	3301      	adds	r3, #1
 80097ca:	9306      	str	r3, [sp, #24]
 80097cc:	f04f 0801 	mov.w	r8, #1
 80097d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	f47f af6f 	bne.w	80096b6 <_dtoa_r+0x7de>
 80097d8:	2001      	movs	r0, #1
 80097da:	e774      	b.n	80096c6 <_dtoa_r+0x7ee>
 80097dc:	f04f 0800 	mov.w	r8, #0
 80097e0:	e7f6      	b.n	80097d0 <_dtoa_r+0x8f8>
 80097e2:	4698      	mov	r8, r3
 80097e4:	e7f4      	b.n	80097d0 <_dtoa_r+0x8f8>
 80097e6:	d082      	beq.n	80096ee <_dtoa_r+0x816>
 80097e8:	9a05      	ldr	r2, [sp, #20]
 80097ea:	331c      	adds	r3, #28
 80097ec:	441a      	add	r2, r3
 80097ee:	9205      	str	r2, [sp, #20]
 80097f0:	9a06      	ldr	r2, [sp, #24]
 80097f2:	441a      	add	r2, r3
 80097f4:	441d      	add	r5, r3
 80097f6:	9206      	str	r2, [sp, #24]
 80097f8:	e779      	b.n	80096ee <_dtoa_r+0x816>
 80097fa:	4603      	mov	r3, r0
 80097fc:	e7f4      	b.n	80097e8 <_dtoa_r+0x910>
 80097fe:	9b04      	ldr	r3, [sp, #16]
 8009800:	2b00      	cmp	r3, #0
 8009802:	dc37      	bgt.n	8009874 <_dtoa_r+0x99c>
 8009804:	9b07      	ldr	r3, [sp, #28]
 8009806:	2b02      	cmp	r3, #2
 8009808:	dd34      	ble.n	8009874 <_dtoa_r+0x99c>
 800980a:	9b04      	ldr	r3, [sp, #16]
 800980c:	9301      	str	r3, [sp, #4]
 800980e:	9b01      	ldr	r3, [sp, #4]
 8009810:	b963      	cbnz	r3, 800982c <_dtoa_r+0x954>
 8009812:	4631      	mov	r1, r6
 8009814:	2205      	movs	r2, #5
 8009816:	4620      	mov	r0, r4
 8009818:	f000 fab2 	bl	8009d80 <__multadd>
 800981c:	4601      	mov	r1, r0
 800981e:	4606      	mov	r6, r0
 8009820:	4650      	mov	r0, sl
 8009822:	f000 fcc7 	bl	800a1b4 <__mcmp>
 8009826:	2800      	cmp	r0, #0
 8009828:	f73f adbb 	bgt.w	80093a2 <_dtoa_r+0x4ca>
 800982c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800982e:	9d00      	ldr	r5, [sp, #0]
 8009830:	ea6f 0b03 	mvn.w	fp, r3
 8009834:	f04f 0800 	mov.w	r8, #0
 8009838:	4631      	mov	r1, r6
 800983a:	4620      	mov	r0, r4
 800983c:	f000 fa7e 	bl	8009d3c <_Bfree>
 8009840:	2f00      	cmp	r7, #0
 8009842:	f43f aeab 	beq.w	800959c <_dtoa_r+0x6c4>
 8009846:	f1b8 0f00 	cmp.w	r8, #0
 800984a:	d005      	beq.n	8009858 <_dtoa_r+0x980>
 800984c:	45b8      	cmp	r8, r7
 800984e:	d003      	beq.n	8009858 <_dtoa_r+0x980>
 8009850:	4641      	mov	r1, r8
 8009852:	4620      	mov	r0, r4
 8009854:	f000 fa72 	bl	8009d3c <_Bfree>
 8009858:	4639      	mov	r1, r7
 800985a:	4620      	mov	r0, r4
 800985c:	f000 fa6e 	bl	8009d3c <_Bfree>
 8009860:	e69c      	b.n	800959c <_dtoa_r+0x6c4>
 8009862:	2600      	movs	r6, #0
 8009864:	4637      	mov	r7, r6
 8009866:	e7e1      	b.n	800982c <_dtoa_r+0x954>
 8009868:	46bb      	mov	fp, r7
 800986a:	4637      	mov	r7, r6
 800986c:	e599      	b.n	80093a2 <_dtoa_r+0x4ca>
 800986e:	bf00      	nop
 8009870:	40240000 	.word	0x40240000
 8009874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009876:	2b00      	cmp	r3, #0
 8009878:	f000 80c8 	beq.w	8009a0c <_dtoa_r+0xb34>
 800987c:	9b04      	ldr	r3, [sp, #16]
 800987e:	9301      	str	r3, [sp, #4]
 8009880:	2d00      	cmp	r5, #0
 8009882:	dd05      	ble.n	8009890 <_dtoa_r+0x9b8>
 8009884:	4639      	mov	r1, r7
 8009886:	462a      	mov	r2, r5
 8009888:	4620      	mov	r0, r4
 800988a:	f000 fc27 	bl	800a0dc <__lshift>
 800988e:	4607      	mov	r7, r0
 8009890:	f1b8 0f00 	cmp.w	r8, #0
 8009894:	d05b      	beq.n	800994e <_dtoa_r+0xa76>
 8009896:	6879      	ldr	r1, [r7, #4]
 8009898:	4620      	mov	r0, r4
 800989a:	f000 fa0f 	bl	8009cbc <_Balloc>
 800989e:	4605      	mov	r5, r0
 80098a0:	b928      	cbnz	r0, 80098ae <_dtoa_r+0x9d6>
 80098a2:	4b83      	ldr	r3, [pc, #524]	; (8009ab0 <_dtoa_r+0xbd8>)
 80098a4:	4602      	mov	r2, r0
 80098a6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80098aa:	f7ff bb2e 	b.w	8008f0a <_dtoa_r+0x32>
 80098ae:	693a      	ldr	r2, [r7, #16]
 80098b0:	3202      	adds	r2, #2
 80098b2:	0092      	lsls	r2, r2, #2
 80098b4:	f107 010c 	add.w	r1, r7, #12
 80098b8:	300c      	adds	r0, #12
 80098ba:	f001 f813 	bl	800a8e4 <memcpy>
 80098be:	2201      	movs	r2, #1
 80098c0:	4629      	mov	r1, r5
 80098c2:	4620      	mov	r0, r4
 80098c4:	f000 fc0a 	bl	800a0dc <__lshift>
 80098c8:	9b00      	ldr	r3, [sp, #0]
 80098ca:	3301      	adds	r3, #1
 80098cc:	9304      	str	r3, [sp, #16]
 80098ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80098d2:	4413      	add	r3, r2
 80098d4:	9308      	str	r3, [sp, #32]
 80098d6:	9b02      	ldr	r3, [sp, #8]
 80098d8:	f003 0301 	and.w	r3, r3, #1
 80098dc:	46b8      	mov	r8, r7
 80098de:	9306      	str	r3, [sp, #24]
 80098e0:	4607      	mov	r7, r0
 80098e2:	9b04      	ldr	r3, [sp, #16]
 80098e4:	4631      	mov	r1, r6
 80098e6:	3b01      	subs	r3, #1
 80098e8:	4650      	mov	r0, sl
 80098ea:	9301      	str	r3, [sp, #4]
 80098ec:	f7ff fa69 	bl	8008dc2 <quorem>
 80098f0:	4641      	mov	r1, r8
 80098f2:	9002      	str	r0, [sp, #8]
 80098f4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80098f8:	4650      	mov	r0, sl
 80098fa:	f000 fc5b 	bl	800a1b4 <__mcmp>
 80098fe:	463a      	mov	r2, r7
 8009900:	9005      	str	r0, [sp, #20]
 8009902:	4631      	mov	r1, r6
 8009904:	4620      	mov	r0, r4
 8009906:	f000 fc71 	bl	800a1ec <__mdiff>
 800990a:	68c2      	ldr	r2, [r0, #12]
 800990c:	4605      	mov	r5, r0
 800990e:	bb02      	cbnz	r2, 8009952 <_dtoa_r+0xa7a>
 8009910:	4601      	mov	r1, r0
 8009912:	4650      	mov	r0, sl
 8009914:	f000 fc4e 	bl	800a1b4 <__mcmp>
 8009918:	4602      	mov	r2, r0
 800991a:	4629      	mov	r1, r5
 800991c:	4620      	mov	r0, r4
 800991e:	9209      	str	r2, [sp, #36]	; 0x24
 8009920:	f000 fa0c 	bl	8009d3c <_Bfree>
 8009924:	9b07      	ldr	r3, [sp, #28]
 8009926:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009928:	9d04      	ldr	r5, [sp, #16]
 800992a:	ea43 0102 	orr.w	r1, r3, r2
 800992e:	9b06      	ldr	r3, [sp, #24]
 8009930:	4319      	orrs	r1, r3
 8009932:	d110      	bne.n	8009956 <_dtoa_r+0xa7e>
 8009934:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009938:	d029      	beq.n	800998e <_dtoa_r+0xab6>
 800993a:	9b05      	ldr	r3, [sp, #20]
 800993c:	2b00      	cmp	r3, #0
 800993e:	dd02      	ble.n	8009946 <_dtoa_r+0xa6e>
 8009940:	9b02      	ldr	r3, [sp, #8]
 8009942:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009946:	9b01      	ldr	r3, [sp, #4]
 8009948:	f883 9000 	strb.w	r9, [r3]
 800994c:	e774      	b.n	8009838 <_dtoa_r+0x960>
 800994e:	4638      	mov	r0, r7
 8009950:	e7ba      	b.n	80098c8 <_dtoa_r+0x9f0>
 8009952:	2201      	movs	r2, #1
 8009954:	e7e1      	b.n	800991a <_dtoa_r+0xa42>
 8009956:	9b05      	ldr	r3, [sp, #20]
 8009958:	2b00      	cmp	r3, #0
 800995a:	db04      	blt.n	8009966 <_dtoa_r+0xa8e>
 800995c:	9907      	ldr	r1, [sp, #28]
 800995e:	430b      	orrs	r3, r1
 8009960:	9906      	ldr	r1, [sp, #24]
 8009962:	430b      	orrs	r3, r1
 8009964:	d120      	bne.n	80099a8 <_dtoa_r+0xad0>
 8009966:	2a00      	cmp	r2, #0
 8009968:	dded      	ble.n	8009946 <_dtoa_r+0xa6e>
 800996a:	4651      	mov	r1, sl
 800996c:	2201      	movs	r2, #1
 800996e:	4620      	mov	r0, r4
 8009970:	f000 fbb4 	bl	800a0dc <__lshift>
 8009974:	4631      	mov	r1, r6
 8009976:	4682      	mov	sl, r0
 8009978:	f000 fc1c 	bl	800a1b4 <__mcmp>
 800997c:	2800      	cmp	r0, #0
 800997e:	dc03      	bgt.n	8009988 <_dtoa_r+0xab0>
 8009980:	d1e1      	bne.n	8009946 <_dtoa_r+0xa6e>
 8009982:	f019 0f01 	tst.w	r9, #1
 8009986:	d0de      	beq.n	8009946 <_dtoa_r+0xa6e>
 8009988:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800998c:	d1d8      	bne.n	8009940 <_dtoa_r+0xa68>
 800998e:	9a01      	ldr	r2, [sp, #4]
 8009990:	2339      	movs	r3, #57	; 0x39
 8009992:	7013      	strb	r3, [r2, #0]
 8009994:	462b      	mov	r3, r5
 8009996:	461d      	mov	r5, r3
 8009998:	3b01      	subs	r3, #1
 800999a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800999e:	2a39      	cmp	r2, #57	; 0x39
 80099a0:	d06c      	beq.n	8009a7c <_dtoa_r+0xba4>
 80099a2:	3201      	adds	r2, #1
 80099a4:	701a      	strb	r2, [r3, #0]
 80099a6:	e747      	b.n	8009838 <_dtoa_r+0x960>
 80099a8:	2a00      	cmp	r2, #0
 80099aa:	dd07      	ble.n	80099bc <_dtoa_r+0xae4>
 80099ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80099b0:	d0ed      	beq.n	800998e <_dtoa_r+0xab6>
 80099b2:	9a01      	ldr	r2, [sp, #4]
 80099b4:	f109 0301 	add.w	r3, r9, #1
 80099b8:	7013      	strb	r3, [r2, #0]
 80099ba:	e73d      	b.n	8009838 <_dtoa_r+0x960>
 80099bc:	9b04      	ldr	r3, [sp, #16]
 80099be:	9a08      	ldr	r2, [sp, #32]
 80099c0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d043      	beq.n	8009a50 <_dtoa_r+0xb78>
 80099c8:	4651      	mov	r1, sl
 80099ca:	2300      	movs	r3, #0
 80099cc:	220a      	movs	r2, #10
 80099ce:	4620      	mov	r0, r4
 80099d0:	f000 f9d6 	bl	8009d80 <__multadd>
 80099d4:	45b8      	cmp	r8, r7
 80099d6:	4682      	mov	sl, r0
 80099d8:	f04f 0300 	mov.w	r3, #0
 80099dc:	f04f 020a 	mov.w	r2, #10
 80099e0:	4641      	mov	r1, r8
 80099e2:	4620      	mov	r0, r4
 80099e4:	d107      	bne.n	80099f6 <_dtoa_r+0xb1e>
 80099e6:	f000 f9cb 	bl	8009d80 <__multadd>
 80099ea:	4680      	mov	r8, r0
 80099ec:	4607      	mov	r7, r0
 80099ee:	9b04      	ldr	r3, [sp, #16]
 80099f0:	3301      	adds	r3, #1
 80099f2:	9304      	str	r3, [sp, #16]
 80099f4:	e775      	b.n	80098e2 <_dtoa_r+0xa0a>
 80099f6:	f000 f9c3 	bl	8009d80 <__multadd>
 80099fa:	4639      	mov	r1, r7
 80099fc:	4680      	mov	r8, r0
 80099fe:	2300      	movs	r3, #0
 8009a00:	220a      	movs	r2, #10
 8009a02:	4620      	mov	r0, r4
 8009a04:	f000 f9bc 	bl	8009d80 <__multadd>
 8009a08:	4607      	mov	r7, r0
 8009a0a:	e7f0      	b.n	80099ee <_dtoa_r+0xb16>
 8009a0c:	9b04      	ldr	r3, [sp, #16]
 8009a0e:	9301      	str	r3, [sp, #4]
 8009a10:	9d00      	ldr	r5, [sp, #0]
 8009a12:	4631      	mov	r1, r6
 8009a14:	4650      	mov	r0, sl
 8009a16:	f7ff f9d4 	bl	8008dc2 <quorem>
 8009a1a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009a1e:	9b00      	ldr	r3, [sp, #0]
 8009a20:	f805 9b01 	strb.w	r9, [r5], #1
 8009a24:	1aea      	subs	r2, r5, r3
 8009a26:	9b01      	ldr	r3, [sp, #4]
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	dd07      	ble.n	8009a3c <_dtoa_r+0xb64>
 8009a2c:	4651      	mov	r1, sl
 8009a2e:	2300      	movs	r3, #0
 8009a30:	220a      	movs	r2, #10
 8009a32:	4620      	mov	r0, r4
 8009a34:	f000 f9a4 	bl	8009d80 <__multadd>
 8009a38:	4682      	mov	sl, r0
 8009a3a:	e7ea      	b.n	8009a12 <_dtoa_r+0xb3a>
 8009a3c:	9b01      	ldr	r3, [sp, #4]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	bfc8      	it	gt
 8009a42:	461d      	movgt	r5, r3
 8009a44:	9b00      	ldr	r3, [sp, #0]
 8009a46:	bfd8      	it	le
 8009a48:	2501      	movle	r5, #1
 8009a4a:	441d      	add	r5, r3
 8009a4c:	f04f 0800 	mov.w	r8, #0
 8009a50:	4651      	mov	r1, sl
 8009a52:	2201      	movs	r2, #1
 8009a54:	4620      	mov	r0, r4
 8009a56:	f000 fb41 	bl	800a0dc <__lshift>
 8009a5a:	4631      	mov	r1, r6
 8009a5c:	4682      	mov	sl, r0
 8009a5e:	f000 fba9 	bl	800a1b4 <__mcmp>
 8009a62:	2800      	cmp	r0, #0
 8009a64:	dc96      	bgt.n	8009994 <_dtoa_r+0xabc>
 8009a66:	d102      	bne.n	8009a6e <_dtoa_r+0xb96>
 8009a68:	f019 0f01 	tst.w	r9, #1
 8009a6c:	d192      	bne.n	8009994 <_dtoa_r+0xabc>
 8009a6e:	462b      	mov	r3, r5
 8009a70:	461d      	mov	r5, r3
 8009a72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a76:	2a30      	cmp	r2, #48	; 0x30
 8009a78:	d0fa      	beq.n	8009a70 <_dtoa_r+0xb98>
 8009a7a:	e6dd      	b.n	8009838 <_dtoa_r+0x960>
 8009a7c:	9a00      	ldr	r2, [sp, #0]
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	d189      	bne.n	8009996 <_dtoa_r+0xabe>
 8009a82:	f10b 0b01 	add.w	fp, fp, #1
 8009a86:	2331      	movs	r3, #49	; 0x31
 8009a88:	e796      	b.n	80099b8 <_dtoa_r+0xae0>
 8009a8a:	4b0a      	ldr	r3, [pc, #40]	; (8009ab4 <_dtoa_r+0xbdc>)
 8009a8c:	f7ff ba99 	b.w	8008fc2 <_dtoa_r+0xea>
 8009a90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	f47f aa6d 	bne.w	8008f72 <_dtoa_r+0x9a>
 8009a98:	4b07      	ldr	r3, [pc, #28]	; (8009ab8 <_dtoa_r+0xbe0>)
 8009a9a:	f7ff ba92 	b.w	8008fc2 <_dtoa_r+0xea>
 8009a9e:	9b01      	ldr	r3, [sp, #4]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	dcb5      	bgt.n	8009a10 <_dtoa_r+0xb38>
 8009aa4:	9b07      	ldr	r3, [sp, #28]
 8009aa6:	2b02      	cmp	r3, #2
 8009aa8:	f73f aeb1 	bgt.w	800980e <_dtoa_r+0x936>
 8009aac:	e7b0      	b.n	8009a10 <_dtoa_r+0xb38>
 8009aae:	bf00      	nop
 8009ab0:	0800ac8c 	.word	0x0800ac8c
 8009ab4:	0800abec 	.word	0x0800abec
 8009ab8:	0800ac10 	.word	0x0800ac10

08009abc <_free_r>:
 8009abc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009abe:	2900      	cmp	r1, #0
 8009ac0:	d044      	beq.n	8009b4c <_free_r+0x90>
 8009ac2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ac6:	9001      	str	r0, [sp, #4]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	f1a1 0404 	sub.w	r4, r1, #4
 8009ace:	bfb8      	it	lt
 8009ad0:	18e4      	addlt	r4, r4, r3
 8009ad2:	f000 f8e7 	bl	8009ca4 <__malloc_lock>
 8009ad6:	4a1e      	ldr	r2, [pc, #120]	; (8009b50 <_free_r+0x94>)
 8009ad8:	9801      	ldr	r0, [sp, #4]
 8009ada:	6813      	ldr	r3, [r2, #0]
 8009adc:	b933      	cbnz	r3, 8009aec <_free_r+0x30>
 8009ade:	6063      	str	r3, [r4, #4]
 8009ae0:	6014      	str	r4, [r2, #0]
 8009ae2:	b003      	add	sp, #12
 8009ae4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ae8:	f000 b8e2 	b.w	8009cb0 <__malloc_unlock>
 8009aec:	42a3      	cmp	r3, r4
 8009aee:	d908      	bls.n	8009b02 <_free_r+0x46>
 8009af0:	6825      	ldr	r5, [r4, #0]
 8009af2:	1961      	adds	r1, r4, r5
 8009af4:	428b      	cmp	r3, r1
 8009af6:	bf01      	itttt	eq
 8009af8:	6819      	ldreq	r1, [r3, #0]
 8009afa:	685b      	ldreq	r3, [r3, #4]
 8009afc:	1949      	addeq	r1, r1, r5
 8009afe:	6021      	streq	r1, [r4, #0]
 8009b00:	e7ed      	b.n	8009ade <_free_r+0x22>
 8009b02:	461a      	mov	r2, r3
 8009b04:	685b      	ldr	r3, [r3, #4]
 8009b06:	b10b      	cbz	r3, 8009b0c <_free_r+0x50>
 8009b08:	42a3      	cmp	r3, r4
 8009b0a:	d9fa      	bls.n	8009b02 <_free_r+0x46>
 8009b0c:	6811      	ldr	r1, [r2, #0]
 8009b0e:	1855      	adds	r5, r2, r1
 8009b10:	42a5      	cmp	r5, r4
 8009b12:	d10b      	bne.n	8009b2c <_free_r+0x70>
 8009b14:	6824      	ldr	r4, [r4, #0]
 8009b16:	4421      	add	r1, r4
 8009b18:	1854      	adds	r4, r2, r1
 8009b1a:	42a3      	cmp	r3, r4
 8009b1c:	6011      	str	r1, [r2, #0]
 8009b1e:	d1e0      	bne.n	8009ae2 <_free_r+0x26>
 8009b20:	681c      	ldr	r4, [r3, #0]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	6053      	str	r3, [r2, #4]
 8009b26:	440c      	add	r4, r1
 8009b28:	6014      	str	r4, [r2, #0]
 8009b2a:	e7da      	b.n	8009ae2 <_free_r+0x26>
 8009b2c:	d902      	bls.n	8009b34 <_free_r+0x78>
 8009b2e:	230c      	movs	r3, #12
 8009b30:	6003      	str	r3, [r0, #0]
 8009b32:	e7d6      	b.n	8009ae2 <_free_r+0x26>
 8009b34:	6825      	ldr	r5, [r4, #0]
 8009b36:	1961      	adds	r1, r4, r5
 8009b38:	428b      	cmp	r3, r1
 8009b3a:	bf04      	itt	eq
 8009b3c:	6819      	ldreq	r1, [r3, #0]
 8009b3e:	685b      	ldreq	r3, [r3, #4]
 8009b40:	6063      	str	r3, [r4, #4]
 8009b42:	bf04      	itt	eq
 8009b44:	1949      	addeq	r1, r1, r5
 8009b46:	6021      	streq	r1, [r4, #0]
 8009b48:	6054      	str	r4, [r2, #4]
 8009b4a:	e7ca      	b.n	8009ae2 <_free_r+0x26>
 8009b4c:	b003      	add	sp, #12
 8009b4e:	bd30      	pop	{r4, r5, pc}
 8009b50:	200005dc 	.word	0x200005dc

08009b54 <malloc>:
 8009b54:	4b02      	ldr	r3, [pc, #8]	; (8009b60 <malloc+0xc>)
 8009b56:	4601      	mov	r1, r0
 8009b58:	6818      	ldr	r0, [r3, #0]
 8009b5a:	f000 b823 	b.w	8009ba4 <_malloc_r>
 8009b5e:	bf00      	nop
 8009b60:	20000064 	.word	0x20000064

08009b64 <sbrk_aligned>:
 8009b64:	b570      	push	{r4, r5, r6, lr}
 8009b66:	4e0e      	ldr	r6, [pc, #56]	; (8009ba0 <sbrk_aligned+0x3c>)
 8009b68:	460c      	mov	r4, r1
 8009b6a:	6831      	ldr	r1, [r6, #0]
 8009b6c:	4605      	mov	r5, r0
 8009b6e:	b911      	cbnz	r1, 8009b76 <sbrk_aligned+0x12>
 8009b70:	f000 fea8 	bl	800a8c4 <_sbrk_r>
 8009b74:	6030      	str	r0, [r6, #0]
 8009b76:	4621      	mov	r1, r4
 8009b78:	4628      	mov	r0, r5
 8009b7a:	f000 fea3 	bl	800a8c4 <_sbrk_r>
 8009b7e:	1c43      	adds	r3, r0, #1
 8009b80:	d00a      	beq.n	8009b98 <sbrk_aligned+0x34>
 8009b82:	1cc4      	adds	r4, r0, #3
 8009b84:	f024 0403 	bic.w	r4, r4, #3
 8009b88:	42a0      	cmp	r0, r4
 8009b8a:	d007      	beq.n	8009b9c <sbrk_aligned+0x38>
 8009b8c:	1a21      	subs	r1, r4, r0
 8009b8e:	4628      	mov	r0, r5
 8009b90:	f000 fe98 	bl	800a8c4 <_sbrk_r>
 8009b94:	3001      	adds	r0, #1
 8009b96:	d101      	bne.n	8009b9c <sbrk_aligned+0x38>
 8009b98:	f04f 34ff 	mov.w	r4, #4294967295
 8009b9c:	4620      	mov	r0, r4
 8009b9e:	bd70      	pop	{r4, r5, r6, pc}
 8009ba0:	200005e0 	.word	0x200005e0

08009ba4 <_malloc_r>:
 8009ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ba8:	1ccd      	adds	r5, r1, #3
 8009baa:	f025 0503 	bic.w	r5, r5, #3
 8009bae:	3508      	adds	r5, #8
 8009bb0:	2d0c      	cmp	r5, #12
 8009bb2:	bf38      	it	cc
 8009bb4:	250c      	movcc	r5, #12
 8009bb6:	2d00      	cmp	r5, #0
 8009bb8:	4607      	mov	r7, r0
 8009bba:	db01      	blt.n	8009bc0 <_malloc_r+0x1c>
 8009bbc:	42a9      	cmp	r1, r5
 8009bbe:	d905      	bls.n	8009bcc <_malloc_r+0x28>
 8009bc0:	230c      	movs	r3, #12
 8009bc2:	603b      	str	r3, [r7, #0]
 8009bc4:	2600      	movs	r6, #0
 8009bc6:	4630      	mov	r0, r6
 8009bc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bcc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009ca0 <_malloc_r+0xfc>
 8009bd0:	f000 f868 	bl	8009ca4 <__malloc_lock>
 8009bd4:	f8d8 3000 	ldr.w	r3, [r8]
 8009bd8:	461c      	mov	r4, r3
 8009bda:	bb5c      	cbnz	r4, 8009c34 <_malloc_r+0x90>
 8009bdc:	4629      	mov	r1, r5
 8009bde:	4638      	mov	r0, r7
 8009be0:	f7ff ffc0 	bl	8009b64 <sbrk_aligned>
 8009be4:	1c43      	adds	r3, r0, #1
 8009be6:	4604      	mov	r4, r0
 8009be8:	d155      	bne.n	8009c96 <_malloc_r+0xf2>
 8009bea:	f8d8 4000 	ldr.w	r4, [r8]
 8009bee:	4626      	mov	r6, r4
 8009bf0:	2e00      	cmp	r6, #0
 8009bf2:	d145      	bne.n	8009c80 <_malloc_r+0xdc>
 8009bf4:	2c00      	cmp	r4, #0
 8009bf6:	d048      	beq.n	8009c8a <_malloc_r+0xe6>
 8009bf8:	6823      	ldr	r3, [r4, #0]
 8009bfa:	4631      	mov	r1, r6
 8009bfc:	4638      	mov	r0, r7
 8009bfe:	eb04 0903 	add.w	r9, r4, r3
 8009c02:	f000 fe5f 	bl	800a8c4 <_sbrk_r>
 8009c06:	4581      	cmp	r9, r0
 8009c08:	d13f      	bne.n	8009c8a <_malloc_r+0xe6>
 8009c0a:	6821      	ldr	r1, [r4, #0]
 8009c0c:	1a6d      	subs	r5, r5, r1
 8009c0e:	4629      	mov	r1, r5
 8009c10:	4638      	mov	r0, r7
 8009c12:	f7ff ffa7 	bl	8009b64 <sbrk_aligned>
 8009c16:	3001      	adds	r0, #1
 8009c18:	d037      	beq.n	8009c8a <_malloc_r+0xe6>
 8009c1a:	6823      	ldr	r3, [r4, #0]
 8009c1c:	442b      	add	r3, r5
 8009c1e:	6023      	str	r3, [r4, #0]
 8009c20:	f8d8 3000 	ldr.w	r3, [r8]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d038      	beq.n	8009c9a <_malloc_r+0xf6>
 8009c28:	685a      	ldr	r2, [r3, #4]
 8009c2a:	42a2      	cmp	r2, r4
 8009c2c:	d12b      	bne.n	8009c86 <_malloc_r+0xe2>
 8009c2e:	2200      	movs	r2, #0
 8009c30:	605a      	str	r2, [r3, #4]
 8009c32:	e00f      	b.n	8009c54 <_malloc_r+0xb0>
 8009c34:	6822      	ldr	r2, [r4, #0]
 8009c36:	1b52      	subs	r2, r2, r5
 8009c38:	d41f      	bmi.n	8009c7a <_malloc_r+0xd6>
 8009c3a:	2a0b      	cmp	r2, #11
 8009c3c:	d917      	bls.n	8009c6e <_malloc_r+0xca>
 8009c3e:	1961      	adds	r1, r4, r5
 8009c40:	42a3      	cmp	r3, r4
 8009c42:	6025      	str	r5, [r4, #0]
 8009c44:	bf18      	it	ne
 8009c46:	6059      	strne	r1, [r3, #4]
 8009c48:	6863      	ldr	r3, [r4, #4]
 8009c4a:	bf08      	it	eq
 8009c4c:	f8c8 1000 	streq.w	r1, [r8]
 8009c50:	5162      	str	r2, [r4, r5]
 8009c52:	604b      	str	r3, [r1, #4]
 8009c54:	4638      	mov	r0, r7
 8009c56:	f104 060b 	add.w	r6, r4, #11
 8009c5a:	f000 f829 	bl	8009cb0 <__malloc_unlock>
 8009c5e:	f026 0607 	bic.w	r6, r6, #7
 8009c62:	1d23      	adds	r3, r4, #4
 8009c64:	1af2      	subs	r2, r6, r3
 8009c66:	d0ae      	beq.n	8009bc6 <_malloc_r+0x22>
 8009c68:	1b9b      	subs	r3, r3, r6
 8009c6a:	50a3      	str	r3, [r4, r2]
 8009c6c:	e7ab      	b.n	8009bc6 <_malloc_r+0x22>
 8009c6e:	42a3      	cmp	r3, r4
 8009c70:	6862      	ldr	r2, [r4, #4]
 8009c72:	d1dd      	bne.n	8009c30 <_malloc_r+0x8c>
 8009c74:	f8c8 2000 	str.w	r2, [r8]
 8009c78:	e7ec      	b.n	8009c54 <_malloc_r+0xb0>
 8009c7a:	4623      	mov	r3, r4
 8009c7c:	6864      	ldr	r4, [r4, #4]
 8009c7e:	e7ac      	b.n	8009bda <_malloc_r+0x36>
 8009c80:	4634      	mov	r4, r6
 8009c82:	6876      	ldr	r6, [r6, #4]
 8009c84:	e7b4      	b.n	8009bf0 <_malloc_r+0x4c>
 8009c86:	4613      	mov	r3, r2
 8009c88:	e7cc      	b.n	8009c24 <_malloc_r+0x80>
 8009c8a:	230c      	movs	r3, #12
 8009c8c:	603b      	str	r3, [r7, #0]
 8009c8e:	4638      	mov	r0, r7
 8009c90:	f000 f80e 	bl	8009cb0 <__malloc_unlock>
 8009c94:	e797      	b.n	8009bc6 <_malloc_r+0x22>
 8009c96:	6025      	str	r5, [r4, #0]
 8009c98:	e7dc      	b.n	8009c54 <_malloc_r+0xb0>
 8009c9a:	605b      	str	r3, [r3, #4]
 8009c9c:	deff      	udf	#255	; 0xff
 8009c9e:	bf00      	nop
 8009ca0:	200005dc 	.word	0x200005dc

08009ca4 <__malloc_lock>:
 8009ca4:	4801      	ldr	r0, [pc, #4]	; (8009cac <__malloc_lock+0x8>)
 8009ca6:	f7ff b88a 	b.w	8008dbe <__retarget_lock_acquire_recursive>
 8009caa:	bf00      	nop
 8009cac:	200005d8 	.word	0x200005d8

08009cb0 <__malloc_unlock>:
 8009cb0:	4801      	ldr	r0, [pc, #4]	; (8009cb8 <__malloc_unlock+0x8>)
 8009cb2:	f7ff b885 	b.w	8008dc0 <__retarget_lock_release_recursive>
 8009cb6:	bf00      	nop
 8009cb8:	200005d8 	.word	0x200005d8

08009cbc <_Balloc>:
 8009cbc:	b570      	push	{r4, r5, r6, lr}
 8009cbe:	69c6      	ldr	r6, [r0, #28]
 8009cc0:	4604      	mov	r4, r0
 8009cc2:	460d      	mov	r5, r1
 8009cc4:	b976      	cbnz	r6, 8009ce4 <_Balloc+0x28>
 8009cc6:	2010      	movs	r0, #16
 8009cc8:	f7ff ff44 	bl	8009b54 <malloc>
 8009ccc:	4602      	mov	r2, r0
 8009cce:	61e0      	str	r0, [r4, #28]
 8009cd0:	b920      	cbnz	r0, 8009cdc <_Balloc+0x20>
 8009cd2:	4b18      	ldr	r3, [pc, #96]	; (8009d34 <_Balloc+0x78>)
 8009cd4:	4818      	ldr	r0, [pc, #96]	; (8009d38 <_Balloc+0x7c>)
 8009cd6:	216b      	movs	r1, #107	; 0x6b
 8009cd8:	f000 fe12 	bl	800a900 <__assert_func>
 8009cdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ce0:	6006      	str	r6, [r0, #0]
 8009ce2:	60c6      	str	r6, [r0, #12]
 8009ce4:	69e6      	ldr	r6, [r4, #28]
 8009ce6:	68f3      	ldr	r3, [r6, #12]
 8009ce8:	b183      	cbz	r3, 8009d0c <_Balloc+0x50>
 8009cea:	69e3      	ldr	r3, [r4, #28]
 8009cec:	68db      	ldr	r3, [r3, #12]
 8009cee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009cf2:	b9b8      	cbnz	r0, 8009d24 <_Balloc+0x68>
 8009cf4:	2101      	movs	r1, #1
 8009cf6:	fa01 f605 	lsl.w	r6, r1, r5
 8009cfa:	1d72      	adds	r2, r6, #5
 8009cfc:	0092      	lsls	r2, r2, #2
 8009cfe:	4620      	mov	r0, r4
 8009d00:	f000 fe1c 	bl	800a93c <_calloc_r>
 8009d04:	b160      	cbz	r0, 8009d20 <_Balloc+0x64>
 8009d06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009d0a:	e00e      	b.n	8009d2a <_Balloc+0x6e>
 8009d0c:	2221      	movs	r2, #33	; 0x21
 8009d0e:	2104      	movs	r1, #4
 8009d10:	4620      	mov	r0, r4
 8009d12:	f000 fe13 	bl	800a93c <_calloc_r>
 8009d16:	69e3      	ldr	r3, [r4, #28]
 8009d18:	60f0      	str	r0, [r6, #12]
 8009d1a:	68db      	ldr	r3, [r3, #12]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d1e4      	bne.n	8009cea <_Balloc+0x2e>
 8009d20:	2000      	movs	r0, #0
 8009d22:	bd70      	pop	{r4, r5, r6, pc}
 8009d24:	6802      	ldr	r2, [r0, #0]
 8009d26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009d30:	e7f7      	b.n	8009d22 <_Balloc+0x66>
 8009d32:	bf00      	nop
 8009d34:	0800ac1d 	.word	0x0800ac1d
 8009d38:	0800ac9d 	.word	0x0800ac9d

08009d3c <_Bfree>:
 8009d3c:	b570      	push	{r4, r5, r6, lr}
 8009d3e:	69c6      	ldr	r6, [r0, #28]
 8009d40:	4605      	mov	r5, r0
 8009d42:	460c      	mov	r4, r1
 8009d44:	b976      	cbnz	r6, 8009d64 <_Bfree+0x28>
 8009d46:	2010      	movs	r0, #16
 8009d48:	f7ff ff04 	bl	8009b54 <malloc>
 8009d4c:	4602      	mov	r2, r0
 8009d4e:	61e8      	str	r0, [r5, #28]
 8009d50:	b920      	cbnz	r0, 8009d5c <_Bfree+0x20>
 8009d52:	4b09      	ldr	r3, [pc, #36]	; (8009d78 <_Bfree+0x3c>)
 8009d54:	4809      	ldr	r0, [pc, #36]	; (8009d7c <_Bfree+0x40>)
 8009d56:	218f      	movs	r1, #143	; 0x8f
 8009d58:	f000 fdd2 	bl	800a900 <__assert_func>
 8009d5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d60:	6006      	str	r6, [r0, #0]
 8009d62:	60c6      	str	r6, [r0, #12]
 8009d64:	b13c      	cbz	r4, 8009d76 <_Bfree+0x3a>
 8009d66:	69eb      	ldr	r3, [r5, #28]
 8009d68:	6862      	ldr	r2, [r4, #4]
 8009d6a:	68db      	ldr	r3, [r3, #12]
 8009d6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009d70:	6021      	str	r1, [r4, #0]
 8009d72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009d76:	bd70      	pop	{r4, r5, r6, pc}
 8009d78:	0800ac1d 	.word	0x0800ac1d
 8009d7c:	0800ac9d 	.word	0x0800ac9d

08009d80 <__multadd>:
 8009d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d84:	690d      	ldr	r5, [r1, #16]
 8009d86:	4607      	mov	r7, r0
 8009d88:	460c      	mov	r4, r1
 8009d8a:	461e      	mov	r6, r3
 8009d8c:	f101 0c14 	add.w	ip, r1, #20
 8009d90:	2000      	movs	r0, #0
 8009d92:	f8dc 3000 	ldr.w	r3, [ip]
 8009d96:	b299      	uxth	r1, r3
 8009d98:	fb02 6101 	mla	r1, r2, r1, r6
 8009d9c:	0c1e      	lsrs	r6, r3, #16
 8009d9e:	0c0b      	lsrs	r3, r1, #16
 8009da0:	fb02 3306 	mla	r3, r2, r6, r3
 8009da4:	b289      	uxth	r1, r1
 8009da6:	3001      	adds	r0, #1
 8009da8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009dac:	4285      	cmp	r5, r0
 8009dae:	f84c 1b04 	str.w	r1, [ip], #4
 8009db2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009db6:	dcec      	bgt.n	8009d92 <__multadd+0x12>
 8009db8:	b30e      	cbz	r6, 8009dfe <__multadd+0x7e>
 8009dba:	68a3      	ldr	r3, [r4, #8]
 8009dbc:	42ab      	cmp	r3, r5
 8009dbe:	dc19      	bgt.n	8009df4 <__multadd+0x74>
 8009dc0:	6861      	ldr	r1, [r4, #4]
 8009dc2:	4638      	mov	r0, r7
 8009dc4:	3101      	adds	r1, #1
 8009dc6:	f7ff ff79 	bl	8009cbc <_Balloc>
 8009dca:	4680      	mov	r8, r0
 8009dcc:	b928      	cbnz	r0, 8009dda <__multadd+0x5a>
 8009dce:	4602      	mov	r2, r0
 8009dd0:	4b0c      	ldr	r3, [pc, #48]	; (8009e04 <__multadd+0x84>)
 8009dd2:	480d      	ldr	r0, [pc, #52]	; (8009e08 <__multadd+0x88>)
 8009dd4:	21ba      	movs	r1, #186	; 0xba
 8009dd6:	f000 fd93 	bl	800a900 <__assert_func>
 8009dda:	6922      	ldr	r2, [r4, #16]
 8009ddc:	3202      	adds	r2, #2
 8009dde:	f104 010c 	add.w	r1, r4, #12
 8009de2:	0092      	lsls	r2, r2, #2
 8009de4:	300c      	adds	r0, #12
 8009de6:	f000 fd7d 	bl	800a8e4 <memcpy>
 8009dea:	4621      	mov	r1, r4
 8009dec:	4638      	mov	r0, r7
 8009dee:	f7ff ffa5 	bl	8009d3c <_Bfree>
 8009df2:	4644      	mov	r4, r8
 8009df4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009df8:	3501      	adds	r5, #1
 8009dfa:	615e      	str	r6, [r3, #20]
 8009dfc:	6125      	str	r5, [r4, #16]
 8009dfe:	4620      	mov	r0, r4
 8009e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e04:	0800ac8c 	.word	0x0800ac8c
 8009e08:	0800ac9d 	.word	0x0800ac9d

08009e0c <__hi0bits>:
 8009e0c:	0c03      	lsrs	r3, r0, #16
 8009e0e:	041b      	lsls	r3, r3, #16
 8009e10:	b9d3      	cbnz	r3, 8009e48 <__hi0bits+0x3c>
 8009e12:	0400      	lsls	r0, r0, #16
 8009e14:	2310      	movs	r3, #16
 8009e16:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009e1a:	bf04      	itt	eq
 8009e1c:	0200      	lsleq	r0, r0, #8
 8009e1e:	3308      	addeq	r3, #8
 8009e20:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009e24:	bf04      	itt	eq
 8009e26:	0100      	lsleq	r0, r0, #4
 8009e28:	3304      	addeq	r3, #4
 8009e2a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009e2e:	bf04      	itt	eq
 8009e30:	0080      	lsleq	r0, r0, #2
 8009e32:	3302      	addeq	r3, #2
 8009e34:	2800      	cmp	r0, #0
 8009e36:	db05      	blt.n	8009e44 <__hi0bits+0x38>
 8009e38:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009e3c:	f103 0301 	add.w	r3, r3, #1
 8009e40:	bf08      	it	eq
 8009e42:	2320      	moveq	r3, #32
 8009e44:	4618      	mov	r0, r3
 8009e46:	4770      	bx	lr
 8009e48:	2300      	movs	r3, #0
 8009e4a:	e7e4      	b.n	8009e16 <__hi0bits+0xa>

08009e4c <__lo0bits>:
 8009e4c:	6803      	ldr	r3, [r0, #0]
 8009e4e:	f013 0207 	ands.w	r2, r3, #7
 8009e52:	d00c      	beq.n	8009e6e <__lo0bits+0x22>
 8009e54:	07d9      	lsls	r1, r3, #31
 8009e56:	d422      	bmi.n	8009e9e <__lo0bits+0x52>
 8009e58:	079a      	lsls	r2, r3, #30
 8009e5a:	bf49      	itett	mi
 8009e5c:	085b      	lsrmi	r3, r3, #1
 8009e5e:	089b      	lsrpl	r3, r3, #2
 8009e60:	6003      	strmi	r3, [r0, #0]
 8009e62:	2201      	movmi	r2, #1
 8009e64:	bf5c      	itt	pl
 8009e66:	6003      	strpl	r3, [r0, #0]
 8009e68:	2202      	movpl	r2, #2
 8009e6a:	4610      	mov	r0, r2
 8009e6c:	4770      	bx	lr
 8009e6e:	b299      	uxth	r1, r3
 8009e70:	b909      	cbnz	r1, 8009e76 <__lo0bits+0x2a>
 8009e72:	0c1b      	lsrs	r3, r3, #16
 8009e74:	2210      	movs	r2, #16
 8009e76:	b2d9      	uxtb	r1, r3
 8009e78:	b909      	cbnz	r1, 8009e7e <__lo0bits+0x32>
 8009e7a:	3208      	adds	r2, #8
 8009e7c:	0a1b      	lsrs	r3, r3, #8
 8009e7e:	0719      	lsls	r1, r3, #28
 8009e80:	bf04      	itt	eq
 8009e82:	091b      	lsreq	r3, r3, #4
 8009e84:	3204      	addeq	r2, #4
 8009e86:	0799      	lsls	r1, r3, #30
 8009e88:	bf04      	itt	eq
 8009e8a:	089b      	lsreq	r3, r3, #2
 8009e8c:	3202      	addeq	r2, #2
 8009e8e:	07d9      	lsls	r1, r3, #31
 8009e90:	d403      	bmi.n	8009e9a <__lo0bits+0x4e>
 8009e92:	085b      	lsrs	r3, r3, #1
 8009e94:	f102 0201 	add.w	r2, r2, #1
 8009e98:	d003      	beq.n	8009ea2 <__lo0bits+0x56>
 8009e9a:	6003      	str	r3, [r0, #0]
 8009e9c:	e7e5      	b.n	8009e6a <__lo0bits+0x1e>
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	e7e3      	b.n	8009e6a <__lo0bits+0x1e>
 8009ea2:	2220      	movs	r2, #32
 8009ea4:	e7e1      	b.n	8009e6a <__lo0bits+0x1e>
	...

08009ea8 <__i2b>:
 8009ea8:	b510      	push	{r4, lr}
 8009eaa:	460c      	mov	r4, r1
 8009eac:	2101      	movs	r1, #1
 8009eae:	f7ff ff05 	bl	8009cbc <_Balloc>
 8009eb2:	4602      	mov	r2, r0
 8009eb4:	b928      	cbnz	r0, 8009ec2 <__i2b+0x1a>
 8009eb6:	4b05      	ldr	r3, [pc, #20]	; (8009ecc <__i2b+0x24>)
 8009eb8:	4805      	ldr	r0, [pc, #20]	; (8009ed0 <__i2b+0x28>)
 8009eba:	f240 1145 	movw	r1, #325	; 0x145
 8009ebe:	f000 fd1f 	bl	800a900 <__assert_func>
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	6144      	str	r4, [r0, #20]
 8009ec6:	6103      	str	r3, [r0, #16]
 8009ec8:	bd10      	pop	{r4, pc}
 8009eca:	bf00      	nop
 8009ecc:	0800ac8c 	.word	0x0800ac8c
 8009ed0:	0800ac9d 	.word	0x0800ac9d

08009ed4 <__multiply>:
 8009ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ed8:	4691      	mov	r9, r2
 8009eda:	690a      	ldr	r2, [r1, #16]
 8009edc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	bfb8      	it	lt
 8009ee4:	460b      	movlt	r3, r1
 8009ee6:	460c      	mov	r4, r1
 8009ee8:	bfbc      	itt	lt
 8009eea:	464c      	movlt	r4, r9
 8009eec:	4699      	movlt	r9, r3
 8009eee:	6927      	ldr	r7, [r4, #16]
 8009ef0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009ef4:	68a3      	ldr	r3, [r4, #8]
 8009ef6:	6861      	ldr	r1, [r4, #4]
 8009ef8:	eb07 060a 	add.w	r6, r7, sl
 8009efc:	42b3      	cmp	r3, r6
 8009efe:	b085      	sub	sp, #20
 8009f00:	bfb8      	it	lt
 8009f02:	3101      	addlt	r1, #1
 8009f04:	f7ff feda 	bl	8009cbc <_Balloc>
 8009f08:	b930      	cbnz	r0, 8009f18 <__multiply+0x44>
 8009f0a:	4602      	mov	r2, r0
 8009f0c:	4b44      	ldr	r3, [pc, #272]	; (800a020 <__multiply+0x14c>)
 8009f0e:	4845      	ldr	r0, [pc, #276]	; (800a024 <__multiply+0x150>)
 8009f10:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009f14:	f000 fcf4 	bl	800a900 <__assert_func>
 8009f18:	f100 0514 	add.w	r5, r0, #20
 8009f1c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009f20:	462b      	mov	r3, r5
 8009f22:	2200      	movs	r2, #0
 8009f24:	4543      	cmp	r3, r8
 8009f26:	d321      	bcc.n	8009f6c <__multiply+0x98>
 8009f28:	f104 0314 	add.w	r3, r4, #20
 8009f2c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009f30:	f109 0314 	add.w	r3, r9, #20
 8009f34:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009f38:	9202      	str	r2, [sp, #8]
 8009f3a:	1b3a      	subs	r2, r7, r4
 8009f3c:	3a15      	subs	r2, #21
 8009f3e:	f022 0203 	bic.w	r2, r2, #3
 8009f42:	3204      	adds	r2, #4
 8009f44:	f104 0115 	add.w	r1, r4, #21
 8009f48:	428f      	cmp	r7, r1
 8009f4a:	bf38      	it	cc
 8009f4c:	2204      	movcc	r2, #4
 8009f4e:	9201      	str	r2, [sp, #4]
 8009f50:	9a02      	ldr	r2, [sp, #8]
 8009f52:	9303      	str	r3, [sp, #12]
 8009f54:	429a      	cmp	r2, r3
 8009f56:	d80c      	bhi.n	8009f72 <__multiply+0x9e>
 8009f58:	2e00      	cmp	r6, #0
 8009f5a:	dd03      	ble.n	8009f64 <__multiply+0x90>
 8009f5c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d05b      	beq.n	800a01c <__multiply+0x148>
 8009f64:	6106      	str	r6, [r0, #16]
 8009f66:	b005      	add	sp, #20
 8009f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f6c:	f843 2b04 	str.w	r2, [r3], #4
 8009f70:	e7d8      	b.n	8009f24 <__multiply+0x50>
 8009f72:	f8b3 a000 	ldrh.w	sl, [r3]
 8009f76:	f1ba 0f00 	cmp.w	sl, #0
 8009f7a:	d024      	beq.n	8009fc6 <__multiply+0xf2>
 8009f7c:	f104 0e14 	add.w	lr, r4, #20
 8009f80:	46a9      	mov	r9, r5
 8009f82:	f04f 0c00 	mov.w	ip, #0
 8009f86:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009f8a:	f8d9 1000 	ldr.w	r1, [r9]
 8009f8e:	fa1f fb82 	uxth.w	fp, r2
 8009f92:	b289      	uxth	r1, r1
 8009f94:	fb0a 110b 	mla	r1, sl, fp, r1
 8009f98:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009f9c:	f8d9 2000 	ldr.w	r2, [r9]
 8009fa0:	4461      	add	r1, ip
 8009fa2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009fa6:	fb0a c20b 	mla	r2, sl, fp, ip
 8009faa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009fae:	b289      	uxth	r1, r1
 8009fb0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009fb4:	4577      	cmp	r7, lr
 8009fb6:	f849 1b04 	str.w	r1, [r9], #4
 8009fba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009fbe:	d8e2      	bhi.n	8009f86 <__multiply+0xb2>
 8009fc0:	9a01      	ldr	r2, [sp, #4]
 8009fc2:	f845 c002 	str.w	ip, [r5, r2]
 8009fc6:	9a03      	ldr	r2, [sp, #12]
 8009fc8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009fcc:	3304      	adds	r3, #4
 8009fce:	f1b9 0f00 	cmp.w	r9, #0
 8009fd2:	d021      	beq.n	800a018 <__multiply+0x144>
 8009fd4:	6829      	ldr	r1, [r5, #0]
 8009fd6:	f104 0c14 	add.w	ip, r4, #20
 8009fda:	46ae      	mov	lr, r5
 8009fdc:	f04f 0a00 	mov.w	sl, #0
 8009fe0:	f8bc b000 	ldrh.w	fp, [ip]
 8009fe4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009fe8:	fb09 220b 	mla	r2, r9, fp, r2
 8009fec:	4452      	add	r2, sl
 8009fee:	b289      	uxth	r1, r1
 8009ff0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009ff4:	f84e 1b04 	str.w	r1, [lr], #4
 8009ff8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009ffc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a000:	f8be 1000 	ldrh.w	r1, [lr]
 800a004:	fb09 110a 	mla	r1, r9, sl, r1
 800a008:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a00c:	4567      	cmp	r7, ip
 800a00e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a012:	d8e5      	bhi.n	8009fe0 <__multiply+0x10c>
 800a014:	9a01      	ldr	r2, [sp, #4]
 800a016:	50a9      	str	r1, [r5, r2]
 800a018:	3504      	adds	r5, #4
 800a01a:	e799      	b.n	8009f50 <__multiply+0x7c>
 800a01c:	3e01      	subs	r6, #1
 800a01e:	e79b      	b.n	8009f58 <__multiply+0x84>
 800a020:	0800ac8c 	.word	0x0800ac8c
 800a024:	0800ac9d 	.word	0x0800ac9d

0800a028 <__pow5mult>:
 800a028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a02c:	4615      	mov	r5, r2
 800a02e:	f012 0203 	ands.w	r2, r2, #3
 800a032:	4606      	mov	r6, r0
 800a034:	460f      	mov	r7, r1
 800a036:	d007      	beq.n	800a048 <__pow5mult+0x20>
 800a038:	4c25      	ldr	r4, [pc, #148]	; (800a0d0 <__pow5mult+0xa8>)
 800a03a:	3a01      	subs	r2, #1
 800a03c:	2300      	movs	r3, #0
 800a03e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a042:	f7ff fe9d 	bl	8009d80 <__multadd>
 800a046:	4607      	mov	r7, r0
 800a048:	10ad      	asrs	r5, r5, #2
 800a04a:	d03d      	beq.n	800a0c8 <__pow5mult+0xa0>
 800a04c:	69f4      	ldr	r4, [r6, #28]
 800a04e:	b97c      	cbnz	r4, 800a070 <__pow5mult+0x48>
 800a050:	2010      	movs	r0, #16
 800a052:	f7ff fd7f 	bl	8009b54 <malloc>
 800a056:	4602      	mov	r2, r0
 800a058:	61f0      	str	r0, [r6, #28]
 800a05a:	b928      	cbnz	r0, 800a068 <__pow5mult+0x40>
 800a05c:	4b1d      	ldr	r3, [pc, #116]	; (800a0d4 <__pow5mult+0xac>)
 800a05e:	481e      	ldr	r0, [pc, #120]	; (800a0d8 <__pow5mult+0xb0>)
 800a060:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a064:	f000 fc4c 	bl	800a900 <__assert_func>
 800a068:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a06c:	6004      	str	r4, [r0, #0]
 800a06e:	60c4      	str	r4, [r0, #12]
 800a070:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a074:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a078:	b94c      	cbnz	r4, 800a08e <__pow5mult+0x66>
 800a07a:	f240 2171 	movw	r1, #625	; 0x271
 800a07e:	4630      	mov	r0, r6
 800a080:	f7ff ff12 	bl	8009ea8 <__i2b>
 800a084:	2300      	movs	r3, #0
 800a086:	f8c8 0008 	str.w	r0, [r8, #8]
 800a08a:	4604      	mov	r4, r0
 800a08c:	6003      	str	r3, [r0, #0]
 800a08e:	f04f 0900 	mov.w	r9, #0
 800a092:	07eb      	lsls	r3, r5, #31
 800a094:	d50a      	bpl.n	800a0ac <__pow5mult+0x84>
 800a096:	4639      	mov	r1, r7
 800a098:	4622      	mov	r2, r4
 800a09a:	4630      	mov	r0, r6
 800a09c:	f7ff ff1a 	bl	8009ed4 <__multiply>
 800a0a0:	4639      	mov	r1, r7
 800a0a2:	4680      	mov	r8, r0
 800a0a4:	4630      	mov	r0, r6
 800a0a6:	f7ff fe49 	bl	8009d3c <_Bfree>
 800a0aa:	4647      	mov	r7, r8
 800a0ac:	106d      	asrs	r5, r5, #1
 800a0ae:	d00b      	beq.n	800a0c8 <__pow5mult+0xa0>
 800a0b0:	6820      	ldr	r0, [r4, #0]
 800a0b2:	b938      	cbnz	r0, 800a0c4 <__pow5mult+0x9c>
 800a0b4:	4622      	mov	r2, r4
 800a0b6:	4621      	mov	r1, r4
 800a0b8:	4630      	mov	r0, r6
 800a0ba:	f7ff ff0b 	bl	8009ed4 <__multiply>
 800a0be:	6020      	str	r0, [r4, #0]
 800a0c0:	f8c0 9000 	str.w	r9, [r0]
 800a0c4:	4604      	mov	r4, r0
 800a0c6:	e7e4      	b.n	800a092 <__pow5mult+0x6a>
 800a0c8:	4638      	mov	r0, r7
 800a0ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0ce:	bf00      	nop
 800a0d0:	0800ade8 	.word	0x0800ade8
 800a0d4:	0800ac1d 	.word	0x0800ac1d
 800a0d8:	0800ac9d 	.word	0x0800ac9d

0800a0dc <__lshift>:
 800a0dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0e0:	460c      	mov	r4, r1
 800a0e2:	6849      	ldr	r1, [r1, #4]
 800a0e4:	6923      	ldr	r3, [r4, #16]
 800a0e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a0ea:	68a3      	ldr	r3, [r4, #8]
 800a0ec:	4607      	mov	r7, r0
 800a0ee:	4691      	mov	r9, r2
 800a0f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a0f4:	f108 0601 	add.w	r6, r8, #1
 800a0f8:	42b3      	cmp	r3, r6
 800a0fa:	db0b      	blt.n	800a114 <__lshift+0x38>
 800a0fc:	4638      	mov	r0, r7
 800a0fe:	f7ff fddd 	bl	8009cbc <_Balloc>
 800a102:	4605      	mov	r5, r0
 800a104:	b948      	cbnz	r0, 800a11a <__lshift+0x3e>
 800a106:	4602      	mov	r2, r0
 800a108:	4b28      	ldr	r3, [pc, #160]	; (800a1ac <__lshift+0xd0>)
 800a10a:	4829      	ldr	r0, [pc, #164]	; (800a1b0 <__lshift+0xd4>)
 800a10c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a110:	f000 fbf6 	bl	800a900 <__assert_func>
 800a114:	3101      	adds	r1, #1
 800a116:	005b      	lsls	r3, r3, #1
 800a118:	e7ee      	b.n	800a0f8 <__lshift+0x1c>
 800a11a:	2300      	movs	r3, #0
 800a11c:	f100 0114 	add.w	r1, r0, #20
 800a120:	f100 0210 	add.w	r2, r0, #16
 800a124:	4618      	mov	r0, r3
 800a126:	4553      	cmp	r3, sl
 800a128:	db33      	blt.n	800a192 <__lshift+0xb6>
 800a12a:	6920      	ldr	r0, [r4, #16]
 800a12c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a130:	f104 0314 	add.w	r3, r4, #20
 800a134:	f019 091f 	ands.w	r9, r9, #31
 800a138:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a13c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a140:	d02b      	beq.n	800a19a <__lshift+0xbe>
 800a142:	f1c9 0e20 	rsb	lr, r9, #32
 800a146:	468a      	mov	sl, r1
 800a148:	2200      	movs	r2, #0
 800a14a:	6818      	ldr	r0, [r3, #0]
 800a14c:	fa00 f009 	lsl.w	r0, r0, r9
 800a150:	4310      	orrs	r0, r2
 800a152:	f84a 0b04 	str.w	r0, [sl], #4
 800a156:	f853 2b04 	ldr.w	r2, [r3], #4
 800a15a:	459c      	cmp	ip, r3
 800a15c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a160:	d8f3      	bhi.n	800a14a <__lshift+0x6e>
 800a162:	ebac 0304 	sub.w	r3, ip, r4
 800a166:	3b15      	subs	r3, #21
 800a168:	f023 0303 	bic.w	r3, r3, #3
 800a16c:	3304      	adds	r3, #4
 800a16e:	f104 0015 	add.w	r0, r4, #21
 800a172:	4584      	cmp	ip, r0
 800a174:	bf38      	it	cc
 800a176:	2304      	movcc	r3, #4
 800a178:	50ca      	str	r2, [r1, r3]
 800a17a:	b10a      	cbz	r2, 800a180 <__lshift+0xa4>
 800a17c:	f108 0602 	add.w	r6, r8, #2
 800a180:	3e01      	subs	r6, #1
 800a182:	4638      	mov	r0, r7
 800a184:	612e      	str	r6, [r5, #16]
 800a186:	4621      	mov	r1, r4
 800a188:	f7ff fdd8 	bl	8009d3c <_Bfree>
 800a18c:	4628      	mov	r0, r5
 800a18e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a192:	f842 0f04 	str.w	r0, [r2, #4]!
 800a196:	3301      	adds	r3, #1
 800a198:	e7c5      	b.n	800a126 <__lshift+0x4a>
 800a19a:	3904      	subs	r1, #4
 800a19c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1a0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a1a4:	459c      	cmp	ip, r3
 800a1a6:	d8f9      	bhi.n	800a19c <__lshift+0xc0>
 800a1a8:	e7ea      	b.n	800a180 <__lshift+0xa4>
 800a1aa:	bf00      	nop
 800a1ac:	0800ac8c 	.word	0x0800ac8c
 800a1b0:	0800ac9d 	.word	0x0800ac9d

0800a1b4 <__mcmp>:
 800a1b4:	b530      	push	{r4, r5, lr}
 800a1b6:	6902      	ldr	r2, [r0, #16]
 800a1b8:	690c      	ldr	r4, [r1, #16]
 800a1ba:	1b12      	subs	r2, r2, r4
 800a1bc:	d10e      	bne.n	800a1dc <__mcmp+0x28>
 800a1be:	f100 0314 	add.w	r3, r0, #20
 800a1c2:	3114      	adds	r1, #20
 800a1c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a1c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a1cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a1d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a1d4:	42a5      	cmp	r5, r4
 800a1d6:	d003      	beq.n	800a1e0 <__mcmp+0x2c>
 800a1d8:	d305      	bcc.n	800a1e6 <__mcmp+0x32>
 800a1da:	2201      	movs	r2, #1
 800a1dc:	4610      	mov	r0, r2
 800a1de:	bd30      	pop	{r4, r5, pc}
 800a1e0:	4283      	cmp	r3, r0
 800a1e2:	d3f3      	bcc.n	800a1cc <__mcmp+0x18>
 800a1e4:	e7fa      	b.n	800a1dc <__mcmp+0x28>
 800a1e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a1ea:	e7f7      	b.n	800a1dc <__mcmp+0x28>

0800a1ec <__mdiff>:
 800a1ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1f0:	460c      	mov	r4, r1
 800a1f2:	4606      	mov	r6, r0
 800a1f4:	4611      	mov	r1, r2
 800a1f6:	4620      	mov	r0, r4
 800a1f8:	4690      	mov	r8, r2
 800a1fa:	f7ff ffdb 	bl	800a1b4 <__mcmp>
 800a1fe:	1e05      	subs	r5, r0, #0
 800a200:	d110      	bne.n	800a224 <__mdiff+0x38>
 800a202:	4629      	mov	r1, r5
 800a204:	4630      	mov	r0, r6
 800a206:	f7ff fd59 	bl	8009cbc <_Balloc>
 800a20a:	b930      	cbnz	r0, 800a21a <__mdiff+0x2e>
 800a20c:	4b3a      	ldr	r3, [pc, #232]	; (800a2f8 <__mdiff+0x10c>)
 800a20e:	4602      	mov	r2, r0
 800a210:	f240 2137 	movw	r1, #567	; 0x237
 800a214:	4839      	ldr	r0, [pc, #228]	; (800a2fc <__mdiff+0x110>)
 800a216:	f000 fb73 	bl	800a900 <__assert_func>
 800a21a:	2301      	movs	r3, #1
 800a21c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a220:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a224:	bfa4      	itt	ge
 800a226:	4643      	movge	r3, r8
 800a228:	46a0      	movge	r8, r4
 800a22a:	4630      	mov	r0, r6
 800a22c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a230:	bfa6      	itte	ge
 800a232:	461c      	movge	r4, r3
 800a234:	2500      	movge	r5, #0
 800a236:	2501      	movlt	r5, #1
 800a238:	f7ff fd40 	bl	8009cbc <_Balloc>
 800a23c:	b920      	cbnz	r0, 800a248 <__mdiff+0x5c>
 800a23e:	4b2e      	ldr	r3, [pc, #184]	; (800a2f8 <__mdiff+0x10c>)
 800a240:	4602      	mov	r2, r0
 800a242:	f240 2145 	movw	r1, #581	; 0x245
 800a246:	e7e5      	b.n	800a214 <__mdiff+0x28>
 800a248:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a24c:	6926      	ldr	r6, [r4, #16]
 800a24e:	60c5      	str	r5, [r0, #12]
 800a250:	f104 0914 	add.w	r9, r4, #20
 800a254:	f108 0514 	add.w	r5, r8, #20
 800a258:	f100 0e14 	add.w	lr, r0, #20
 800a25c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a260:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a264:	f108 0210 	add.w	r2, r8, #16
 800a268:	46f2      	mov	sl, lr
 800a26a:	2100      	movs	r1, #0
 800a26c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a270:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a274:	fa11 f88b 	uxtah	r8, r1, fp
 800a278:	b299      	uxth	r1, r3
 800a27a:	0c1b      	lsrs	r3, r3, #16
 800a27c:	eba8 0801 	sub.w	r8, r8, r1
 800a280:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a284:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a288:	fa1f f888 	uxth.w	r8, r8
 800a28c:	1419      	asrs	r1, r3, #16
 800a28e:	454e      	cmp	r6, r9
 800a290:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a294:	f84a 3b04 	str.w	r3, [sl], #4
 800a298:	d8e8      	bhi.n	800a26c <__mdiff+0x80>
 800a29a:	1b33      	subs	r3, r6, r4
 800a29c:	3b15      	subs	r3, #21
 800a29e:	f023 0303 	bic.w	r3, r3, #3
 800a2a2:	3304      	adds	r3, #4
 800a2a4:	3415      	adds	r4, #21
 800a2a6:	42a6      	cmp	r6, r4
 800a2a8:	bf38      	it	cc
 800a2aa:	2304      	movcc	r3, #4
 800a2ac:	441d      	add	r5, r3
 800a2ae:	4473      	add	r3, lr
 800a2b0:	469e      	mov	lr, r3
 800a2b2:	462e      	mov	r6, r5
 800a2b4:	4566      	cmp	r6, ip
 800a2b6:	d30e      	bcc.n	800a2d6 <__mdiff+0xea>
 800a2b8:	f10c 0203 	add.w	r2, ip, #3
 800a2bc:	1b52      	subs	r2, r2, r5
 800a2be:	f022 0203 	bic.w	r2, r2, #3
 800a2c2:	3d03      	subs	r5, #3
 800a2c4:	45ac      	cmp	ip, r5
 800a2c6:	bf38      	it	cc
 800a2c8:	2200      	movcc	r2, #0
 800a2ca:	4413      	add	r3, r2
 800a2cc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a2d0:	b17a      	cbz	r2, 800a2f2 <__mdiff+0x106>
 800a2d2:	6107      	str	r7, [r0, #16]
 800a2d4:	e7a4      	b.n	800a220 <__mdiff+0x34>
 800a2d6:	f856 8b04 	ldr.w	r8, [r6], #4
 800a2da:	fa11 f288 	uxtah	r2, r1, r8
 800a2de:	1414      	asrs	r4, r2, #16
 800a2e0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a2e4:	b292      	uxth	r2, r2
 800a2e6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a2ea:	f84e 2b04 	str.w	r2, [lr], #4
 800a2ee:	1421      	asrs	r1, r4, #16
 800a2f0:	e7e0      	b.n	800a2b4 <__mdiff+0xc8>
 800a2f2:	3f01      	subs	r7, #1
 800a2f4:	e7ea      	b.n	800a2cc <__mdiff+0xe0>
 800a2f6:	bf00      	nop
 800a2f8:	0800ac8c 	.word	0x0800ac8c
 800a2fc:	0800ac9d 	.word	0x0800ac9d

0800a300 <__d2b>:
 800a300:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a304:	460f      	mov	r7, r1
 800a306:	2101      	movs	r1, #1
 800a308:	ec59 8b10 	vmov	r8, r9, d0
 800a30c:	4616      	mov	r6, r2
 800a30e:	f7ff fcd5 	bl	8009cbc <_Balloc>
 800a312:	4604      	mov	r4, r0
 800a314:	b930      	cbnz	r0, 800a324 <__d2b+0x24>
 800a316:	4602      	mov	r2, r0
 800a318:	4b24      	ldr	r3, [pc, #144]	; (800a3ac <__d2b+0xac>)
 800a31a:	4825      	ldr	r0, [pc, #148]	; (800a3b0 <__d2b+0xb0>)
 800a31c:	f240 310f 	movw	r1, #783	; 0x30f
 800a320:	f000 faee 	bl	800a900 <__assert_func>
 800a324:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a328:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a32c:	bb2d      	cbnz	r5, 800a37a <__d2b+0x7a>
 800a32e:	9301      	str	r3, [sp, #4]
 800a330:	f1b8 0300 	subs.w	r3, r8, #0
 800a334:	d026      	beq.n	800a384 <__d2b+0x84>
 800a336:	4668      	mov	r0, sp
 800a338:	9300      	str	r3, [sp, #0]
 800a33a:	f7ff fd87 	bl	8009e4c <__lo0bits>
 800a33e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a342:	b1e8      	cbz	r0, 800a380 <__d2b+0x80>
 800a344:	f1c0 0320 	rsb	r3, r0, #32
 800a348:	fa02 f303 	lsl.w	r3, r2, r3
 800a34c:	430b      	orrs	r3, r1
 800a34e:	40c2      	lsrs	r2, r0
 800a350:	6163      	str	r3, [r4, #20]
 800a352:	9201      	str	r2, [sp, #4]
 800a354:	9b01      	ldr	r3, [sp, #4]
 800a356:	61a3      	str	r3, [r4, #24]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	bf14      	ite	ne
 800a35c:	2202      	movne	r2, #2
 800a35e:	2201      	moveq	r2, #1
 800a360:	6122      	str	r2, [r4, #16]
 800a362:	b1bd      	cbz	r5, 800a394 <__d2b+0x94>
 800a364:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a368:	4405      	add	r5, r0
 800a36a:	603d      	str	r5, [r7, #0]
 800a36c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a370:	6030      	str	r0, [r6, #0]
 800a372:	4620      	mov	r0, r4
 800a374:	b003      	add	sp, #12
 800a376:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a37a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a37e:	e7d6      	b.n	800a32e <__d2b+0x2e>
 800a380:	6161      	str	r1, [r4, #20]
 800a382:	e7e7      	b.n	800a354 <__d2b+0x54>
 800a384:	a801      	add	r0, sp, #4
 800a386:	f7ff fd61 	bl	8009e4c <__lo0bits>
 800a38a:	9b01      	ldr	r3, [sp, #4]
 800a38c:	6163      	str	r3, [r4, #20]
 800a38e:	3020      	adds	r0, #32
 800a390:	2201      	movs	r2, #1
 800a392:	e7e5      	b.n	800a360 <__d2b+0x60>
 800a394:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a398:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a39c:	6038      	str	r0, [r7, #0]
 800a39e:	6918      	ldr	r0, [r3, #16]
 800a3a0:	f7ff fd34 	bl	8009e0c <__hi0bits>
 800a3a4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a3a8:	e7e2      	b.n	800a370 <__d2b+0x70>
 800a3aa:	bf00      	nop
 800a3ac:	0800ac8c 	.word	0x0800ac8c
 800a3b0:	0800ac9d 	.word	0x0800ac9d

0800a3b4 <__sfputc_r>:
 800a3b4:	6893      	ldr	r3, [r2, #8]
 800a3b6:	3b01      	subs	r3, #1
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	b410      	push	{r4}
 800a3bc:	6093      	str	r3, [r2, #8]
 800a3be:	da08      	bge.n	800a3d2 <__sfputc_r+0x1e>
 800a3c0:	6994      	ldr	r4, [r2, #24]
 800a3c2:	42a3      	cmp	r3, r4
 800a3c4:	db01      	blt.n	800a3ca <__sfputc_r+0x16>
 800a3c6:	290a      	cmp	r1, #10
 800a3c8:	d103      	bne.n	800a3d2 <__sfputc_r+0x1e>
 800a3ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3ce:	f000 b9e3 	b.w	800a798 <__swbuf_r>
 800a3d2:	6813      	ldr	r3, [r2, #0]
 800a3d4:	1c58      	adds	r0, r3, #1
 800a3d6:	6010      	str	r0, [r2, #0]
 800a3d8:	7019      	strb	r1, [r3, #0]
 800a3da:	4608      	mov	r0, r1
 800a3dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3e0:	4770      	bx	lr

0800a3e2 <__sfputs_r>:
 800a3e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3e4:	4606      	mov	r6, r0
 800a3e6:	460f      	mov	r7, r1
 800a3e8:	4614      	mov	r4, r2
 800a3ea:	18d5      	adds	r5, r2, r3
 800a3ec:	42ac      	cmp	r4, r5
 800a3ee:	d101      	bne.n	800a3f4 <__sfputs_r+0x12>
 800a3f0:	2000      	movs	r0, #0
 800a3f2:	e007      	b.n	800a404 <__sfputs_r+0x22>
 800a3f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3f8:	463a      	mov	r2, r7
 800a3fa:	4630      	mov	r0, r6
 800a3fc:	f7ff ffda 	bl	800a3b4 <__sfputc_r>
 800a400:	1c43      	adds	r3, r0, #1
 800a402:	d1f3      	bne.n	800a3ec <__sfputs_r+0xa>
 800a404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a408 <_vfiprintf_r>:
 800a408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a40c:	460d      	mov	r5, r1
 800a40e:	b09d      	sub	sp, #116	; 0x74
 800a410:	4614      	mov	r4, r2
 800a412:	4698      	mov	r8, r3
 800a414:	4606      	mov	r6, r0
 800a416:	b118      	cbz	r0, 800a420 <_vfiprintf_r+0x18>
 800a418:	6a03      	ldr	r3, [r0, #32]
 800a41a:	b90b      	cbnz	r3, 800a420 <_vfiprintf_r+0x18>
 800a41c:	f7fe fbc6 	bl	8008bac <__sinit>
 800a420:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a422:	07d9      	lsls	r1, r3, #31
 800a424:	d405      	bmi.n	800a432 <_vfiprintf_r+0x2a>
 800a426:	89ab      	ldrh	r3, [r5, #12]
 800a428:	059a      	lsls	r2, r3, #22
 800a42a:	d402      	bmi.n	800a432 <_vfiprintf_r+0x2a>
 800a42c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a42e:	f7fe fcc6 	bl	8008dbe <__retarget_lock_acquire_recursive>
 800a432:	89ab      	ldrh	r3, [r5, #12]
 800a434:	071b      	lsls	r3, r3, #28
 800a436:	d501      	bpl.n	800a43c <_vfiprintf_r+0x34>
 800a438:	692b      	ldr	r3, [r5, #16]
 800a43a:	b99b      	cbnz	r3, 800a464 <_vfiprintf_r+0x5c>
 800a43c:	4629      	mov	r1, r5
 800a43e:	4630      	mov	r0, r6
 800a440:	f000 f9e8 	bl	800a814 <__swsetup_r>
 800a444:	b170      	cbz	r0, 800a464 <_vfiprintf_r+0x5c>
 800a446:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a448:	07dc      	lsls	r4, r3, #31
 800a44a:	d504      	bpl.n	800a456 <_vfiprintf_r+0x4e>
 800a44c:	f04f 30ff 	mov.w	r0, #4294967295
 800a450:	b01d      	add	sp, #116	; 0x74
 800a452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a456:	89ab      	ldrh	r3, [r5, #12]
 800a458:	0598      	lsls	r0, r3, #22
 800a45a:	d4f7      	bmi.n	800a44c <_vfiprintf_r+0x44>
 800a45c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a45e:	f7fe fcaf 	bl	8008dc0 <__retarget_lock_release_recursive>
 800a462:	e7f3      	b.n	800a44c <_vfiprintf_r+0x44>
 800a464:	2300      	movs	r3, #0
 800a466:	9309      	str	r3, [sp, #36]	; 0x24
 800a468:	2320      	movs	r3, #32
 800a46a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a46e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a472:	2330      	movs	r3, #48	; 0x30
 800a474:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a628 <_vfiprintf_r+0x220>
 800a478:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a47c:	f04f 0901 	mov.w	r9, #1
 800a480:	4623      	mov	r3, r4
 800a482:	469a      	mov	sl, r3
 800a484:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a488:	b10a      	cbz	r2, 800a48e <_vfiprintf_r+0x86>
 800a48a:	2a25      	cmp	r2, #37	; 0x25
 800a48c:	d1f9      	bne.n	800a482 <_vfiprintf_r+0x7a>
 800a48e:	ebba 0b04 	subs.w	fp, sl, r4
 800a492:	d00b      	beq.n	800a4ac <_vfiprintf_r+0xa4>
 800a494:	465b      	mov	r3, fp
 800a496:	4622      	mov	r2, r4
 800a498:	4629      	mov	r1, r5
 800a49a:	4630      	mov	r0, r6
 800a49c:	f7ff ffa1 	bl	800a3e2 <__sfputs_r>
 800a4a0:	3001      	adds	r0, #1
 800a4a2:	f000 80a9 	beq.w	800a5f8 <_vfiprintf_r+0x1f0>
 800a4a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4a8:	445a      	add	r2, fp
 800a4aa:	9209      	str	r2, [sp, #36]	; 0x24
 800a4ac:	f89a 3000 	ldrb.w	r3, [sl]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	f000 80a1 	beq.w	800a5f8 <_vfiprintf_r+0x1f0>
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	f04f 32ff 	mov.w	r2, #4294967295
 800a4bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4c0:	f10a 0a01 	add.w	sl, sl, #1
 800a4c4:	9304      	str	r3, [sp, #16]
 800a4c6:	9307      	str	r3, [sp, #28]
 800a4c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4cc:	931a      	str	r3, [sp, #104]	; 0x68
 800a4ce:	4654      	mov	r4, sl
 800a4d0:	2205      	movs	r2, #5
 800a4d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4d6:	4854      	ldr	r0, [pc, #336]	; (800a628 <_vfiprintf_r+0x220>)
 800a4d8:	f7f5 fe82 	bl	80001e0 <memchr>
 800a4dc:	9a04      	ldr	r2, [sp, #16]
 800a4de:	b9d8      	cbnz	r0, 800a518 <_vfiprintf_r+0x110>
 800a4e0:	06d1      	lsls	r1, r2, #27
 800a4e2:	bf44      	itt	mi
 800a4e4:	2320      	movmi	r3, #32
 800a4e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4ea:	0713      	lsls	r3, r2, #28
 800a4ec:	bf44      	itt	mi
 800a4ee:	232b      	movmi	r3, #43	; 0x2b
 800a4f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4f4:	f89a 3000 	ldrb.w	r3, [sl]
 800a4f8:	2b2a      	cmp	r3, #42	; 0x2a
 800a4fa:	d015      	beq.n	800a528 <_vfiprintf_r+0x120>
 800a4fc:	9a07      	ldr	r2, [sp, #28]
 800a4fe:	4654      	mov	r4, sl
 800a500:	2000      	movs	r0, #0
 800a502:	f04f 0c0a 	mov.w	ip, #10
 800a506:	4621      	mov	r1, r4
 800a508:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a50c:	3b30      	subs	r3, #48	; 0x30
 800a50e:	2b09      	cmp	r3, #9
 800a510:	d94d      	bls.n	800a5ae <_vfiprintf_r+0x1a6>
 800a512:	b1b0      	cbz	r0, 800a542 <_vfiprintf_r+0x13a>
 800a514:	9207      	str	r2, [sp, #28]
 800a516:	e014      	b.n	800a542 <_vfiprintf_r+0x13a>
 800a518:	eba0 0308 	sub.w	r3, r0, r8
 800a51c:	fa09 f303 	lsl.w	r3, r9, r3
 800a520:	4313      	orrs	r3, r2
 800a522:	9304      	str	r3, [sp, #16]
 800a524:	46a2      	mov	sl, r4
 800a526:	e7d2      	b.n	800a4ce <_vfiprintf_r+0xc6>
 800a528:	9b03      	ldr	r3, [sp, #12]
 800a52a:	1d19      	adds	r1, r3, #4
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	9103      	str	r1, [sp, #12]
 800a530:	2b00      	cmp	r3, #0
 800a532:	bfbb      	ittet	lt
 800a534:	425b      	neglt	r3, r3
 800a536:	f042 0202 	orrlt.w	r2, r2, #2
 800a53a:	9307      	strge	r3, [sp, #28]
 800a53c:	9307      	strlt	r3, [sp, #28]
 800a53e:	bfb8      	it	lt
 800a540:	9204      	strlt	r2, [sp, #16]
 800a542:	7823      	ldrb	r3, [r4, #0]
 800a544:	2b2e      	cmp	r3, #46	; 0x2e
 800a546:	d10c      	bne.n	800a562 <_vfiprintf_r+0x15a>
 800a548:	7863      	ldrb	r3, [r4, #1]
 800a54a:	2b2a      	cmp	r3, #42	; 0x2a
 800a54c:	d134      	bne.n	800a5b8 <_vfiprintf_r+0x1b0>
 800a54e:	9b03      	ldr	r3, [sp, #12]
 800a550:	1d1a      	adds	r2, r3, #4
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	9203      	str	r2, [sp, #12]
 800a556:	2b00      	cmp	r3, #0
 800a558:	bfb8      	it	lt
 800a55a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a55e:	3402      	adds	r4, #2
 800a560:	9305      	str	r3, [sp, #20]
 800a562:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a638 <_vfiprintf_r+0x230>
 800a566:	7821      	ldrb	r1, [r4, #0]
 800a568:	2203      	movs	r2, #3
 800a56a:	4650      	mov	r0, sl
 800a56c:	f7f5 fe38 	bl	80001e0 <memchr>
 800a570:	b138      	cbz	r0, 800a582 <_vfiprintf_r+0x17a>
 800a572:	9b04      	ldr	r3, [sp, #16]
 800a574:	eba0 000a 	sub.w	r0, r0, sl
 800a578:	2240      	movs	r2, #64	; 0x40
 800a57a:	4082      	lsls	r2, r0
 800a57c:	4313      	orrs	r3, r2
 800a57e:	3401      	adds	r4, #1
 800a580:	9304      	str	r3, [sp, #16]
 800a582:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a586:	4829      	ldr	r0, [pc, #164]	; (800a62c <_vfiprintf_r+0x224>)
 800a588:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a58c:	2206      	movs	r2, #6
 800a58e:	f7f5 fe27 	bl	80001e0 <memchr>
 800a592:	2800      	cmp	r0, #0
 800a594:	d03f      	beq.n	800a616 <_vfiprintf_r+0x20e>
 800a596:	4b26      	ldr	r3, [pc, #152]	; (800a630 <_vfiprintf_r+0x228>)
 800a598:	bb1b      	cbnz	r3, 800a5e2 <_vfiprintf_r+0x1da>
 800a59a:	9b03      	ldr	r3, [sp, #12]
 800a59c:	3307      	adds	r3, #7
 800a59e:	f023 0307 	bic.w	r3, r3, #7
 800a5a2:	3308      	adds	r3, #8
 800a5a4:	9303      	str	r3, [sp, #12]
 800a5a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5a8:	443b      	add	r3, r7
 800a5aa:	9309      	str	r3, [sp, #36]	; 0x24
 800a5ac:	e768      	b.n	800a480 <_vfiprintf_r+0x78>
 800a5ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5b2:	460c      	mov	r4, r1
 800a5b4:	2001      	movs	r0, #1
 800a5b6:	e7a6      	b.n	800a506 <_vfiprintf_r+0xfe>
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	3401      	adds	r4, #1
 800a5bc:	9305      	str	r3, [sp, #20]
 800a5be:	4619      	mov	r1, r3
 800a5c0:	f04f 0c0a 	mov.w	ip, #10
 800a5c4:	4620      	mov	r0, r4
 800a5c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5ca:	3a30      	subs	r2, #48	; 0x30
 800a5cc:	2a09      	cmp	r2, #9
 800a5ce:	d903      	bls.n	800a5d8 <_vfiprintf_r+0x1d0>
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d0c6      	beq.n	800a562 <_vfiprintf_r+0x15a>
 800a5d4:	9105      	str	r1, [sp, #20]
 800a5d6:	e7c4      	b.n	800a562 <_vfiprintf_r+0x15a>
 800a5d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5dc:	4604      	mov	r4, r0
 800a5de:	2301      	movs	r3, #1
 800a5e0:	e7f0      	b.n	800a5c4 <_vfiprintf_r+0x1bc>
 800a5e2:	ab03      	add	r3, sp, #12
 800a5e4:	9300      	str	r3, [sp, #0]
 800a5e6:	462a      	mov	r2, r5
 800a5e8:	4b12      	ldr	r3, [pc, #72]	; (800a634 <_vfiprintf_r+0x22c>)
 800a5ea:	a904      	add	r1, sp, #16
 800a5ec:	4630      	mov	r0, r6
 800a5ee:	f7fd fe8b 	bl	8008308 <_printf_float>
 800a5f2:	4607      	mov	r7, r0
 800a5f4:	1c78      	adds	r0, r7, #1
 800a5f6:	d1d6      	bne.n	800a5a6 <_vfiprintf_r+0x19e>
 800a5f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5fa:	07d9      	lsls	r1, r3, #31
 800a5fc:	d405      	bmi.n	800a60a <_vfiprintf_r+0x202>
 800a5fe:	89ab      	ldrh	r3, [r5, #12]
 800a600:	059a      	lsls	r2, r3, #22
 800a602:	d402      	bmi.n	800a60a <_vfiprintf_r+0x202>
 800a604:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a606:	f7fe fbdb 	bl	8008dc0 <__retarget_lock_release_recursive>
 800a60a:	89ab      	ldrh	r3, [r5, #12]
 800a60c:	065b      	lsls	r3, r3, #25
 800a60e:	f53f af1d 	bmi.w	800a44c <_vfiprintf_r+0x44>
 800a612:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a614:	e71c      	b.n	800a450 <_vfiprintf_r+0x48>
 800a616:	ab03      	add	r3, sp, #12
 800a618:	9300      	str	r3, [sp, #0]
 800a61a:	462a      	mov	r2, r5
 800a61c:	4b05      	ldr	r3, [pc, #20]	; (800a634 <_vfiprintf_r+0x22c>)
 800a61e:	a904      	add	r1, sp, #16
 800a620:	4630      	mov	r0, r6
 800a622:	f7fe f915 	bl	8008850 <_printf_i>
 800a626:	e7e4      	b.n	800a5f2 <_vfiprintf_r+0x1ea>
 800a628:	0800adf4 	.word	0x0800adf4
 800a62c:	0800adfe 	.word	0x0800adfe
 800a630:	08008309 	.word	0x08008309
 800a634:	0800a3e3 	.word	0x0800a3e3
 800a638:	0800adfa 	.word	0x0800adfa

0800a63c <__sflush_r>:
 800a63c:	898a      	ldrh	r2, [r1, #12]
 800a63e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a642:	4605      	mov	r5, r0
 800a644:	0710      	lsls	r0, r2, #28
 800a646:	460c      	mov	r4, r1
 800a648:	d458      	bmi.n	800a6fc <__sflush_r+0xc0>
 800a64a:	684b      	ldr	r3, [r1, #4]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	dc05      	bgt.n	800a65c <__sflush_r+0x20>
 800a650:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a652:	2b00      	cmp	r3, #0
 800a654:	dc02      	bgt.n	800a65c <__sflush_r+0x20>
 800a656:	2000      	movs	r0, #0
 800a658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a65c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a65e:	2e00      	cmp	r6, #0
 800a660:	d0f9      	beq.n	800a656 <__sflush_r+0x1a>
 800a662:	2300      	movs	r3, #0
 800a664:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a668:	682f      	ldr	r7, [r5, #0]
 800a66a:	6a21      	ldr	r1, [r4, #32]
 800a66c:	602b      	str	r3, [r5, #0]
 800a66e:	d032      	beq.n	800a6d6 <__sflush_r+0x9a>
 800a670:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a672:	89a3      	ldrh	r3, [r4, #12]
 800a674:	075a      	lsls	r2, r3, #29
 800a676:	d505      	bpl.n	800a684 <__sflush_r+0x48>
 800a678:	6863      	ldr	r3, [r4, #4]
 800a67a:	1ac0      	subs	r0, r0, r3
 800a67c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a67e:	b10b      	cbz	r3, 800a684 <__sflush_r+0x48>
 800a680:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a682:	1ac0      	subs	r0, r0, r3
 800a684:	2300      	movs	r3, #0
 800a686:	4602      	mov	r2, r0
 800a688:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a68a:	6a21      	ldr	r1, [r4, #32]
 800a68c:	4628      	mov	r0, r5
 800a68e:	47b0      	blx	r6
 800a690:	1c43      	adds	r3, r0, #1
 800a692:	89a3      	ldrh	r3, [r4, #12]
 800a694:	d106      	bne.n	800a6a4 <__sflush_r+0x68>
 800a696:	6829      	ldr	r1, [r5, #0]
 800a698:	291d      	cmp	r1, #29
 800a69a:	d82b      	bhi.n	800a6f4 <__sflush_r+0xb8>
 800a69c:	4a29      	ldr	r2, [pc, #164]	; (800a744 <__sflush_r+0x108>)
 800a69e:	410a      	asrs	r2, r1
 800a6a0:	07d6      	lsls	r6, r2, #31
 800a6a2:	d427      	bmi.n	800a6f4 <__sflush_r+0xb8>
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	6062      	str	r2, [r4, #4]
 800a6a8:	04d9      	lsls	r1, r3, #19
 800a6aa:	6922      	ldr	r2, [r4, #16]
 800a6ac:	6022      	str	r2, [r4, #0]
 800a6ae:	d504      	bpl.n	800a6ba <__sflush_r+0x7e>
 800a6b0:	1c42      	adds	r2, r0, #1
 800a6b2:	d101      	bne.n	800a6b8 <__sflush_r+0x7c>
 800a6b4:	682b      	ldr	r3, [r5, #0]
 800a6b6:	b903      	cbnz	r3, 800a6ba <__sflush_r+0x7e>
 800a6b8:	6560      	str	r0, [r4, #84]	; 0x54
 800a6ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6bc:	602f      	str	r7, [r5, #0]
 800a6be:	2900      	cmp	r1, #0
 800a6c0:	d0c9      	beq.n	800a656 <__sflush_r+0x1a>
 800a6c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6c6:	4299      	cmp	r1, r3
 800a6c8:	d002      	beq.n	800a6d0 <__sflush_r+0x94>
 800a6ca:	4628      	mov	r0, r5
 800a6cc:	f7ff f9f6 	bl	8009abc <_free_r>
 800a6d0:	2000      	movs	r0, #0
 800a6d2:	6360      	str	r0, [r4, #52]	; 0x34
 800a6d4:	e7c0      	b.n	800a658 <__sflush_r+0x1c>
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	4628      	mov	r0, r5
 800a6da:	47b0      	blx	r6
 800a6dc:	1c41      	adds	r1, r0, #1
 800a6de:	d1c8      	bne.n	800a672 <__sflush_r+0x36>
 800a6e0:	682b      	ldr	r3, [r5, #0]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d0c5      	beq.n	800a672 <__sflush_r+0x36>
 800a6e6:	2b1d      	cmp	r3, #29
 800a6e8:	d001      	beq.n	800a6ee <__sflush_r+0xb2>
 800a6ea:	2b16      	cmp	r3, #22
 800a6ec:	d101      	bne.n	800a6f2 <__sflush_r+0xb6>
 800a6ee:	602f      	str	r7, [r5, #0]
 800a6f0:	e7b1      	b.n	800a656 <__sflush_r+0x1a>
 800a6f2:	89a3      	ldrh	r3, [r4, #12]
 800a6f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6f8:	81a3      	strh	r3, [r4, #12]
 800a6fa:	e7ad      	b.n	800a658 <__sflush_r+0x1c>
 800a6fc:	690f      	ldr	r7, [r1, #16]
 800a6fe:	2f00      	cmp	r7, #0
 800a700:	d0a9      	beq.n	800a656 <__sflush_r+0x1a>
 800a702:	0793      	lsls	r3, r2, #30
 800a704:	680e      	ldr	r6, [r1, #0]
 800a706:	bf08      	it	eq
 800a708:	694b      	ldreq	r3, [r1, #20]
 800a70a:	600f      	str	r7, [r1, #0]
 800a70c:	bf18      	it	ne
 800a70e:	2300      	movne	r3, #0
 800a710:	eba6 0807 	sub.w	r8, r6, r7
 800a714:	608b      	str	r3, [r1, #8]
 800a716:	f1b8 0f00 	cmp.w	r8, #0
 800a71a:	dd9c      	ble.n	800a656 <__sflush_r+0x1a>
 800a71c:	6a21      	ldr	r1, [r4, #32]
 800a71e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a720:	4643      	mov	r3, r8
 800a722:	463a      	mov	r2, r7
 800a724:	4628      	mov	r0, r5
 800a726:	47b0      	blx	r6
 800a728:	2800      	cmp	r0, #0
 800a72a:	dc06      	bgt.n	800a73a <__sflush_r+0xfe>
 800a72c:	89a3      	ldrh	r3, [r4, #12]
 800a72e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a732:	81a3      	strh	r3, [r4, #12]
 800a734:	f04f 30ff 	mov.w	r0, #4294967295
 800a738:	e78e      	b.n	800a658 <__sflush_r+0x1c>
 800a73a:	4407      	add	r7, r0
 800a73c:	eba8 0800 	sub.w	r8, r8, r0
 800a740:	e7e9      	b.n	800a716 <__sflush_r+0xda>
 800a742:	bf00      	nop
 800a744:	dfbffffe 	.word	0xdfbffffe

0800a748 <_fflush_r>:
 800a748:	b538      	push	{r3, r4, r5, lr}
 800a74a:	690b      	ldr	r3, [r1, #16]
 800a74c:	4605      	mov	r5, r0
 800a74e:	460c      	mov	r4, r1
 800a750:	b913      	cbnz	r3, 800a758 <_fflush_r+0x10>
 800a752:	2500      	movs	r5, #0
 800a754:	4628      	mov	r0, r5
 800a756:	bd38      	pop	{r3, r4, r5, pc}
 800a758:	b118      	cbz	r0, 800a762 <_fflush_r+0x1a>
 800a75a:	6a03      	ldr	r3, [r0, #32]
 800a75c:	b90b      	cbnz	r3, 800a762 <_fflush_r+0x1a>
 800a75e:	f7fe fa25 	bl	8008bac <__sinit>
 800a762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d0f3      	beq.n	800a752 <_fflush_r+0xa>
 800a76a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a76c:	07d0      	lsls	r0, r2, #31
 800a76e:	d404      	bmi.n	800a77a <_fflush_r+0x32>
 800a770:	0599      	lsls	r1, r3, #22
 800a772:	d402      	bmi.n	800a77a <_fflush_r+0x32>
 800a774:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a776:	f7fe fb22 	bl	8008dbe <__retarget_lock_acquire_recursive>
 800a77a:	4628      	mov	r0, r5
 800a77c:	4621      	mov	r1, r4
 800a77e:	f7ff ff5d 	bl	800a63c <__sflush_r>
 800a782:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a784:	07da      	lsls	r2, r3, #31
 800a786:	4605      	mov	r5, r0
 800a788:	d4e4      	bmi.n	800a754 <_fflush_r+0xc>
 800a78a:	89a3      	ldrh	r3, [r4, #12]
 800a78c:	059b      	lsls	r3, r3, #22
 800a78e:	d4e1      	bmi.n	800a754 <_fflush_r+0xc>
 800a790:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a792:	f7fe fb15 	bl	8008dc0 <__retarget_lock_release_recursive>
 800a796:	e7dd      	b.n	800a754 <_fflush_r+0xc>

0800a798 <__swbuf_r>:
 800a798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a79a:	460e      	mov	r6, r1
 800a79c:	4614      	mov	r4, r2
 800a79e:	4605      	mov	r5, r0
 800a7a0:	b118      	cbz	r0, 800a7aa <__swbuf_r+0x12>
 800a7a2:	6a03      	ldr	r3, [r0, #32]
 800a7a4:	b90b      	cbnz	r3, 800a7aa <__swbuf_r+0x12>
 800a7a6:	f7fe fa01 	bl	8008bac <__sinit>
 800a7aa:	69a3      	ldr	r3, [r4, #24]
 800a7ac:	60a3      	str	r3, [r4, #8]
 800a7ae:	89a3      	ldrh	r3, [r4, #12]
 800a7b0:	071a      	lsls	r2, r3, #28
 800a7b2:	d525      	bpl.n	800a800 <__swbuf_r+0x68>
 800a7b4:	6923      	ldr	r3, [r4, #16]
 800a7b6:	b31b      	cbz	r3, 800a800 <__swbuf_r+0x68>
 800a7b8:	6823      	ldr	r3, [r4, #0]
 800a7ba:	6922      	ldr	r2, [r4, #16]
 800a7bc:	1a98      	subs	r0, r3, r2
 800a7be:	6963      	ldr	r3, [r4, #20]
 800a7c0:	b2f6      	uxtb	r6, r6
 800a7c2:	4283      	cmp	r3, r0
 800a7c4:	4637      	mov	r7, r6
 800a7c6:	dc04      	bgt.n	800a7d2 <__swbuf_r+0x3a>
 800a7c8:	4621      	mov	r1, r4
 800a7ca:	4628      	mov	r0, r5
 800a7cc:	f7ff ffbc 	bl	800a748 <_fflush_r>
 800a7d0:	b9e0      	cbnz	r0, 800a80c <__swbuf_r+0x74>
 800a7d2:	68a3      	ldr	r3, [r4, #8]
 800a7d4:	3b01      	subs	r3, #1
 800a7d6:	60a3      	str	r3, [r4, #8]
 800a7d8:	6823      	ldr	r3, [r4, #0]
 800a7da:	1c5a      	adds	r2, r3, #1
 800a7dc:	6022      	str	r2, [r4, #0]
 800a7de:	701e      	strb	r6, [r3, #0]
 800a7e0:	6962      	ldr	r2, [r4, #20]
 800a7e2:	1c43      	adds	r3, r0, #1
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d004      	beq.n	800a7f2 <__swbuf_r+0x5a>
 800a7e8:	89a3      	ldrh	r3, [r4, #12]
 800a7ea:	07db      	lsls	r3, r3, #31
 800a7ec:	d506      	bpl.n	800a7fc <__swbuf_r+0x64>
 800a7ee:	2e0a      	cmp	r6, #10
 800a7f0:	d104      	bne.n	800a7fc <__swbuf_r+0x64>
 800a7f2:	4621      	mov	r1, r4
 800a7f4:	4628      	mov	r0, r5
 800a7f6:	f7ff ffa7 	bl	800a748 <_fflush_r>
 800a7fa:	b938      	cbnz	r0, 800a80c <__swbuf_r+0x74>
 800a7fc:	4638      	mov	r0, r7
 800a7fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a800:	4621      	mov	r1, r4
 800a802:	4628      	mov	r0, r5
 800a804:	f000 f806 	bl	800a814 <__swsetup_r>
 800a808:	2800      	cmp	r0, #0
 800a80a:	d0d5      	beq.n	800a7b8 <__swbuf_r+0x20>
 800a80c:	f04f 37ff 	mov.w	r7, #4294967295
 800a810:	e7f4      	b.n	800a7fc <__swbuf_r+0x64>
	...

0800a814 <__swsetup_r>:
 800a814:	b538      	push	{r3, r4, r5, lr}
 800a816:	4b2a      	ldr	r3, [pc, #168]	; (800a8c0 <__swsetup_r+0xac>)
 800a818:	4605      	mov	r5, r0
 800a81a:	6818      	ldr	r0, [r3, #0]
 800a81c:	460c      	mov	r4, r1
 800a81e:	b118      	cbz	r0, 800a828 <__swsetup_r+0x14>
 800a820:	6a03      	ldr	r3, [r0, #32]
 800a822:	b90b      	cbnz	r3, 800a828 <__swsetup_r+0x14>
 800a824:	f7fe f9c2 	bl	8008bac <__sinit>
 800a828:	89a3      	ldrh	r3, [r4, #12]
 800a82a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a82e:	0718      	lsls	r0, r3, #28
 800a830:	d422      	bmi.n	800a878 <__swsetup_r+0x64>
 800a832:	06d9      	lsls	r1, r3, #27
 800a834:	d407      	bmi.n	800a846 <__swsetup_r+0x32>
 800a836:	2309      	movs	r3, #9
 800a838:	602b      	str	r3, [r5, #0]
 800a83a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a83e:	81a3      	strh	r3, [r4, #12]
 800a840:	f04f 30ff 	mov.w	r0, #4294967295
 800a844:	e034      	b.n	800a8b0 <__swsetup_r+0x9c>
 800a846:	0758      	lsls	r0, r3, #29
 800a848:	d512      	bpl.n	800a870 <__swsetup_r+0x5c>
 800a84a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a84c:	b141      	cbz	r1, 800a860 <__swsetup_r+0x4c>
 800a84e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a852:	4299      	cmp	r1, r3
 800a854:	d002      	beq.n	800a85c <__swsetup_r+0x48>
 800a856:	4628      	mov	r0, r5
 800a858:	f7ff f930 	bl	8009abc <_free_r>
 800a85c:	2300      	movs	r3, #0
 800a85e:	6363      	str	r3, [r4, #52]	; 0x34
 800a860:	89a3      	ldrh	r3, [r4, #12]
 800a862:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a866:	81a3      	strh	r3, [r4, #12]
 800a868:	2300      	movs	r3, #0
 800a86a:	6063      	str	r3, [r4, #4]
 800a86c:	6923      	ldr	r3, [r4, #16]
 800a86e:	6023      	str	r3, [r4, #0]
 800a870:	89a3      	ldrh	r3, [r4, #12]
 800a872:	f043 0308 	orr.w	r3, r3, #8
 800a876:	81a3      	strh	r3, [r4, #12]
 800a878:	6923      	ldr	r3, [r4, #16]
 800a87a:	b94b      	cbnz	r3, 800a890 <__swsetup_r+0x7c>
 800a87c:	89a3      	ldrh	r3, [r4, #12]
 800a87e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a882:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a886:	d003      	beq.n	800a890 <__swsetup_r+0x7c>
 800a888:	4621      	mov	r1, r4
 800a88a:	4628      	mov	r0, r5
 800a88c:	f000 f8c4 	bl	800aa18 <__smakebuf_r>
 800a890:	89a0      	ldrh	r0, [r4, #12]
 800a892:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a896:	f010 0301 	ands.w	r3, r0, #1
 800a89a:	d00a      	beq.n	800a8b2 <__swsetup_r+0x9e>
 800a89c:	2300      	movs	r3, #0
 800a89e:	60a3      	str	r3, [r4, #8]
 800a8a0:	6963      	ldr	r3, [r4, #20]
 800a8a2:	425b      	negs	r3, r3
 800a8a4:	61a3      	str	r3, [r4, #24]
 800a8a6:	6923      	ldr	r3, [r4, #16]
 800a8a8:	b943      	cbnz	r3, 800a8bc <__swsetup_r+0xa8>
 800a8aa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a8ae:	d1c4      	bne.n	800a83a <__swsetup_r+0x26>
 800a8b0:	bd38      	pop	{r3, r4, r5, pc}
 800a8b2:	0781      	lsls	r1, r0, #30
 800a8b4:	bf58      	it	pl
 800a8b6:	6963      	ldrpl	r3, [r4, #20]
 800a8b8:	60a3      	str	r3, [r4, #8]
 800a8ba:	e7f4      	b.n	800a8a6 <__swsetup_r+0x92>
 800a8bc:	2000      	movs	r0, #0
 800a8be:	e7f7      	b.n	800a8b0 <__swsetup_r+0x9c>
 800a8c0:	20000064 	.word	0x20000064

0800a8c4 <_sbrk_r>:
 800a8c4:	b538      	push	{r3, r4, r5, lr}
 800a8c6:	4d06      	ldr	r5, [pc, #24]	; (800a8e0 <_sbrk_r+0x1c>)
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	4604      	mov	r4, r0
 800a8cc:	4608      	mov	r0, r1
 800a8ce:	602b      	str	r3, [r5, #0]
 800a8d0:	f7f7 fb04 	bl	8001edc <_sbrk>
 800a8d4:	1c43      	adds	r3, r0, #1
 800a8d6:	d102      	bne.n	800a8de <_sbrk_r+0x1a>
 800a8d8:	682b      	ldr	r3, [r5, #0]
 800a8da:	b103      	cbz	r3, 800a8de <_sbrk_r+0x1a>
 800a8dc:	6023      	str	r3, [r4, #0]
 800a8de:	bd38      	pop	{r3, r4, r5, pc}
 800a8e0:	200005d4 	.word	0x200005d4

0800a8e4 <memcpy>:
 800a8e4:	440a      	add	r2, r1
 800a8e6:	4291      	cmp	r1, r2
 800a8e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a8ec:	d100      	bne.n	800a8f0 <memcpy+0xc>
 800a8ee:	4770      	bx	lr
 800a8f0:	b510      	push	{r4, lr}
 800a8f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8fa:	4291      	cmp	r1, r2
 800a8fc:	d1f9      	bne.n	800a8f2 <memcpy+0xe>
 800a8fe:	bd10      	pop	{r4, pc}

0800a900 <__assert_func>:
 800a900:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a902:	4614      	mov	r4, r2
 800a904:	461a      	mov	r2, r3
 800a906:	4b09      	ldr	r3, [pc, #36]	; (800a92c <__assert_func+0x2c>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	4605      	mov	r5, r0
 800a90c:	68d8      	ldr	r0, [r3, #12]
 800a90e:	b14c      	cbz	r4, 800a924 <__assert_func+0x24>
 800a910:	4b07      	ldr	r3, [pc, #28]	; (800a930 <__assert_func+0x30>)
 800a912:	9100      	str	r1, [sp, #0]
 800a914:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a918:	4906      	ldr	r1, [pc, #24]	; (800a934 <__assert_func+0x34>)
 800a91a:	462b      	mov	r3, r5
 800a91c:	f000 f844 	bl	800a9a8 <fiprintf>
 800a920:	f000 f8d8 	bl	800aad4 <abort>
 800a924:	4b04      	ldr	r3, [pc, #16]	; (800a938 <__assert_func+0x38>)
 800a926:	461c      	mov	r4, r3
 800a928:	e7f3      	b.n	800a912 <__assert_func+0x12>
 800a92a:	bf00      	nop
 800a92c:	20000064 	.word	0x20000064
 800a930:	0800ae0f 	.word	0x0800ae0f
 800a934:	0800ae1c 	.word	0x0800ae1c
 800a938:	0800ae4a 	.word	0x0800ae4a

0800a93c <_calloc_r>:
 800a93c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a93e:	fba1 2402 	umull	r2, r4, r1, r2
 800a942:	b94c      	cbnz	r4, 800a958 <_calloc_r+0x1c>
 800a944:	4611      	mov	r1, r2
 800a946:	9201      	str	r2, [sp, #4]
 800a948:	f7ff f92c 	bl	8009ba4 <_malloc_r>
 800a94c:	9a01      	ldr	r2, [sp, #4]
 800a94e:	4605      	mov	r5, r0
 800a950:	b930      	cbnz	r0, 800a960 <_calloc_r+0x24>
 800a952:	4628      	mov	r0, r5
 800a954:	b003      	add	sp, #12
 800a956:	bd30      	pop	{r4, r5, pc}
 800a958:	220c      	movs	r2, #12
 800a95a:	6002      	str	r2, [r0, #0]
 800a95c:	2500      	movs	r5, #0
 800a95e:	e7f8      	b.n	800a952 <_calloc_r+0x16>
 800a960:	4621      	mov	r1, r4
 800a962:	f7fe f9ae 	bl	8008cc2 <memset>
 800a966:	e7f4      	b.n	800a952 <_calloc_r+0x16>

0800a968 <__ascii_mbtowc>:
 800a968:	b082      	sub	sp, #8
 800a96a:	b901      	cbnz	r1, 800a96e <__ascii_mbtowc+0x6>
 800a96c:	a901      	add	r1, sp, #4
 800a96e:	b142      	cbz	r2, 800a982 <__ascii_mbtowc+0x1a>
 800a970:	b14b      	cbz	r3, 800a986 <__ascii_mbtowc+0x1e>
 800a972:	7813      	ldrb	r3, [r2, #0]
 800a974:	600b      	str	r3, [r1, #0]
 800a976:	7812      	ldrb	r2, [r2, #0]
 800a978:	1e10      	subs	r0, r2, #0
 800a97a:	bf18      	it	ne
 800a97c:	2001      	movne	r0, #1
 800a97e:	b002      	add	sp, #8
 800a980:	4770      	bx	lr
 800a982:	4610      	mov	r0, r2
 800a984:	e7fb      	b.n	800a97e <__ascii_mbtowc+0x16>
 800a986:	f06f 0001 	mvn.w	r0, #1
 800a98a:	e7f8      	b.n	800a97e <__ascii_mbtowc+0x16>

0800a98c <__ascii_wctomb>:
 800a98c:	b149      	cbz	r1, 800a9a2 <__ascii_wctomb+0x16>
 800a98e:	2aff      	cmp	r2, #255	; 0xff
 800a990:	bf85      	ittet	hi
 800a992:	238a      	movhi	r3, #138	; 0x8a
 800a994:	6003      	strhi	r3, [r0, #0]
 800a996:	700a      	strbls	r2, [r1, #0]
 800a998:	f04f 30ff 	movhi.w	r0, #4294967295
 800a99c:	bf98      	it	ls
 800a99e:	2001      	movls	r0, #1
 800a9a0:	4770      	bx	lr
 800a9a2:	4608      	mov	r0, r1
 800a9a4:	4770      	bx	lr
	...

0800a9a8 <fiprintf>:
 800a9a8:	b40e      	push	{r1, r2, r3}
 800a9aa:	b503      	push	{r0, r1, lr}
 800a9ac:	4601      	mov	r1, r0
 800a9ae:	ab03      	add	r3, sp, #12
 800a9b0:	4805      	ldr	r0, [pc, #20]	; (800a9c8 <fiprintf+0x20>)
 800a9b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9b6:	6800      	ldr	r0, [r0, #0]
 800a9b8:	9301      	str	r3, [sp, #4]
 800a9ba:	f7ff fd25 	bl	800a408 <_vfiprintf_r>
 800a9be:	b002      	add	sp, #8
 800a9c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9c4:	b003      	add	sp, #12
 800a9c6:	4770      	bx	lr
 800a9c8:	20000064 	.word	0x20000064

0800a9cc <__swhatbuf_r>:
 800a9cc:	b570      	push	{r4, r5, r6, lr}
 800a9ce:	460c      	mov	r4, r1
 800a9d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9d4:	2900      	cmp	r1, #0
 800a9d6:	b096      	sub	sp, #88	; 0x58
 800a9d8:	4615      	mov	r5, r2
 800a9da:	461e      	mov	r6, r3
 800a9dc:	da0d      	bge.n	800a9fa <__swhatbuf_r+0x2e>
 800a9de:	89a3      	ldrh	r3, [r4, #12]
 800a9e0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a9e4:	f04f 0100 	mov.w	r1, #0
 800a9e8:	bf0c      	ite	eq
 800a9ea:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a9ee:	2340      	movne	r3, #64	; 0x40
 800a9f0:	2000      	movs	r0, #0
 800a9f2:	6031      	str	r1, [r6, #0]
 800a9f4:	602b      	str	r3, [r5, #0]
 800a9f6:	b016      	add	sp, #88	; 0x58
 800a9f8:	bd70      	pop	{r4, r5, r6, pc}
 800a9fa:	466a      	mov	r2, sp
 800a9fc:	f000 f848 	bl	800aa90 <_fstat_r>
 800aa00:	2800      	cmp	r0, #0
 800aa02:	dbec      	blt.n	800a9de <__swhatbuf_r+0x12>
 800aa04:	9901      	ldr	r1, [sp, #4]
 800aa06:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800aa0a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800aa0e:	4259      	negs	r1, r3
 800aa10:	4159      	adcs	r1, r3
 800aa12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa16:	e7eb      	b.n	800a9f0 <__swhatbuf_r+0x24>

0800aa18 <__smakebuf_r>:
 800aa18:	898b      	ldrh	r3, [r1, #12]
 800aa1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aa1c:	079d      	lsls	r5, r3, #30
 800aa1e:	4606      	mov	r6, r0
 800aa20:	460c      	mov	r4, r1
 800aa22:	d507      	bpl.n	800aa34 <__smakebuf_r+0x1c>
 800aa24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aa28:	6023      	str	r3, [r4, #0]
 800aa2a:	6123      	str	r3, [r4, #16]
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	6163      	str	r3, [r4, #20]
 800aa30:	b002      	add	sp, #8
 800aa32:	bd70      	pop	{r4, r5, r6, pc}
 800aa34:	ab01      	add	r3, sp, #4
 800aa36:	466a      	mov	r2, sp
 800aa38:	f7ff ffc8 	bl	800a9cc <__swhatbuf_r>
 800aa3c:	9900      	ldr	r1, [sp, #0]
 800aa3e:	4605      	mov	r5, r0
 800aa40:	4630      	mov	r0, r6
 800aa42:	f7ff f8af 	bl	8009ba4 <_malloc_r>
 800aa46:	b948      	cbnz	r0, 800aa5c <__smakebuf_r+0x44>
 800aa48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa4c:	059a      	lsls	r2, r3, #22
 800aa4e:	d4ef      	bmi.n	800aa30 <__smakebuf_r+0x18>
 800aa50:	f023 0303 	bic.w	r3, r3, #3
 800aa54:	f043 0302 	orr.w	r3, r3, #2
 800aa58:	81a3      	strh	r3, [r4, #12]
 800aa5a:	e7e3      	b.n	800aa24 <__smakebuf_r+0xc>
 800aa5c:	89a3      	ldrh	r3, [r4, #12]
 800aa5e:	6020      	str	r0, [r4, #0]
 800aa60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa64:	81a3      	strh	r3, [r4, #12]
 800aa66:	9b00      	ldr	r3, [sp, #0]
 800aa68:	6163      	str	r3, [r4, #20]
 800aa6a:	9b01      	ldr	r3, [sp, #4]
 800aa6c:	6120      	str	r0, [r4, #16]
 800aa6e:	b15b      	cbz	r3, 800aa88 <__smakebuf_r+0x70>
 800aa70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa74:	4630      	mov	r0, r6
 800aa76:	f000 f81d 	bl	800aab4 <_isatty_r>
 800aa7a:	b128      	cbz	r0, 800aa88 <__smakebuf_r+0x70>
 800aa7c:	89a3      	ldrh	r3, [r4, #12]
 800aa7e:	f023 0303 	bic.w	r3, r3, #3
 800aa82:	f043 0301 	orr.w	r3, r3, #1
 800aa86:	81a3      	strh	r3, [r4, #12]
 800aa88:	89a3      	ldrh	r3, [r4, #12]
 800aa8a:	431d      	orrs	r5, r3
 800aa8c:	81a5      	strh	r5, [r4, #12]
 800aa8e:	e7cf      	b.n	800aa30 <__smakebuf_r+0x18>

0800aa90 <_fstat_r>:
 800aa90:	b538      	push	{r3, r4, r5, lr}
 800aa92:	4d07      	ldr	r5, [pc, #28]	; (800aab0 <_fstat_r+0x20>)
 800aa94:	2300      	movs	r3, #0
 800aa96:	4604      	mov	r4, r0
 800aa98:	4608      	mov	r0, r1
 800aa9a:	4611      	mov	r1, r2
 800aa9c:	602b      	str	r3, [r5, #0]
 800aa9e:	f7f7 f9f4 	bl	8001e8a <_fstat>
 800aaa2:	1c43      	adds	r3, r0, #1
 800aaa4:	d102      	bne.n	800aaac <_fstat_r+0x1c>
 800aaa6:	682b      	ldr	r3, [r5, #0]
 800aaa8:	b103      	cbz	r3, 800aaac <_fstat_r+0x1c>
 800aaaa:	6023      	str	r3, [r4, #0]
 800aaac:	bd38      	pop	{r3, r4, r5, pc}
 800aaae:	bf00      	nop
 800aab0:	200005d4 	.word	0x200005d4

0800aab4 <_isatty_r>:
 800aab4:	b538      	push	{r3, r4, r5, lr}
 800aab6:	4d06      	ldr	r5, [pc, #24]	; (800aad0 <_isatty_r+0x1c>)
 800aab8:	2300      	movs	r3, #0
 800aaba:	4604      	mov	r4, r0
 800aabc:	4608      	mov	r0, r1
 800aabe:	602b      	str	r3, [r5, #0]
 800aac0:	f7f7 f9f3 	bl	8001eaa <_isatty>
 800aac4:	1c43      	adds	r3, r0, #1
 800aac6:	d102      	bne.n	800aace <_isatty_r+0x1a>
 800aac8:	682b      	ldr	r3, [r5, #0]
 800aaca:	b103      	cbz	r3, 800aace <_isatty_r+0x1a>
 800aacc:	6023      	str	r3, [r4, #0]
 800aace:	bd38      	pop	{r3, r4, r5, pc}
 800aad0:	200005d4 	.word	0x200005d4

0800aad4 <abort>:
 800aad4:	b508      	push	{r3, lr}
 800aad6:	2006      	movs	r0, #6
 800aad8:	f000 f82c 	bl	800ab34 <raise>
 800aadc:	2001      	movs	r0, #1
 800aade:	f7f7 f991 	bl	8001e04 <_exit>

0800aae2 <_raise_r>:
 800aae2:	291f      	cmp	r1, #31
 800aae4:	b538      	push	{r3, r4, r5, lr}
 800aae6:	4604      	mov	r4, r0
 800aae8:	460d      	mov	r5, r1
 800aaea:	d904      	bls.n	800aaf6 <_raise_r+0x14>
 800aaec:	2316      	movs	r3, #22
 800aaee:	6003      	str	r3, [r0, #0]
 800aaf0:	f04f 30ff 	mov.w	r0, #4294967295
 800aaf4:	bd38      	pop	{r3, r4, r5, pc}
 800aaf6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800aaf8:	b112      	cbz	r2, 800ab00 <_raise_r+0x1e>
 800aafa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aafe:	b94b      	cbnz	r3, 800ab14 <_raise_r+0x32>
 800ab00:	4620      	mov	r0, r4
 800ab02:	f000 f831 	bl	800ab68 <_getpid_r>
 800ab06:	462a      	mov	r2, r5
 800ab08:	4601      	mov	r1, r0
 800ab0a:	4620      	mov	r0, r4
 800ab0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab10:	f000 b818 	b.w	800ab44 <_kill_r>
 800ab14:	2b01      	cmp	r3, #1
 800ab16:	d00a      	beq.n	800ab2e <_raise_r+0x4c>
 800ab18:	1c59      	adds	r1, r3, #1
 800ab1a:	d103      	bne.n	800ab24 <_raise_r+0x42>
 800ab1c:	2316      	movs	r3, #22
 800ab1e:	6003      	str	r3, [r0, #0]
 800ab20:	2001      	movs	r0, #1
 800ab22:	e7e7      	b.n	800aaf4 <_raise_r+0x12>
 800ab24:	2400      	movs	r4, #0
 800ab26:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ab2a:	4628      	mov	r0, r5
 800ab2c:	4798      	blx	r3
 800ab2e:	2000      	movs	r0, #0
 800ab30:	e7e0      	b.n	800aaf4 <_raise_r+0x12>
	...

0800ab34 <raise>:
 800ab34:	4b02      	ldr	r3, [pc, #8]	; (800ab40 <raise+0xc>)
 800ab36:	4601      	mov	r1, r0
 800ab38:	6818      	ldr	r0, [r3, #0]
 800ab3a:	f7ff bfd2 	b.w	800aae2 <_raise_r>
 800ab3e:	bf00      	nop
 800ab40:	20000064 	.word	0x20000064

0800ab44 <_kill_r>:
 800ab44:	b538      	push	{r3, r4, r5, lr}
 800ab46:	4d07      	ldr	r5, [pc, #28]	; (800ab64 <_kill_r+0x20>)
 800ab48:	2300      	movs	r3, #0
 800ab4a:	4604      	mov	r4, r0
 800ab4c:	4608      	mov	r0, r1
 800ab4e:	4611      	mov	r1, r2
 800ab50:	602b      	str	r3, [r5, #0]
 800ab52:	f7f7 f947 	bl	8001de4 <_kill>
 800ab56:	1c43      	adds	r3, r0, #1
 800ab58:	d102      	bne.n	800ab60 <_kill_r+0x1c>
 800ab5a:	682b      	ldr	r3, [r5, #0]
 800ab5c:	b103      	cbz	r3, 800ab60 <_kill_r+0x1c>
 800ab5e:	6023      	str	r3, [r4, #0]
 800ab60:	bd38      	pop	{r3, r4, r5, pc}
 800ab62:	bf00      	nop
 800ab64:	200005d4 	.word	0x200005d4

0800ab68 <_getpid_r>:
 800ab68:	f7f7 b934 	b.w	8001dd4 <_getpid>

0800ab6c <_close>:
 800ab6c:	4b02      	ldr	r3, [pc, #8]	; (800ab78 <_close+0xc>)
 800ab6e:	2258      	movs	r2, #88	; 0x58
 800ab70:	601a      	str	r2, [r3, #0]
 800ab72:	f04f 30ff 	mov.w	r0, #4294967295
 800ab76:	4770      	bx	lr
 800ab78:	200005d4 	.word	0x200005d4

0800ab7c <_init>:
 800ab7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab7e:	bf00      	nop
 800ab80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab82:	bc08      	pop	{r3}
 800ab84:	469e      	mov	lr, r3
 800ab86:	4770      	bx	lr

0800ab88 <_fini>:
 800ab88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab8a:	bf00      	nop
 800ab8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab8e:	bc08      	pop	{r3}
 800ab90:	469e      	mov	lr, r3
 800ab92:	4770      	bx	lr
